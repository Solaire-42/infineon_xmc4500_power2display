
infineon_xmc4500_power2display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008780  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08008780  0c008780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         00000168  20000000  0c008780  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000238  20000168  0c0088e8  00018168  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00000da0  00000000  00000000  00018168  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001677e  00000000  00000000  00018f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000296e  00000000  00000000  0002f686  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005ee4  00000000  00000000  00031ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004408  00000000  00000000  00037ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008b3b  00000000  00000000  0003c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007829  00000000  00000000  00044e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c18  00000000  00000000  0004c644  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000c06  00000000  00000000  0004d25c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	3d 36 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     =6..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 11 36 00 08 b1 02 00 08 b1 02 00 08     .....6..........
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 81 2f 00 08     ............./..
 80001ac:	71 2f 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     q/..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008780 	.word	0x0c008780
 800024c:	20000000 	.word	0x20000000
 8000250:	00000168 	.word	0x00000168
 8000254:	0c0088e8 	.word	0x0c0088e8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008780 	.word	0x0c008780
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008780 	.word	0x0c008780
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000168 	.word	0x20000168
 800027c:	00000238 	.word	0x00000238
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004271 	.word	0x08004271
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003781 	.word	0x08003781

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 fef5 	bl	80030b4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 ff5d 	bl	8003188 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 ff3c 	bl	8003174 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf14      	ite	ne
 80003be:	2301      	movne	r3, #1
 80003c0:	2300      	moveq	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <ssd1306_Reset>:
// Screen object
SSD1306_t SSD1306;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	XMC_I2C_CH_MasterStart(SSD1306.channel, SSD1306_I2C_ADDR, XMC_I2C_CH_CMD_WRITE);
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	4618      	mov	r0, r3
 800044c:	2178      	movs	r1, #120	; 0x78
 800044e:	2200      	movs	r2, #0
 8000450:	f001 f916 	bl	8001680 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(SSD1306.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) __NOP();
 8000454:	e000      	b.n	8000458 <ssd1306_WriteCommand+0x1c>
 8000456:	bf00      	nop
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcb 	bl	80003f8 <XMC_I2C_CH_GetStatusFlag>
 8000462:	4603      	mov	r3, r0
 8000464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f4      	beq.n	8000456 <ssd1306_WriteCommand+0x1a>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4618      	mov	r0, r3
 8000472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000476:	f7ff ffcb 	bl	8000410 <XMC_I2C_CH_ClearStatusFlag>

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800047a:	e000      	b.n	800047e <ssd1306_WriteCommand+0x42>
 800047c:	bf00      	nop
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff90 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f6      	bne.n	800047c <ssd1306_WriteCommand+0x40>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x00);
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	4618      	mov	r0, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f001 f94d 	bl	8001734 <XMC_I2C_CH_MasterTransmit>
	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800049a:	e000      	b.n	800049e <ssd1306_WriteCommand+0x62>
 800049c:	bf00      	nop
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff80 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1f6      	bne.n	800049c <ssd1306_WriteCommand+0x60>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, byte);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	4610      	mov	r0, r2
 80004b6:	4619      	mov	r1, r3
 80004b8:	f001 f93c 	bl	8001734 <XMC_I2C_CH_MasterTransmit>
	while (!XMC_USIC_CH_TXFIFO_IsEmpty(SSD1306.channel));
 80004bc:	bf00      	nop
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff84 	bl	80003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f083 0301 	eor.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1f4      	bne.n	80004be <ssd1306_WriteCommand+0x82>

	XMC_I2C_CH_MasterStop(SSD1306.channel);
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <ssd1306_WriteCommand+0xa8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f905 	bl	80016e8 <XMC_I2C_CH_MasterStop>
}
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000388 	.word	0x20000388

080004e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
//    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);

	XMC_I2C_CH_MasterStart(SSD1306.channel, SSD1306_I2C_ADDR, XMC_I2C_CH_CMD_WRITE);
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <ssd1306_WriteData+0xc4>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4618      	mov	r0, r3
 80004f8:	2178      	movs	r1, #120	; 0x78
 80004fa:	2200      	movs	r2, #0
 80004fc:	f001 f8c0 	bl	8001680 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(SSD1306.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) __NOP();
 8000500:	e000      	b.n	8000504 <ssd1306_WriteData+0x1c>
 8000502:	bf00      	nop
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff75 	bl	80003f8 <XMC_I2C_CH_GetStatusFlag>
 800050e:	4603      	mov	r3, r0
 8000510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f4      	beq.n	8000502 <ssd1306_WriteData+0x1a>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <ssd1306_WriteData+0xc4>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4618      	mov	r0, r3
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	f7ff ff75 	bl	8000410 <XMC_I2C_CH_ClearStatusFlag>

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 8000526:	e000      	b.n	800052a <ssd1306_WriteData+0x42>
 8000528:	bf00      	nop
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <ssd1306_WriteData+0xc4>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff3a 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f6      	bne.n	8000528 <ssd1306_WriteData+0x40>
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x40);
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <ssd1306_WriteData+0xc4>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	4618      	mov	r0, r3
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	f001 f8f7 	bl	8001734 <XMC_I2C_CH_MasterTransmit>

	for (uint32_t i=0; i<buff_size; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e016      	b.n	800057a <ssd1306_WriteData+0x92>
	{
		while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
 800054c:	e000      	b.n	8000550 <ssd1306_WriteData+0x68>
 800054e:	bf00      	nop
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff27 	bl	80003a8 <XMC_USIC_CH_TXFIFO_IsFull>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f6      	bne.n	800054e <ssd1306_WriteData+0x66>
		XMC_I2C_CH_MasterTransmit(SSD1306.channel, buffer[i]);
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000562:	6899      	ldr	r1, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4608      	mov	r0, r1
 800056e:	4619      	mov	r1, r3
 8000570:	f001 f8e0 	bl	8001734 <XMC_I2C_CH_MasterTransmit>
	XMC_I2C_CH_ClearStatusFlag(SSD1306.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
	XMC_I2C_CH_MasterTransmit(SSD1306.channel, 0x40);

	for (uint32_t i=0; i<buff_size; i++)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3e4      	bcc.n	800054c <ssd1306_WriteData+0x64>
	{
		while (XMC_USIC_CH_TXFIFO_IsFull(SSD1306.channel)) __NOP();
		XMC_I2C_CH_MasterTransmit(SSD1306.channel, buffer[i]);
	}

	while (!XMC_USIC_CH_TXFIFO_IsEmpty(SSD1306.channel));
 8000582:	bf00      	nop
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <ssd1306_WriteData+0xc4>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff21 	bl	80003d0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 800058e:	4603      	mov	r3, r0
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f4      	bne.n	8000584 <ssd1306_WriteData+0x9c>

	XMC_I2C_CH_MasterStop(SSD1306.channel);
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <ssd1306_WriteData+0xc4>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f8a2 	bl	80016e8 <XMC_I2C_CH_MasterStop>
}
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000388 	.word	0x20000388

080005b0 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
#if defined(SSD1306_USE_I2C)
void ssd1306_Init(XMC_USIC_CH_t* channel, void(*delay_fnc)(uint32_t)) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	SSD1306.rst_port = rst_port;
	SSD1306.rst_pin = rst_pin;
	SSD1306.dc_port = dc_port;
	SSD1306.dc_pin = dc_pin;
#endif
	SSD1306.channel = channel;
 80005ba:	4a37      	ldr	r2, [pc, #220]	; (8000698 <ssd1306_Init+0xe8>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6093      	str	r3, [r2, #8]
	SSD1306.delay_fnc = delay_fnc;
 80005c0:	4a35      	ldr	r2, [pc, #212]	; (8000698 <ssd1306_Init+0xe8>)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	60d3      	str	r3, [r2, #12]

    // Reset OLED
    ssd1306_Reset();
 80005c6:	f7ff ff33 	bl	8000430 <ssd1306_Reset>

    // Wait for the screen to boot
    SSD1306.delay_fnc(100);
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <ssd1306_Init+0xe8>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	4798      	blx	r3

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f9f8 	bl	80009c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005d8:	2020      	movs	r0, #32
 80005da:	f7ff ff2f 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff2c 	bl	800043c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005e4:	20b0      	movs	r0, #176	; 0xb0
 80005e6:	f7ff ff29 	bl	800043c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005ea:	20c8      	movs	r0, #200	; 0xc8
 80005ec:	f7ff ff26 	bl	800043c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff23 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005f6:	2010      	movs	r0, #16
 80005f8:	f7ff ff20 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005fc:	2040      	movs	r0, #64	; 0x40
 80005fe:	f7ff ff1d 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000602:	20ff      	movs	r0, #255	; 0xff
 8000604:	f000 f9ce 	bl	80009a4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000608:	20a1      	movs	r0, #161	; 0xa1
 800060a:	f7ff ff17 	bl	800043c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800060e:	20a6      	movs	r0, #166	; 0xa6
 8000610:	f7ff ff14 	bl	800043c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000614:	20a8      	movs	r0, #168	; 0xa8
 8000616:	f7ff ff11 	bl	800043c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800061a:	201f      	movs	r0, #31
 800061c:	f7ff ff0e 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000620:	20a4      	movs	r0, #164	; 0xa4
 8000622:	f7ff ff0b 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000626:	20d3      	movs	r0, #211	; 0xd3
 8000628:	f7ff ff08 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff05 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000632:	20d5      	movs	r0, #213	; 0xd5
 8000634:	f7ff ff02 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000638:	20f0      	movs	r0, #240	; 0xf0
 800063a:	f7ff feff 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800063e:	20d9      	movs	r0, #217	; 0xd9
 8000640:	f7ff fefc 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000644:	2022      	movs	r0, #34	; 0x22
 8000646:	f7ff fef9 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800064a:	20da      	movs	r0, #218	; 0xda
 800064c:	f7ff fef6 	bl	800043c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff fef3 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000656:	20db      	movs	r0, #219	; 0xdb
 8000658:	f7ff fef0 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800065c:	2020      	movs	r0, #32
 800065e:	f7ff feed 	bl	800043c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000662:	208d      	movs	r0, #141	; 0x8d
 8000664:	f7ff feea 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000668:	2014      	movs	r0, #20
 800066a:	f7ff fee7 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f9aa 	bl	80009c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f811 	bl	800069c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800067a:	f000 f831 	bl	80006e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <ssd1306_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <ssd1306_Init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <ssd1306_Init+0xe8>)
 800068c:	2201      	movs	r2, #1
 800068e:	715a      	strb	r2, [r3, #5]
}
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000388 	.word	0x20000388

0800069c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00d      	b.n	80006c8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <ssd1306_Fill+0x1a>
 80006b2:	2100      	movs	r1, #0
 80006b4:	e000      	b.n	80006b8 <ssd1306_Fill+0x1c>
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <ssd1306_Fill+0x40>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80006ce:	d3ed      	bcc.n	80006ac <ssd1306_Fill+0x10>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000168 	.word	0x20000168

080006e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	e01a      	b.n	8000722 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3b50      	subs	r3, #80	; 0x50
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fea2 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff fe9f 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80006fe:	2010      	movs	r0, #16
 8000700:	f7ff fe9c 	bl	800043c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000704:	79fa      	ldrb	r2, [r7, #7]
 8000706:	4613      	mov	r3, r2
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	4413      	add	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	461a      	mov	r2, r3
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <ssd1306_UpdateScreen+0x50>)
 8000712:	4413      	add	r3, r2
 8000714:	4618      	mov	r0, r3
 8000716:	2182      	movs	r1, #130	; 0x82
 8000718:	f7ff fee6 	bl	80004e8 <ssd1306_WriteData>
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9e1      	bls.n	80006ec <ssd1306_UpdateScreen+0xc>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000168 	.word	0x20000168

08000734 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b81      	cmp	r3, #129	; 0x81
 800074a:	d802      	bhi.n	8000752 <ssd1306_DrawPixel+0x1e>
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b1f      	cmp	r3, #31
 8000750:	d900      	bls.n	8000754 <ssd1306_DrawPixel+0x20>
        // Don't write outside the buffer
        return;
 8000752:	e050      	b.n	80007f6 <ssd1306_DrawPixel+0xc2>
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <ssd1306_DrawPixel+0xcc>)
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800076a:	797b      	ldrb	r3, [r7, #5]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d120      	bne.n	80007b2 <ssd1306_DrawPixel+0x7e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	4601      	mov	r1, r0
 800077a:	460b      	mov	r3, r1
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	440b      	add	r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	441a      	add	r2, r3
 8000784:	79f9      	ldrb	r1, [r7, #7]
 8000786:	4603      	mov	r3, r0
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	4403      	add	r3, r0
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	440b      	add	r3, r1
 8000790:	491c      	ldr	r1, [pc, #112]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 8000792:	5ccb      	ldrb	r3, [r1, r3]
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4601      	mov	r1, r0
 80007a6:	430b      	orrs	r3, r1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b2d9      	uxtb	r1, r3
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007ae:	5499      	strb	r1, [r3, r2]
 80007b0:	e021      	b.n	80007f6 <ssd1306_DrawPixel+0xc2>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	4601      	mov	r1, r0
 80007bc:	460b      	mov	r3, r1
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	440b      	add	r3, r1
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	441a      	add	r2, r3
 80007c6:	79f9      	ldrb	r1, [r7, #7]
 80007c8:	4603      	mov	r3, r0
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	4403      	add	r3, r0
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007d4:	5ccb      	ldrb	r3, [r1, r3]
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4601      	mov	r1, r0
 80007ec:	400b      	ands	r3, r1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <ssd1306_DrawPixel+0xd0>)
 80007f4:	5499      	strb	r1, [r3, r2]
    }
}
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000388 	.word	0x20000388
 8000804:	20000168 	.word	0x20000168

08000808 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4604      	mov	r4, r0
 8000810:	1d38      	adds	r0, r7, #4
 8000812:	e880 0006 	stmia.w	r0, {r1, r2}
 8000816:	461a      	mov	r2, r3
 8000818:	4623      	mov	r3, r4
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	4613      	mov	r3, r2
 800081e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2b1f      	cmp	r3, #31
 8000824:	d902      	bls.n	800082c <ssd1306_WriteChar+0x24>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b7e      	cmp	r3, #126	; 0x7e
 800082a:	d901      	bls.n	8000830 <ssd1306_WriteChar+0x28>
        return 0;
 800082c:	2300      	movs	r3, #0
 800082e:	e071      	b.n	8000914 <ssd1306_WriteChar+0x10c>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <ssd1306_WriteChar+0x114>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	793b      	ldrb	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	2b82      	cmp	r3, #130	; 0x82
 800083c:	dc06      	bgt.n	800084c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <ssd1306_WriteChar+0x114>)
 8000840:	885b      	ldrh	r3, [r3, #2]
 8000842:	461a      	mov	r2, r3
 8000844:	797b      	ldrb	r3, [r7, #5]
 8000846:	4413      	add	r3, r2
    // Check if character is valid
    if (ch < 32 || ch > 126)
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000848:	2b20      	cmp	r3, #32
 800084a:	dd01      	ble.n	8000850 <ssd1306_WriteChar+0x48>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
    {
        // Not enough space on current line
        return 0;
 800084c:	2300      	movs	r3, #0
 800084e:	e061      	b.n	8000914 <ssd1306_WriteChar+0x10c>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e050      	b.n	80008f8 <ssd1306_WriteChar+0xf0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	3b20      	subs	r3, #32
 800085c:	7979      	ldrb	r1, [r7, #5]
 800085e:	fb01 f303 	mul.w	r3, r1, r3
 8000862:	4619      	mov	r1, r3
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	440b      	add	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	e038      	b.n	80008e8 <ssd1306_WriteChar+0xe0>
            if((b << j) & 0x8000)  {
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d014      	beq.n	80008b0 <ssd1306_WriteChar+0xa8>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <ssd1306_WriteChar+0x114>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4413      	add	r3, r2
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <ssd1306_WriteChar+0x114>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4413      	add	r3, r2
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	f7ff ff43 	bl	8000734 <ssd1306_DrawPixel>
 80008ae:	e018      	b.n	80008e2 <ssd1306_WriteChar+0xda>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <ssd1306_WriteChar+0x114>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <ssd1306_WriteChar+0x114>)
 80008c0:	885b      	ldrh	r3, [r3, #2]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	f7ff ff29 	bl	8000734 <ssd1306_DrawPixel>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
        for(j = 0; j < Font.FontWidth; j++) {
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3301      	adds	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	793b      	ldrb	r3, [r7, #4]
 80008ea:	461a      	mov	r2, r3
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8c1      	bhi.n	8000876 <ssd1306_WriteChar+0x6e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3301      	adds	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	461a      	mov	r2, r3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d8a9      	bhi.n	8000856 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <ssd1306_WriteChar+0x114>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	793b      	ldrb	r3, [r7, #4]
 8000908:	b29b      	uxth	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <ssd1306_WriteChar+0x114>)
 8000910:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20000388 	.word	0x20000388

08000920 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	1d38      	adds	r0, r7, #4
 800092a:	e880 0006 	stmia.w	r0, {r1, r2}
 800092e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000930:	e015      	b.n	800095e <ssd1306_WriteString+0x3e>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	78fc      	ldrb	r4, [r7, #3]
 8000938:	4618      	mov	r0, r3
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000940:	4623      	mov	r3, r4
 8000942:	f7ff ff61 	bl	8000808 <ssd1306_WriteChar>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d002      	beq.n	8000958 <ssd1306_WriteString+0x38>
            // Char could not be written
            return *str;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	e008      	b.n	800096a <ssd1306_WriteString+0x4a>
        }
        
        // Next char
        str++;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
}

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
    // Write until null-byte
    while (*str) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e5      	bne.n	8000932 <ssd1306_WriteString+0x12>
        // Next char
        str++;
    }
    
    // Everything ok
    return *str;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	bf00      	nop

08000974 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <ssd1306_SetCursor+0x2c>)
 800098a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <ssd1306_SetCursor+0x2c>)
 8000992:	805a      	strh	r2, [r3, #2]
}
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000388 	.word	0x20000388

080009a4 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009ae:	2381      	movs	r3, #129	; 0x81
 80009b0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd41 	bl	800043c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fd3d 	bl	800043c <ssd1306_WriteCommand>
}
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80009d8:	23af      	movs	r3, #175	; 0xaf
 80009da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <ssd1306_SetDisplayOn+0x34>)
 80009de:	2201      	movs	r2, #1
 80009e0:	719a      	strb	r2, [r3, #6]
 80009e2:	e004      	b.n	80009ee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80009e4:	23ae      	movs	r3, #174	; 0xae
 80009e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <ssd1306_SetDisplayOn+0x34>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fd23 	bl	800043c <ssd1306_WriteCommand>
}
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000388 	.word	0x20000388

08000a00 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3204      	adds	r2, #4
 8000a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	23f8      	movs	r3, #248	; 0xf8
 8000a32:	408b      	lsls	r3, r1
 8000a34:	43db      	mvns	r3, r3
 8000a36:	ea02 0103 	and.w	r1, r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1d02      	adds	r2, r0, #4
 8000a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000a46:	7afb      	ldrb	r3, [r7, #11]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	408b      	lsls	r3, r1
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <XMC_GPIO_Init+0x144>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d003      	beq.n	8000a68 <XMC_GPIO_Init+0x68>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <XMC_GPIO_Init+0x148>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d10a      	bne.n	8000a7e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8000a7c:	e042      	b.n	8000b04 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da3c      	bge.n	8000b04 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	7afb      	ldrb	r3, [r7, #11]
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	7afb      	ldrb	r3, [r7, #11]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3210      	adds	r2, #16
 8000aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aae:	7afb      	ldrb	r3, [r7, #11]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2307      	movs	r3, #7
 8000aba:	408b      	lsls	r3, r1
 8000abc:	43db      	mvns	r3, r3
 8000abe:	ea02 0103 	and.w	r1, r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f100 0210 	add.w	r2, r0, #16
 8000ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3210      	adds	r2, #16
 8000ae0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7a1b      	ldrb	r3, [r3, #8]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	ea42 0103 	orr.w	r1, r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f100 0210 	add.w	r2, r0, #16
 8000b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3204      	adds	r2, #4
 8000b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	7afb      	ldrb	r3, [r7, #11]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	ea42 0103 	orr.w	r1, r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1d02      	adds	r2, r0, #4
 8000b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	48028e00 	.word	0x48028e00
 8000b48:	48028f00 	.word	0x48028f00

08000b4c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000ffc0 	.word	0x2000ffc0

08000b64 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <XMC_SCU_GetMirrorStatus+0x14>)
 8000b6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	50004000 	.word	0x50004000

08000b7c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000b84:	f7ff fba6 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <XMC_SCU_lDelay+0x3c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <XMC_SCU_lDelay+0x40>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9a      	lsrs	r2, r3, #18
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e003      	b.n	8000baa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000ba2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3f7      	bcc.n	8000ba2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000ffc0 	.word	0x2000ffc0
 8000bbc:	431bde83 	.word	0x431bde83

08000bc0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	50004074 	.word	0x50004074

08000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60d3      	str	r3, [r2, #12]
}
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	50004074 	.word	0x50004074

08000bf4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f8c5 	bl	8000d8c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000c02:	f000 fa77 	bl	80010f4 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	79db      	ldrb	r3, [r3, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00a      	beq.n	8000c24 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000c0e:	f000 faaf 	bl	8001170 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000c12:	bf00      	nop
 8000c14:	f000 fa9a 	bl	800114c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f7      	bne.n	8000c14 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7a5b      	ldrb	r3, [r3, #9]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f929 	bl	8000e80 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ff98 	bl	8000b64 <XMC_SCU_GetMirrorStatus>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1fa      	bne.n	8000c30 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7a1b      	ldrb	r3, [r3, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fa32 	bl	80010a8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7c1b      	ldrb	r3, [r3, #16]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f937 	bl	8000ebc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7c5b      	ldrb	r3, [r3, #17]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f95a 	bl	8000f0c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7c9b      	ldrb	r3, [r3, #18]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f941 	bl	8000ee4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7cdb      	ldrb	r3, [r3, #19]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f964 	bl	8000f34 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00a      	beq.n	8000c8a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000c74:	f000 fab4 	bl	80011e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000c78:	bf00      	nop
 8000c7a:	f000 fad9 	bl	8001230 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f7      	bne.n	8000c7a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d109      	bne.n	8000ca6 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	799b      	ldrb	r3, [r3, #6]
 8000c96:	f083 0301 	eor.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d017      	beq.n	8000cd0 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000ca0:	f000 faea 	bl	8001278 <XMC_SCU_CLOCK_DisableSystemPll>
 8000ca4:	e014      	b.n	8000cd0 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000ca6:	f000 fad7 	bl	8001258 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	8899      	ldrh	r1, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cb6:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cbc:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4623      	mov	r3, r4
 8000ccc:	f000 fae4 	bl	8001298 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd8:	d103      	bne.n	8000ce2 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000cda:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000cde:	f000 f855 	bl	8000d8c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000ce2:	f7ff faf7 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdb0      	pop	{r4, r5, r7, pc}

08000cec <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0f1b      	lsrs	r3, r3, #28
 8000cf8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d00:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000d10:	4413      	add	r3, r2
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	50004414 	.word	0x50004414

08000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	0f1b      	lsrs	r3, r3, #28
 8000d30:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d38:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	5000440c 	.word	0x5000440c

08000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000d70:	f7ff feec 	bl	8000b4c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000d74:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	50004600 	.word	0x50004600

08000d8c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	50004600 	.word	0x50004600

08000db4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000dbc:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	50004600 	.word	0x50004600

08000ddc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000de4:	4906      	ldr	r1, [pc, #24]	; (8000e00 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	50004600 	.word	0x50004600

08000e04 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d108      	bne.n	8000e26 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	60d3      	str	r3, [r2, #12]
 8000e24:	e007      	b.n	8000e36 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	60d3      	str	r3, [r2, #12]
  }
}
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	50004710 	.word	0x50004710

08000e44 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000e4e:	bf00      	nop
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000e52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f8      	bne.n	8000e50 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000e5e:	4907      	ldr	r1, [pc, #28]	; (8000e7c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	50004000 	.word	0x50004000
 8000e7c:	50004300 	.word	0x50004300

08000e80 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000e8a:	bf00      	nop
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000e8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f8      	bne.n	8000e8c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000e9a:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	50004000 	.word	0x50004000
 8000eb8:	50004300 	.word	0x50004300

08000ebc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000ec4:	4906      	ldr	r1, [pc, #24]	; (8000ee0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	50004600 	.word	0x50004600

08000ee4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000efa:	4313      	orrs	r3, r2
 8000efc:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	50004600 	.word	0x50004600

08000f0c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000f22:	4313      	orrs	r3, r2
 8000f24:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	50004600 	.word	0x50004600

08000f34 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	50004600 	.word	0x50004600

08000f5c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000f64:	4906      	ldr	r1, [pc, #24]	; (8000f80 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	50004600 	.word	0x50004600

08000f84 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	50004600 	.word	0x50004600

08000fac <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000fb4:	4906      	ldr	r1, [pc, #24]	; (8000fd0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	50004600 	.word	0x50004600

08000fd4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	6153      	str	r3, [r2, #20]
}
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	50004710 	.word	0x50004710

08000ff4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800100a:	bf00      	nop
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f9      	beq.n	800100c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001024:	491e      	ldr	r1, [pc, #120]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001032:	4313      	orrs	r3, r2
 8001034:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f023 0310 	bic.w	r3, r3, #16
 800104c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800105a:	bf00      	nop
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f9      	beq.n	800105c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8001074:	bf00      	nop
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f9      	bne.n	8001076 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800108c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8001090:	2208      	movs	r2, #8
 8001092:	60da      	str	r2, [r3, #12]
}
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	50004710 	.word	0x50004710
 80010a4:	50004160 	.word	0x50004160

080010a8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010bc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10e      	bne.n	80010e2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010ce:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f7ff fd53 	bl	8000b7c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f7ff fd4a 	bl	8000b7c <XMC_SCU_lDelay>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	50004710 	.word	0x50004710

080010f4 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001106:	2201      	movs	r2, #1
 8001108:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800110a:	bf00      	nop
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f9      	beq.n	800110c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00a      	beq.n	800113a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800112c:	bf00      	nop
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	50004200 	.word	0x50004200
 8001148:	50004400 	.word	0x50004400

0800114c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	50004300 	.word	0x50004300

08001170 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8001174:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001178:	f7ff fd2e 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001186:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8001188:	bf00      	nop
 800118a:	f7ff fd19 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 800118e:	4603      	mov	r3, r0
 8001190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f8      	beq.n	800118a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8001198:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800119c:	f7ff fd1c 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011a2:	2208      	movs	r2, #8
 80011a4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80011a6:	bf00      	nop
 80011a8:	f7ff fd0a 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f8      	beq.n	80011a8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80011b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011ba:	f7ff fd0d 	bl	8000bd8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80011ca:	bf00      	nop
 80011cc:	f7ff fcf8 	bl	8000bc0 <XMC_SCU_INTERUPT_GetEventStatus>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f8      	beq.n	80011cc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	50004300 	.word	0x50004300

080011e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80011f0:	4d0d      	ldr	r5, [pc, #52]	; (8001228 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80011fa:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80011fe:	f001 ffb9 	bl	8003174 <OSCHP_GetFrequency>
 8001202:	4602      	mov	r2, r0
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8001206:	fba3 2302 	umull	r2, r3, r3, r2
 800120a:	0d1b      	lsrs	r3, r3, #20
 800120c:	3b01      	subs	r3, #1
 800120e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001210:	4323      	orrs	r3, r4
 8001212:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800121e:	6053      	str	r3, [r2, #4]
}
 8001220:	bdb0      	pop	{r4, r5, r7, pc}
 8001222:	bf00      	nop
 8001224:	50004710 	.word	0x50004710
 8001228:	50004700 	.word	0x50004700
 800122c:	6b5fca6b 	.word	0x6b5fca6b

08001230 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800123c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	50004710 	.word	0x50004710

08001258 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	f023 0302 	bic.w	r3, r3, #2
 800126a:	6053      	str	r3, [r2, #4]
}
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	50004710 	.word	0x50004710

08001278 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	6053      	str	r3, [r2, #4]
}
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	50004710 	.word	0x50004710

08001298 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60ba      	str	r2, [r7, #8]
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4603      	mov	r3, r0
 80012a4:	81fb      	strh	r3, [r7, #14]
 80012a6:	460b      	mov	r3, r1
 80012a8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fda9 	bl	8000e04 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80012b2:	7b7b      	ldrb	r3, [r7, #13]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f040 808b 	bne.w	80013d0 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80012c0:	f001 ff58 	bl	8003174 <OSCHP_GetFrequency>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 80012c8:	fba3 2302 	umull	r2, r3, r3, r2
 80012cc:	0c9b      	lsrs	r3, r3, #18
 80012ce:	059b      	lsls	r3, r3, #22
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e002      	b.n	80012da <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80012d4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80012d8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	fb02 f203 	mul.w	r2, r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	0d9b      	lsrs	r3, r3, #22
 80012f6:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80012f8:	4a49      	ldr	r2, [pc, #292]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8001304:	bf00      	nop
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f9      	beq.n	8001306 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800131e:	4940      	ldr	r1, [pc, #256]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001320:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8001326:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	3a01      	subs	r2, #1
 800132c:	0212      	lsls	r2, r2, #8
 800132e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	3b01      	subs	r3, #1
 8001334:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001336:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3b01      	subs	r3, #1
 800133c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800134e:	4a34      	ldr	r2, [pc, #208]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001350:	4b33      	ldr	r3, [pc, #204]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 0310 	bic.w	r3, r3, #16
 8001358:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 800135a:	4a31      	ldr	r2, [pc, #196]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001366:	bf00      	nop
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f9      	beq.n	8001368 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8001380:	bf00      	nop
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	4a25      	ldr	r2, [pc, #148]	; (8001428 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	0d9b      	lsrs	r3, r3, #22
 800139a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800139c:	6a3a      	ldr	r2, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d202      	bcs.n	80013aa <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80013a4:	6938      	ldr	r0, [r7, #16]
 80013a6:	f000 f845 	bl	8001434 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	4a1f      	ldr	r2, [pc, #124]	; (800142c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	0d9b      	lsrs	r3, r3, #22
 80013b8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d202      	bcs.n	80013c8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80013c2:	6938      	ldr	r0, [r7, #16]
 80013c4:	f000 f836 	bl	8001434 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80013c8:	6a38      	ldr	r0, [r7, #32]
 80013ca:	f000 f833 	bl	8001434 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80013ce:	e01c      	b.n	800140a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80013d0:	4913      	ldr	r1, [pc, #76]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 80013e2:	bf00      	nop
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f9      	beq.n	80013e4 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80013fc:	bf00      	nop
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f9      	beq.n	80013fe <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800140c:	2205      	movs	r2, #5
 800140e:	60da      	str	r2, [r3, #12]
}
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	431bde83 	.word	0x431bde83
 800141c:	aaaaaaab 	.word	0xaaaaaaab
 8001420:	50004710 	.word	0x50004710
 8001424:	f08080ff 	.word	0xf08080ff
 8001428:	88888889 	.word	0x88888889
 800142c:	b60b60b7 	.word	0xb60b60b7
 8001430:	50004160 	.word	0x50004160

08001434 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800143c:	490b      	ldr	r1, [pc, #44]	; (800146c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8001450:	bf00      	nop
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f9      	beq.n	8001452 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f7ff fb8c 	bl	8000b7c <XMC_SCU_lDelay>
}
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	50004710 	.word	0x50004710

08001470 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	4613      	mov	r3, r2
 800147e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3204      	adds	r2, #4
 8001494:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4619      	mov	r1, r3
 80014a2:	23f8      	movs	r3, #248	; 0xf8
 80014a4:	408b      	lsls	r3, r1
 80014a6:	43db      	mvns	r3, r3
 80014a8:	ea02 0103 	and.w	r1, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1d02      	adds	r2, r0, #4
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3204      	adds	r2, #4
 80014c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	78f9      	ldrb	r1, [r7, #3]
 80014d0:	f001 0103 	and.w	r1, r1, #3
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	408b      	lsls	r3, r1
 80014d8:	ea42 0103 	orr.w	r1, r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1d02      	adds	r2, r0, #4
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	4613      	mov	r3, r2
 800153c:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f9a2 	bl	8001888 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <XMC_I2C_CH_InitEx+0x5c>)
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	88db      	ldrh	r3, [r3, #6]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	4619      	mov	r1, r3
 8001552:	f000 f81d 	bl	8001590 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	4611      	mov	r1, r2
 8001568:	461a      	mov	r2, r3
 800156a:	f000 f83b 	bl	80015e4 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	073f0303 	.word	0x073f0303

08001590 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80015a2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80015a6:	d10e      	bne.n	80015c6 <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80015be:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c4:	e008      	b.n	80015d8 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	0c1b      	lsrs	r3, r3, #16
 80015cc:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d819      	bhi.n	800162e <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	4619      	mov	r1, r3
 8001612:	220a      	movs	r2, #10
 8001614:	f000 f9f6 	bl	8001a04 <XMC_USIC_CH_SetBaudrateEx>
 8001618:	4603      	mov	r3, r0
 800161a:	75fb      	strb	r3, [r7, #23]
 800161c:	e027      	b.n	800166e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	220a      	movs	r2, #10
 8001624:	f000 f97c 	bl	8001920 <XMC_USIC_CH_SetBaudrate>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]
 800162c:	e01f      	b.n	800166e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d819      	bhi.n	800166a <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	4619      	mov	r1, r3
 800164e:	2219      	movs	r2, #25
 8001650:	f000 f9d8 	bl	8001a04 <XMC_USIC_CH_SetBaudrateEx>
 8001654:	4603      	mov	r3, r0
 8001656:	75fb      	strb	r3, [r7, #23]
 8001658:	e009      	b.n	800166e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	2219      	movs	r2, #25
 8001660:	f000 f95e 	bl	8001920 <XMC_USIC_CH_SetBaudrate>
 8001664:	4603      	mov	r3, r0
 8001666:	75fb      	strb	r3, [r7, #23]
 8001668:	e001      	b.n	800166e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 800166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	000186a0 	.word	0x000186a0
 800167c:	00061a80 	.word	0x00061a80

08001680 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001696:	b29b      	uxth	r3, r3
 8001698:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d103      	bne.n	80016a8 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d110      	bne.n	80016d8 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80016b6:	bf00      	nop
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff19 	bl	80014f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b80      	cmp	r3, #128	; 0x80
 80016c2:	d0f9      	beq.n	80016b8 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ca:	f7ff ff21 	bl	8001510 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80016d6:	e003      	b.n	80016e0 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop

080016e8 <XMC_I2C_CH_MasterStop>:
  }
}

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d111      	bne.n	8001722 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80016fe:	bf00      	nop
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fef5 	bl	80014f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001706:	4603      	mov	r3, r0
 8001708:	2b80      	cmp	r3, #128	; 0x80
 800170a:	d0f9      	beq.n	8001700 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	f7ff fefd 	bl	8001510 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800171c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001720:	e004      	b.n	800172c <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001728:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop

08001734 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001746:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d110      	bne.n	8001770 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800174e:	bf00      	nop
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fecd 	bl	80014f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001756:	4603      	mov	r3, r0
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d0f9      	beq.n	8001750 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001762:	f7ff fed5 	bl	8001510 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800176e:	e003      	b.n	8001778 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800178e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d111      	bne.n	80017ba <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001796:	bf00      	nop
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fea9 	bl	80014f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b80      	cmp	r3, #128	; 0x80
 80017a2:	d0f9      	beq.n	8001798 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	f7ff feb1 	bl	8001510 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80017b8:	e004      	b.n	80017c4 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop

080017cc <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d111      	bne.n	8001806 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80017e2:	bf00      	nop
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe83 	bl	80014f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d0f9      	beq.n	80017e4 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	f7ff fe8b 	bl	8001510 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001804:	e004      	b.n	8001810 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f44f 7240 	mov.w	r2, #768	; 0x300
 800180c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop

08001818 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001826:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e003      	b.n	800183e <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800183c:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <XMC_I2C_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <XMC_I2C_CH_DisableEvent+0x38>)
 8001870:	400b      	ands	r3, r1
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	41fc0000 	.word	0x41fc0000

08001888 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <XMC_USIC_CH_Enable+0x74>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d003      	beq.n	80018a0 <XMC_USIC_CH_Enable+0x18>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a19      	ldr	r2, [pc, #100]	; (8001900 <XMC_USIC_CH_Enable+0x78>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d103      	bne.n	80018a8 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <XMC_USIC_CH_Enable+0x7c>)
 80018a2:	f000 f9f1 	bl	8001c88 <XMC_USIC_Enable>
 80018a6:	e016      	b.n	80018d6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <XMC_USIC_CH_Enable+0x80>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <XMC_USIC_CH_Enable+0x30>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <XMC_USIC_CH_Enable+0x84>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d103      	bne.n	80018c0 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80018b8:	4815      	ldr	r0, [pc, #84]	; (8001910 <XMC_USIC_CH_Enable+0x88>)
 80018ba:	f000 f9e5 	bl	8001c88 <XMC_USIC_Enable>
 80018be:	e00a      	b.n	80018d6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <XMC_USIC_CH_Enable+0x8c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d003      	beq.n	80018d0 <XMC_USIC_CH_Enable+0x48>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <XMC_USIC_CH_Enable+0x90>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d102      	bne.n	80018d6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80018d0:	4812      	ldr	r0, [pc, #72]	; (800191c <XMC_USIC_CH_Enable+0x94>)
 80018d2:	f000 f9d9 	bl	8001c88 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80018dc:	bf00      	nop
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f023 020f 	bic.w	r2, r3, #15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40030000 	.word	0x40030000
 8001900:	40030200 	.word	0x40030200
 8001904:	40030008 	.word	0x40030008
 8001908:	48020000 	.word	0x48020000
 800190c:	48020200 	.word	0x48020200
 8001910:	48020008 	.word	0x48020008
 8001914:	48024000 	.word	0x48024000
 8001918:	48024200 	.word	0x48024200
 800191c:	48024008 	.word	0x48024008

08001920 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	; 0x38
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b63      	cmp	r3, #99	; 0x63
 8001930:	d95a      	bls.n	80019e8 <XMC_USIC_CH_SetBaudrate+0xc8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d057      	beq.n	80019e8 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001938:	f7ff fa18 	bl	8000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800193c:	4602      	mov	r2, r0
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001940:	fba3 2302 	umull	r2, r3, r3, r2
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <XMC_USIC_CH_SetBaudrate+0xdc>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800195a:	2301      	movs	r3, #1
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800195e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
 800196a:	e022      	b.n	80019b2 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	0a9b      	lsrs	r3, r3, #10
 8001986:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198e:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d809      	bhi.n	80019ac <XMC_USIC_CH_SetBaudrate+0x8c>
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	429a      	cmp	r2, r3
 800199e:	d205      	bcs.n	80019ac <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80019a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	3b01      	subs	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1d9      	bne.n	800196c <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80019bc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80019ca:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	3a01      	subs	r2, #1
 80019d0:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80019d2:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80019da:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019e6:	e002      	b.n	80019ee <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80019ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3738      	adds	r7, #56	; 0x38
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	51eb851f 	.word	0x51eb851f
 8001a00:	fc0080ef 	.word	0xfc0080ef

08001a04 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001a10:	f7ff f9ac 	bl	8000d6c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001a14:	4603      	mov	r3, r0
 8001a16:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8001a26:	6a3a      	ldr	r2, [r7, #32]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dd5f      	ble.n	8001aee <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001a2e:	6a3a      	ldr	r2, [r7, #32]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8001a38:	e010      	b.n	8001a5c <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	fb03 f302 	mul.w	r3, r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001a52:	6a3a      	ldr	r2, [r7, #32]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d8e9      	bhi.n	8001a3a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	3301      	adds	r3, #1
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1acb      	subs	r3, r1, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bfb8      	it	lt
 8001aac:	425b      	neglt	r3, r3
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	da02      	bge.n	8001ab8 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001ad0:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001ad8:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ae0:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aec:	e002      	b.n	8001af4 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	fc0080ef 	.word	0xfc0080ef

08001b04 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b1a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001b2c:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	0211      	lsls	r1, r2, #8
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001b36:	79fa      	ldrb	r2, [r7, #7]
 8001b38:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001b3a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001b3c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	f8ffc0c0 	.word	0xf8ffc0c0

08001b54 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b6a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001b7c:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	0211      	lsls	r1, r2, #8
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001b86:	79fa      	ldrb	r2, [r7, #7]
 8001b88:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001b8a:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	efffc0c0 	.word	0xefffc0c0

08001ba8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	2107      	movs	r1, #7
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	2107      	movs	r1, #7
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	460b      	mov	r3, r1
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	2107      	movs	r1, #7
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop

08001c88 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <XMC_USIC_Enable+0x6c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10c      	bne.n	8001cb2 <XMC_USIC_Enable+0x2a>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001c98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c9c:	f7ff f826 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001ca0:	bf00      	nop
 8001ca2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ca6:	f7ff f83d 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f8      	bne.n	8001ca2 <XMC_USIC_Enable+0x1a>
 8001cb0:	e01c      	b.n	8001cec <XMC_USIC_Enable+0x64>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <XMC_USIC_Enable+0x70>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10a      	bne.n	8001cd0 <XMC_USIC_Enable+0x48>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <XMC_USIC_Enable+0x74>)
 8001cbc:	f7ff f816 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001cc0:	bf00      	nop
 8001cc2:	480e      	ldr	r0, [pc, #56]	; (8001cfc <XMC_USIC_Enable+0x74>)
 8001cc4:	f7ff f82e 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <XMC_USIC_Enable+0x3a>
 8001cce:	e00d      	b.n	8001cec <XMC_USIC_Enable+0x64>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <XMC_USIC_Enable+0x78>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d109      	bne.n	8001cec <XMC_USIC_Enable+0x64>
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <XMC_USIC_Enable+0x7c>)
 8001cda:	f7ff f807 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001cde:	bf00      	nop
 8001ce0:	4808      	ldr	r0, [pc, #32]	; (8001d04 <XMC_USIC_Enable+0x7c>)
 8001ce2:	f7ff f81f 	bl	8000d24 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <XMC_USIC_Enable+0x58>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40030008 	.word	0x40030008
 8001cf8:	48020008 	.word	0x48020008
 8001cfc:	10000080 	.word	0x10000080
 8001d00:	48024008 	.word	0x48024008
 8001d04:	10000100 	.word	0x10000100

08001d08 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001d12:	783b      	ldrb	r3, [r7, #0]
 8001d14:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001d46:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7fe ff93 	bl	8000cec <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001dd2:	f7ff fff3 	bl	8001dbc <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop

08001e1c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f240 731f 	movw	r3, #1823	; 0x71f
 8001e38:	4013      	ands	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	3128      	adds	r1, #40	; 0x28
 8001e40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e44:	e007      	b.n	8001e56 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	3128      	adds	r1, #40	; 0x28
 8001e52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	071f0000 	.word	0x071f0000

08001e64 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e017      	b.n	8001eb2 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001e9a:	e000      	b.n	8001e9e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8001e9c:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f7      	bne.n	8001e9c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d9e4      	bls.n	8001e82 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	080083b0 	.word	0x080083b0

08001ec8 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d903      	bls.n	8001ee2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	3b04      	subs	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e001      	b.n	8001ee6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eec:	f023 020f 	bic.w	r2, r3, #15
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2300      	movs	r3, #0
 8001f24:	f000 f828 	bl	8001f78 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2300      	movs	r3, #0
 8001f32:	f000 f821 	bl	8001f78 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f000 f81a 	bl	8001f78 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f000 f813 	bl	8001f78 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	f7ff fecc 	bl	8001d08 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop

08001f78 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08d      	sub	sp, #52	; 0x34
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d113      	bne.n	8001fb6 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001f8e:	2308      	movs	r3, #8
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001f92:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001f9c:	231f      	movs	r3, #31
 8001f9e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001fa0:	7a3b      	ldrb	r3, [r7, #8]
 8001fa2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001faa:	7a7b      	ldrb	r3, [r7, #9]
 8001fac:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	76fb      	strb	r3, [r7, #27]
 8001fb4:	e013      	b.n	8001fde <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001fb6:	2318      	movs	r3, #24
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001fba:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001fc4:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001fc8:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001fca:	7abb      	ldrb	r3, [r7, #10]
 8001fcc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	3228      	adds	r2, #40	; 0x28
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	43db      	mvns	r3, r3
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001ff4:	7efa      	ldrb	r2, [r7, #27]
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	43db      	mvns	r3, r3
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	3228      	adds	r2, #40	; 0x28
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002026:	3734      	adds	r7, #52	; 0x34
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002042:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
 8002076:	e009      	b.n	800208c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	4a39      	ldr	r2, [pc, #228]	; (8002160 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fe89 	bl	8001d98 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	3301      	adds	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d9f2      	bls.n	8002078 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 80020a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a8:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	e021      	b.n	80020f4 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020bc:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	3301      	adds	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d9da      	bls.n	80020b0 <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d107      	bne.n	8002138 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800212e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]
 800213c:	e009      	b.n	8002152 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fe14 	bl	8001d74 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	3301      	adds	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d9f2      	bls.n	800213e <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	080083b0 	.word	0x080083b0

08002164 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7a1b      	ldrb	r3, [r3, #8]
 8002174:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2201      	movs	r2, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7a5b      	ldrb	r3, [r3, #9]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db29      	blt.n	8002202 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10a      	bne.n	80021ce <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80021b8:	2308      	movs	r3, #8
 80021ba:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80021cc:	e00c      	b.n	80021e8 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021de:	f023 021f 	bic.w	r2, r3, #31
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7a52      	ldrb	r2, [r2, #9]
 80021f2:	b251      	sxtb	r1, r2
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	431a      	orrs	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	3280      	adds	r2, #128	; 0x80
 800221e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <_sbrk+0x5c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <_sbrk+0x5c>)
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <_sbrk+0x60>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <_sbrk+0x5c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3303      	adds	r3, #3
 800224c:	f023 0303 	bic.w	r3, r3, #3
 8002250:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <_sbrk+0x5c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <_sbrk+0x64>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_sbrk+0x5c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <_sbrk+0x5c>)
 800226a:	6013      	str	r3, [r2, #0]
    return (base);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	e006      	b.n	800227e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002270:	f001 fff8 	bl	8004264 <__errno>
 8002274:	4602      	mov	r2, r0
 8002276:	230c      	movs	r3, #12
 8002278:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000370 	.word	0x20000370
 800228c:	200003a0 	.word	0x200003a0
 8002290:	2000ffc0 	.word	0x2000ffc0

08002294 <_init>:

/* Init */
void _init(void)
{}
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0c      	blt.n	80022cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	4909      	ldr	r1, [pc, #36]	; (80022d8 <__NVIC_ClearPendingIRQ+0x38>)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	3360      	adds	r3, #96	; 0x60
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002312:	b2db      	uxtb	r3, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800237a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf14      	ite	ne
 80023aa:	2301      	movne	r3, #1
 80023ac:	2300      	moveq	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop

080023e4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL));
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	f7ff fba3 	bl	8001ba8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff79 	bl	800236c <XMC_USIC_CH_TXFIFO_IsFull>
 800247a:	4603      	mov	r3, r0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ffa7 	bl	80023e4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f9b3 	bl	8001818 <XMC_I2C_CH_GetReceivedData>
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7ff f92f 	bl	8001734 <XMC_I2C_CH_MasterTransmit>
}
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL));
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	f7ff f9ad 	bl	800184c <XMC_I2C_CH_DisableEvent>
}
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff f93b 	bl	8001780 <XMC_I2C_CH_MasterReceiveAck>
}
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f955 	bl	80017cc <XMC_I2C_CH_MasterReceiveNack>
}
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	2110      	movs	r1, #16
 8002538:	f7ff ff74 	bl	8002424 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f8d1 	bl	80016e8 <XMC_I2C_CH_MasterStop>
}
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d202      	bcs.n	8002564 <calculate_minfifosize+0x18>
  {
    result = a;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e001      	b.n	8002568 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e001      	b.n	8002598 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop

080025a4 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff2a 	bl	800240c <XMC_I2C_CH_GetStatusFlag>
 80025b8:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4013      	ands	r3, r2
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	f7ff ff23 	bl	8002424 <XMC_I2C_CH_ClearStatusFlag>
}
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80025fc:	f7ff ffd2 	bl	80025a4 <I2C_MASTER_GetFlagStatus>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d011      	beq.n	800262a <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002610:	f7ff fe98 	bl	8002344 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261e:	f7ff fe5d 	bl	80022dc <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa96 	bl	8002b54 <I2C_MASTER_ProtocolHandler>
 8002628:	e105      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 8082 	bne.w	8002738 <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05a      	beq.n	80026f6 <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	d22e      	bcs.n	80026aa <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002652:	f7ff ff43 	bl	80024dc <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002660:	f7ff fe5e 	bl	8002320 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002664:	e017      	b.n	8002696 <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d20f      	bcs.n	8002692 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	f7ff ff1b 	bl	80024bc <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	e001      	b.n	8002696 <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8002692:	bf00      	nop
 8002694:	e0cf      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fee6 	bl	8002468 <I2C_MASTER_IsTXFIFOFull>
 800269c:	4603      	mov	r3, r0
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1de      	bne.n	8002666 <I2C_MASTER_TransmitHandler+0x82>
 80026a8:	e0c5      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026b4:	f7ff fe46 	bl	8002344 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fdec 	bl	80022a0 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 80026c8:	bf00      	nop
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fe60 	bl	8002394 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f4      	bne.n	80026ca <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a4 	beq.w	8002836 <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8a4 	bl	800283c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 80026f4:	e09f      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d20f      	bcs.n	8002722 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4619      	mov	r1, r3
 8002712:	f7ff fed3 	bl	80024bc <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e089      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8083 	beq.w	8002836 <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f883 	bl	800283c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8002736:	e07e      	b.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002740:	2b00      	cmp	r3, #0
 8002742:	d054      	beq.n	80027ee <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002758:	461a      	mov	r2, r3
 800275a:	2301      	movs	r3, #1
 800275c:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002768:	4619      	mov	r1, r3
 800276a:	2301      	movs	r3, #1
 800276c:	408b      	lsls	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7ff feeb 	bl	800254c <calculate_minfifosize>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e001      	b.n	8002780 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 800277c:	2302      	movs	r3, #2
 800277e:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800278a:	f7ff fddb 	bl	8002344 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800278e:	e023      	b.n	80027d8 <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d21c      	bcs.n	80027d6 <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d107      	bne.n	80027ba <I2C_MASTER_TransmitHandler+0x1d6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d103      	bne.n	80027ba <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff feac 	bl	8002510 <I2C_MASTER_ReceiveNACK>
 80027b8:	e002      	b.n	80027c0 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fe9c 	bl	80024f8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d301      	bcc.n	80027d8 <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 80027d4:	e00a      	b.n	80027ec <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 80027d6:	e009      	b.n	80027ec <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fe45 	bl	8002468 <I2C_MASTER_IsTXFIFOFull>
 80027de:	4603      	mov	r3, r0
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1d2      	bne.n	8002790 <I2C_MASTER_TransmitHandler+0x1ac>
 80027ea:	e017      	b.n	800281c <I2C_MASTER_TransmitHandler+0x238>
 80027ec:	e016      	b.n	800281c <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <I2C_MASTER_TransmitHandler+0x228>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d103      	bne.n	800280c <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fe83 	bl	8002510 <I2C_MASTER_ReceiveNACK>
 800280a:	e002      	b.n	8002812 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fe73 	bl	80024f8 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d104      	bne.n	8002836 <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002832:	f7ff fe53 	bl	80024dc <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002850:	f7ff fe44 	bl	80024dc <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe5f 	bl	8002528 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800286a:	bf00      	nop
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fd45 	bl	8002300 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002876:	4603      	mov	r3, r0
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d0f7      	beq.n	800286c <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4798      	blx	r3
  }
}
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8111 	beq.w	8002ade <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80c7 	beq.w	8002a58 <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 80028ca:	e020      	b.n	800290e <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	18d4      	adds	r4, r2, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fde2 	bl	80024a0 <I2C_MASTER_GetReceivedByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d10b      	bne.n	800290e <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002908:	f7ff fd58 	bl	80023bc <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 800290c:	e008      	b.n	8002920 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fdb8 	bl	8002484 <I2C_MASTER_IsRXFIFOEmpty>
 8002914:	4603      	mov	r3, r0
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1d5      	bne.n	80028cc <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	429a      	cmp	r2, r3
 800292a:	d277      	bcs.n	8002a1c <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	f000 f94f 	bl	8002bdc <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002952:	461a      	mov	r2, r3
 8002954:	2301      	movs	r3, #1
 8002956:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8002962:	4619      	mov	r1, r3
 8002964:	2301      	movs	r3, #1
 8002966:	408b      	lsls	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7ff fdee 	bl	800254c <calculate_minfifosize>
 8002970:	4603      	mov	r3, r0
 8002972:	73bb      	strb	r3, [r7, #14]
 8002974:	e001      	b.n	800297a <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8002976:	2302      	movs	r3, #2
 8002978:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002982:	2b00      	cmp	r3, #0
 8002984:	d033      	beq.n	80029ee <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8002986:	e027      	b.n	80029d8 <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d220      	bcs.n	80029d6 <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <I2C_MASTER_ReceiveHandler+0x116>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d103      	bne.n	80029b2 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fdb0 	bl	8002510 <I2C_MASTER_ReceiveNACK>
 80029b0:	e002      	b.n	80029b8 <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fda0 	bl	80024f8 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d303      	bcc.n	80029d8 <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
                break;
 80029d4:	e00a      	b.n	80029ec <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 80029d6:	e009      	b.n	80029ec <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd45 	bl	8002468 <I2C_MASTER_IsTXFIFOFull>
 80029de:	4603      	mov	r3, r0
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ce      	bne.n	8002988 <I2C_MASTER_ReceiveHandler+0xec>
 80029ea:	e017      	b.n	8002a1c <I2C_MASTER_ReceiveHandler+0x180>
 80029ec:	e016      	b.n	8002a1c <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d107      	bne.n	8002a0c <I2C_MASTER_ReceiveHandler+0x170>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d103      	bne.n	8002a0c <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fd83 	bl	8002510 <I2C_MASTER_ReceiveNACK>
 8002a0a:	e002      	b.n	8002a12 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fd73 	bl	80024f8 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d15a      	bne.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002a32:	f7ff fcc3 	bl	80023bc <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002a40:	f7ff fc4c 	bl	80022dc <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f847 	bl	8002ae4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8002a56:	e042      	b.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	18d4      	adds	r4, r2, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fd1c 	bl	80024a0 <I2C_MASTER_GetReceivedByte>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d21d      	bcs.n	8002abe <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d227      	bcs.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <I2C_MASTER_ReceiveHandler+0x210>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d103      	bne.n	8002aac <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fd33 	bl	8002510 <I2C_MASTER_ReceiveNACK>
 8002aaa:	e002      	b.n	8002ab2 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff fd23 	bl	80024f8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	e00f      	b.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002ac8:	f7ff fc08 	bl	80022dc <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f803 	bl	8002ae4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}

08002ae4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10f      	bne.n	8002b1a <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002afa:	bf00      	nop
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fbfd 	bl	8002300 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d0f7      	beq.n	8002afc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fd07 	bl	8002528 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8002b1a:	bf00      	nop
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fbed 	bl	8002300 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d0f7      	beq.n	8002b1c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4798      	blx	r3
  }
}
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc53 	bl	800240c <XMC_I2C_CH_GetStatusFlag>
 8002b66:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <I2C_MASTER_ProtocolHandler+0x38>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	2120      	movs	r1, #32
 8002b80:	f7ff fd22 	bl	80025c8 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <I2C_MASTER_ProtocolHandler+0x5c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	f7ff fd10 	bl	80025c8 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <I2C_MASTER_ProtocolHandler+0x82>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bca:	f7ff fcfd 	bl	80025c8 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4798      	blx	r3
  }
}
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4093      	lsls	r3, r2
 8002bf4:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	75fb      	strb	r3, [r7, #23]
 8002c12:	e001      	b.n	8002c18 <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8002c18:	7dfa      	ldrb	r2, [r7, #23]
 8002c1a:	7dbb      	ldrb	r3, [r7, #22]
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7ff fc94 	bl	800254c <calculate_minfifosize>
 8002c24:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 8002c26:	6838      	ldr	r0, [r7, #0]
 8002c28:	6939      	ldr	r1, [r7, #16]
 8002c2a:	f7ff fc8f 	bl	800254c <calculate_minfifosize>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	f7ff fbfd 	bl	8002444 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c5c:	0a1b      	lsrs	r3, r3, #8
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_EnableIRQ+0x34>)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	79fa      	ldrb	r2, [r7, #7]
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	490d      	ldr	r1, [pc, #52]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
  }
}
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	bf28      	it	cs
 8002d16:	2306      	movcs	r3, #6
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3306      	adds	r3, #6
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	401a      	ands	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	1e59      	subs	r1, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002d4c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop

08002d5c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002d6c:	78f8      	ldrb	r0, [r7, #3]
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	3306      	adds	r3, #6
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002d7e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002d80:	431a      	orrs	r2, r3
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	1d83      	adds	r3, r0, #6
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop

08002d98 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f023 020f 	bic.w	r2, r3, #15
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f7fe fb8a 	bl	8001530 <XMC_I2C_CH_InitEx>
}
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop

08002e24 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	2104      	movs	r1, #4
 8002e30:	f7ff ffd6 	bl	8002de0 <XMC_USIC_CH_SetMode>
}
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop

08002e3c <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <I2C_MASTER_0_disable_io+0x1c>)
 8002e42:	2105      	movs	r1, #5
 8002e44:	2200      	movs	r2, #0
 8002e46:	f7fe fb13 	bl	8001470 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, XMC_GPIO_MODE_INPUT_TRISTATE);
 8002e4a:	4803      	ldr	r0, [pc, #12]	; (8002e58 <I2C_MASTER_0_disable_io+0x1c>)
 8002e4c:	210b      	movs	r1, #11
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f7fe fb0e 	bl	8001470 <XMC_GPIO_SetMode>
}
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	48028000 	.word	0x48028000

08002e5c <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8002e60:	23d0      	movs	r3, #208	; 0xd0
 8002e62:	4806      	ldr	r0, [pc, #24]	; (8002e7c <I2C_MASTER_0_enable_io+0x20>)
 8002e64:	2105      	movs	r1, #5
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7fe fb02 	bl	8001470 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, I2C_MASTER_0_scl_pin_config.mode);
 8002e6c:	23d0      	movs	r3, #208	; 0xd0
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <I2C_MASTER_0_enable_io+0x20>)
 8002e70:	210b      	movs	r1, #11
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7fe fafc 	bl	8001470 <XMC_GPIO_SetMode>
}
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	48028000 	.word	0x48028000

08002e80 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8002e8a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002e8e:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C1_CH0, &I2C_MASTER_0_channel_config);
 8002e90:	4832      	ldr	r0, [pc, #200]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002e92:	4933      	ldr	r1, [pc, #204]	; (8002f60 <I2C_MASTER_0_init+0xe0>)
 8002e94:	f7ff ffb8 	bl	8002e08 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 8002e98:	4830      	ldr	r0, [pc, #192]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f7ff ff5d 	bl	8002d5c <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 8002ea2:	482e      	ldr	r0, [pc, #184]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f7ff ff58 	bl	8002d5c <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH0,
 8002eac:	482b      	ldr	r0, [pc, #172]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002eae:	2110      	movs	r1, #16
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f7fe fe26 	bl	8001b04 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002eb8:	4828      	ldr	r0, [pc, #160]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002eba:	2110      	movs	r1, #16
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f7fe fea7 	bl	8001c10 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH0, tx_fifo_events);
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	f7ff ff67 	bl	8002d98 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH0,
 8002eca:	4824      	ldr	r0, [pc, #144]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2204      	movs	r2, #4
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	f7fe fe3f 	bl	8001b54 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002ed6:	4821      	ldr	r0, [pc, #132]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ed8:	2110      	movs	r1, #16
 8002eda:	2200      	movs	r2, #0
 8002edc:	f7fe feb6 	bl	8001c4c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002ee0:	481e      	ldr	r0, [pc, #120]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ee2:	2113      	movs	r1, #19
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f7fe feb1 	bl	8001c4c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH0, rx_fifo_events);
 8002eea:	481c      	ldr	r0, [pc, #112]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	f7ff ff65 	bl	8002dbc <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH0,
 8002ef2:	481a      	ldr	r0, [pc, #104]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f7fe fe6e 	bl	8001bd8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)2));
  XMC_I2C_CH_Start(XMC_I2C1_CH0);
 8002efc:	4817      	ldr	r0, [pc, #92]	; (8002f5c <I2C_MASTER_0_init+0xdc>)
 8002efe:	f7ff ff91 	bl	8002e24 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 8002f02:	4818      	ldr	r0, [pc, #96]	; (8002f64 <I2C_MASTER_0_init+0xe4>)
 8002f04:	2105      	movs	r1, #5
 8002f06:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <I2C_MASTER_0_init+0xe8>)
 8002f08:	f7fd fd7a 	bl	8000a00 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &I2C_MASTER_0_scl_pin_config);
 8002f0c:	4815      	ldr	r0, [pc, #84]	; (8002f64 <I2C_MASTER_0_init+0xe4>)
 8002f0e:	210b      	movs	r1, #11
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <I2C_MASTER_0_init+0xec>)
 8002f12:	f7fd fd75 	bl	8000a00 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 8002f16:	f7ff fe9b 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	213f      	movs	r1, #63	; 0x3f
 8002f20:	2200      	movs	r2, #0
 8002f22:	f7ff fee9 	bl	8002cf8 <NVIC_EncodePriority>
 8002f26:	4603      	mov	r3, r0
 8002f28:	205b      	movs	r0, #91	; 0x5b
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7ff feba 	bl	8002ca4 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)91);/* Rx interrupt priority settings */
 8002f30:	205b      	movs	r0, #91	; 0x5b
 8002f32:	f7ff fe9b 	bl	8002c6c <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 8002f36:	f7ff fe8b 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	213f      	movs	r1, #63	; 0x3f
 8002f40:	2200      	movs	r2, #0
 8002f42:	f7ff fed9 	bl	8002cf8 <NVIC_EncodePriority>
 8002f46:	4603      	mov	r3, r0
 8002f48:	205a      	movs	r0, #90	; 0x5a
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7ff feaa 	bl	8002ca4 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)90);}
 8002f50:	205a      	movs	r0, #90	; 0x5a
 8002f52:	f7ff fe8b 	bl	8002c6c <__NVIC_EnableIRQ>
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	48020000 	.word	0x48020000
 8002f60:	080083d8 	.word	0x080083d8
 8002f64:	48028000 	.word	0x48028000
 8002f68:	080083c0 	.word	0x080083c0
 8002f6c:	080083cc 	.word	0x080083cc

08002f70 <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <USIC1_1_IRQHandler+0xc>)
 8002f76:	f7ff fb35 	bl	80025e4 <I2C_MASTER_TransmitHandler>
}
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000034 	.word	0x20000034

08002f80 <USIC1_0_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 8002f84:	4801      	ldr	r0, [pc, #4]	; (8002f8c <USIC1_0_IRQHandler+0xc>)
 8002f86:	f7ff fc89 	bl	800289c <I2C_MASTER_ReceiveHandler>
}
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000034 	.word	0x20000034

08002f90 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	408b      	lsls	r3, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e1b      	ldrb	r3, [r3, #24]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d149      	bne.n	8003060 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fe fef6 	bl	8001dc8 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e02f      	b.n	8003042 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fea:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fe ff89 	bl	8001f10 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	2103      	movs	r1, #3
 800300c:	f7ff f810 	bl	8002030 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	7a1b      	ldrb	r3, [r3, #8]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	f7ff ffb0 	bl	8002f90 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	2200      	movs	r2, #0
 800303a:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d9cc      	bls.n	8002fe2 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7e5b      	ldrb	r3, [r3, #25]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe ff05 	bl	8001e64 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7ff ffd6 	bl	800306c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80030c2:	4b21      	ldr	r3, [pc, #132]	; (8003148 <SystemCoreSetup+0x94>)
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <SystemCoreSetup+0x98>)
 80030c6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030c8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80030cc:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <SystemCoreSetup+0x94>)
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <SystemCoreSetup+0x94>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <SystemCoreSetup+0x9c>)
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	3314      	adds	r3, #20
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f023 030f 	bic.w	r3, r3, #15
 80030f0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f043 0303 	orr.w	r3, r3, #3
 80030f8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <SystemCoreSetup+0x9c>)
 80030fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003100:	3314      	adds	r3, #20
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <SystemCoreSetup+0x94>)
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <SystemCoreSetup+0x94>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f023 0310 	bic.w	r3, r3, #16
 8003110:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003112:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <SystemCoreSetup+0x94>)
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <SystemCoreSetup+0x94>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f023 0308 	bic.w	r3, r3, #8
 800311c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <SystemCoreSetup+0x94>)
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <SystemCoreSetup+0x94>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003128:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <SystemCoreSetup+0x94>)
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <SystemCoreSetup+0x94>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003134:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <SystemCoreSetup+0x94>)
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <SystemCoreSetup+0x94>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003140:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e000ed00 	.word	0xe000ed00
 800314c:	08000000 	.word	0x08000000
 8003150:	58001000 	.word	0x58001000

08003154 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]

  return (status);
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <OSCHP_GetFrequency+0x10>)
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	00b71b00 	.word	0x00b71b00

08003188 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <SystemCoreClockSetup+0x54>)
 8003190:	1d3c      	adds	r4, r7, #4
 8003192:	461d      	mov	r5, r3
 8003194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fd28 	bl	8000bf4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fe4d 	bl	8000e44 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fd fe02 	bl	8000db4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80031b0:	2004      	movs	r0, #4
 80031b2:	f7fd fed3 	bl	8000f5c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80031b6:	f7fd ff0d 	bl	8000fd4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80031ba:	2001      	movs	r0, #1
 80031bc:	2120      	movs	r1, #32
 80031be:	f7fd ff19 	bl	8000ff4 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fd fe0a 	bl	8000ddc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fd feef 	bl	8000fac <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7fd fed8 	bl	8000f84 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
 80031da:	bf00      	nop
 80031dc:	08008474 	.word	0x08008474

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ec:	0a1b      	lsrs	r3, r3, #8
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	4908      	ldr	r1, [pc, #32]	; (8003230 <__NVIC_EnableIRQ+0x34>)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	79fa      	ldrb	r2, [r7, #7]
 8003218:	f002 021f 	and.w	r2, r2, #31
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100

08003234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db0a      	blt.n	800325e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003248:	490d      	ldr	r1, [pc, #52]	; (8003280 <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	440b      	add	r3, r1
 8003258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800325c:	e00a      	b.n	8003274 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325e:	4909      	ldr	r1, [pc, #36]	; (8003284 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	440b      	add	r3, r1
 8003272:	761a      	strb	r2, [r3, #24]
  }
}
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f1c3 0307 	rsb	r3, r3, #7
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	bf28      	it	cs
 80032a6:	2306      	movcs	r3, #6
 80032a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3306      	adds	r3, #6
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d902      	bls.n	80032b8 <NVIC_EncodePriority+0x30>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	e000      	b.n	80032ba <NVIC_EncodePriority+0x32>
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2201      	movs	r2, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	401a      	ands	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	1e59      	subs	r1, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80032dc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	3260      	adds	r2, #96	; 0x60
 8003322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	ea42 0103 	orr.w	r1, r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	3260      	adds	r2, #96	; 0x60
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	32a0      	adds	r2, #160	; 0xa0
 800335e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	32c0      	adds	r2, #192	; 0xc0
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	b29b      	uxth	r3, r3
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
 800339c:	2b02      	cmp	r3, #2
 800339e:	f040 8099 	bne.w	80034d4 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fe08 	bl	8002fbc <GLOBAL_ADC_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4610      	mov	r0, r2
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	f7fe fd2b 	bl	8001e1c <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fe fe48 	bl	8002068 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e02e      	b.n	800343c <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	7b5b      	ldrb	r3, [r3, #13]
 80033f2:	4619      	mov	r1, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4610      	mov	r0, r2
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7fe feb2 	bl	8002164 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4619      	mov	r1, r3
                                indexed->res_handle);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003416:	4610      	mov	r0, r2
 8003418:	461a      	mov	r2, r3
 800341a:	f7ff ff95 	bl	8003348 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8003428:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800342e:	4610      	mov	r0, r2
 8003430:	461a      	mov	r2, r3
 8003432:	f7ff ff6d 	bl	8003310 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	3301      	adds	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0cd      	beq.n	80033de <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	7a1b      	ldrb	r3, [r3, #8]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02c      	beq.n	80034ac <ADC_MEASUREMENT_Init+0x11c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d028      	beq.n	80034ac <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	b2dc      	uxtb	r4, r3
 8003462:	f7ff febd 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 8003466:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800346c:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	f7ff ff05 	bl	8003288 <NVIC_EncodePriority>
 800347e:	4602      	mov	r2, r0
 8003480:	b263      	sxtb	r3, r4
 8003482:	4618      	mov	r0, r3
 8003484:	4611      	mov	r1, r2
 8003486:	f7ff fed5 	bl	8003234 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7e5b      	ldrb	r3, [r3, #25]
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fe fd16 	bl	8001ec8 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fea8 	bl	80031fc <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7e9b      	ldrb	r3, [r3, #26]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff0f 	bl	80032ec <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7bba      	ldrb	r2, [r7, #14]
 80034d2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}

080034e0 <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fefc 	bl	80032ec <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <ADC_MEASUREMENT_GetResult>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	789b      	ldrb	r3, [r3, #2]
 800350e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7ff ff28 	bl	800336c <XMC_VADC_GROUP_GetResult>
 800351c:	4603      	mov	r3, r0
 800351e:	81fb      	strh	r3, [r7, #14]

  return (result);
 8003520:	89fb      	ldrh	r3, [r7, #14]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop

0800352c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003532:	2300      	movs	r3, #0
 8003534:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003536:	480d      	ldr	r0, [pc, #52]	; (800356c <DAVE_Init+0x40>)
 8003538:	f7ff fe0c 	bl	8003154 <CLOCK_XMC4_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <DAVE_Init+0x44>)
 8003548:	f7ff ff22 	bl	8003390 <ADC_MEASUREMENT_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <DAVE_Init+0x34>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8003556:	4807      	ldr	r0, [pc, #28]	; (8003574 <DAVE_Init+0x48>)
 8003558:	f7ff f80e 	bl	8002578 <I2C_MASTER_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8003560:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000374 	.word	0x20000374
 8003570:	200000ac 	.word	0x200000ac
 8003574:	20000034 	.word	0x20000034

08003578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	490d      	ldr	r1, [pc, #52]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	4909      	ldr	r1, [pc, #36]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3b04      	subs	r3, #4
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
  }
}
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	f04f 30ff 	mov.w	r0, #4294967295
 80035ee:	213f      	movs	r1, #63	; 0x3f
 80035f0:	f7ff ffc2 	bl	8003578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <VADC0_C0_2_IRQHandler>:
#include <string.h>

//ADC MEASUREMENT
uint16_t result;
uint16_t Adc_Measurement_Handler()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	//Get result from ADC-Converter
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);			//results for 12bit: 0...4096 => 0...3.3V
 8003614:	4806      	ldr	r0, [pc, #24]	; (8003630 <VADC0_C0_2_IRQHandler+0x20>)
 8003616:	f7ff ff71 	bl	80034fc <ADC_MEASUREMENT_GetResult>
 800361a:	4603      	mov	r3, r0
 800361c:	461a      	mov	r2, r3
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <VADC0_C0_2_IRQHandler+0x24>)
 8003620:	801a      	strh	r2, [r3, #0]
	ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <VADC0_C0_2_IRQHandler+0x28>)
 8003624:	f7ff ff5c 	bl	80034e0 <ADC_MEASUREMENT_StartConversion>

	return result;
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <VADC0_C0_2_IRQHandler+0x24>)
 800362a:	881b      	ldrh	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000098 	.word	0x20000098
 8003634:	20000398 	.word	0x20000398
 8003638:	200000ac 	.word	0x200000ac

0800363c <SysTick_Handler>:

//DISPLAY
uint32_t SysTickCnt = 0;
void SysTick_Handler() {
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	SysTickCnt++;
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SysTick_Handler+0x18>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	4a03      	ldr	r2, [pc, #12]	; (8003654 <SysTick_Handler+0x18>)
 8003648:	6013      	str	r3, [r2, #0]
}
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000037c 	.word	0x2000037c

08003658 <delay_ms>:

void delay_ms(uint32_t ms) {
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	uint32_t now = SysTickCnt;
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <delay_ms+0x2c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
	while((now + ms) > SysTickCnt) __NOP();
 8003666:	e000      	b.n	800366a <delay_ms+0x12>
 8003668:	bf00      	nop
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	441a      	add	r2, r3
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <delay_ms+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d8f7      	bhi.n	8003668 <delay_ms+0x10>
}
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000037c 	.word	0x2000037c

08003688 <ssd1306_text>:

//WRITE STRING ON DISPLAY
void ssd1306_text(char *data1){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8003690:	2000      	movs	r0, #0
 8003692:	f7fd f803 	bl	800069c <ssd1306_Fill>
	ssd1306_SetCursor(2, 1);
 8003696:	2002      	movs	r0, #2
 8003698:	2101      	movs	r1, #1
 800369a:	f7fd f96b 	bl	8000974 <ssd1306_SetCursor>
	ssd1306_WriteString(data1, Font_6x8, White);
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <ssd1306_text+0x30>)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036a6:	2301      	movs	r3, #1
 80036a8:	f7fd f93a 	bl	8000920 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80036ac:	f7fd f818 	bl	80006e0 <ssd1306_UpdateScreen>
}
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <float2string>:

void float2string(float value, char *variable, char *unit, char *str){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08e      	sub	sp, #56	; 0x38
 80036c0:	af04      	add	r7, sp, #16
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
	//uint16_t to string: from stackoverflow.com/questions/905928/using-floats-with-sprintf-in-embedded-c
	char *tmpSign = (value < 0) ? "-" : "";
 80036ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d501      	bpl.n	80036dc <float2string+0x20>
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <float2string+0xb8>)
 80036da:	e000      	b.n	80036de <float2string+0x22>
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <float2string+0xbc>)
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
	float tmpVal = (value < 0) ? -value : value;
 80036e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d504      	bpl.n	80036f8 <float2string+0x3c>
 80036ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80036f2:	eef1 7a67 	vneg.f32	s15, s15
 80036f6:	e001      	b.n	80036fc <float2string+0x40>
 80036f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036fc:	edc7 7a08 	vstr	s15, [r7, #32]

	int tmpInt1 = tmpVal;                  	// Get the integer
 8003700:	edd7 7a08 	vldr	s15, [r7, #32]
 8003704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003708:	ee17 3a90 	vmov	r3, s15
 800370c:	61fb      	str	r3, [r7, #28]
	float tmpFrac = tmpVal - tmpInt1;      	// Get fraction
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003718:	ed97 7a08 	vldr	s14, [r7, #32]
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	edc7 7a06 	vstr	s15, [r7, #24]
	int tmpInt2 = trunc(tmpFrac * 10);  	// Turn into integer - For changing decimal place: change 10 to 100 or 1000 and in sprintf
 8003724:	edd7 7a06 	vldr	s15, [r7, #24]
 8003728:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800372c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003730:	ee17 0a90 	vmov	r0, s15
 8003734:	f000 fa30 	bl	8003b98 <__aeabi_f2d>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f000 f896 	bl	8003870 <trunc>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f000 fd12 	bl	8004174 <__aeabi_d2iz>
 8003750:	4603      	mov	r3, r0
 8003752:	617b      	str	r3, [r7, #20]

	sprintf(str, "%s %s%d.%01d %s", variable, tmpSign, tmpInt1, tmpInt2, unit);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	9302      	str	r3, [sp, #8]
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	4906      	ldr	r1, [pc, #24]	; (800377c <float2string+0xc0>)
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f001 fc34 	bl	8004fd4 <siprintf>
}
 800376c:	3728      	adds	r7, #40	; 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	080084a4 	.word	0x080084a4
 8003778:	080084a8 	.word	0x080084a8
 800377c:	080084ac 	.word	0x080084ac

08003780 <main>:


int main(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b09c      	sub	sp, #112	; 0x70
 8003784:	af00      	add	r7, sp, #0
	//DAVE
	DAVE_Init();
 8003786:	f7ff fed1 	bl	800352c <DAVE_Init>
	float adc;
	float voltage;
	float power;

	//OPEN COMMUNICATION WITH I2C
	SysTick_Config(SystemCoreClock / 1000);
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <main+0xd0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a31      	ldr	r2, [pc, #196]	; (8003854 <main+0xd4>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff18 	bl	80035cc <SysTick_Config>
	ssd1306_Init(I2C_MASTER_0.channel, &delay_ms);
 800379c:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <main+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	492e      	ldr	r1, [pc, #184]	; (800385c <main+0xdc>)
 80037a4:	f7fc ff04 	bl	80005b0 <ssd1306_Init>

	while(1)
	{
		//GET RESULT FROM ADC
		adc = result * 1.4471; //1.4471 = adjustment factor
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <main+0xe0>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f9e1 	bl	8003b74 <__aeabi_i2d>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	a321      	add	r3, pc, #132	; (adr r3, 8003840 <main+0xc0>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f000 fa3e 	bl	8003c40 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f000 fcfa 	bl	80041c4 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68

		//CALCULATE
		voltage = adc * (3.3/4096.0);
 80037d4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80037d6:	f000 f9df 	bl	8003b98 <__aeabi_f2d>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	a319      	add	r3, pc, #100	; (adr r3, 8003848 <main+0xc8>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f000 fa2a 	bl	8003c40 <__aeabi_dmul>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	f000 fce6 	bl	80041c4 <__aeabi_d2f>
 80037f8:	4603      	mov	r3, r0
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
		power = voltage * 1000;
 80037fc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003800:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003864 <main+0xe4>
 8003804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003808:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		//Smoothing the measurement and compensating permanent 0.3V output from DAC
		if(voltage <= 0.5){
 800380c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8003814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	d802      	bhi.n	8003824 <main+0xa4>
			power = 0;
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	66fb      	str	r3, [r7, #108]	; 0x6c
		}

		//POWER STRING
		char power_str [100];
		float2string(power, "Power:", "W", power_str);
 8003824:	463b      	mov	r3, r7
 8003826:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003828:	490f      	ldr	r1, [pc, #60]	; (8003868 <main+0xe8>)
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <main+0xec>)
 800382c:	f7ff ff46 	bl	80036bc <float2string>

		//DISPLAY THE STRING'S
		ssd1306_text(power_str);
 8003830:	463b      	mov	r3, r7
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff28 	bl	8003688 <ssd1306_text>
	}
 8003838:	e7b6      	b.n	80037a8 <main+0x28>
 800383a:	bf00      	nop
 800383c:	f3af 8000 	nop.w
 8003840:	5460aa65 	.word	0x5460aa65
 8003844:	3ff72752 	.word	0x3ff72752
 8003848:	66666666 	.word	0x66666666
 800384c:	3f4a6666 	.word	0x3f4a6666
 8003850:	2000ffc0 	.word	0x2000ffc0
 8003854:	10624dd3 	.word	0x10624dd3
 8003858:	20000034 	.word	0x20000034
 800385c:	08003659 	.word	0x08003659
 8003860:	20000398 	.word	0x20000398
 8003864:	447a0000 	.word	0x447a0000
 8003868:	080084bc 	.word	0x080084bc
 800386c:	080084c4 	.word	0x080084c4

08003870 <trunc>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003876:	f2a6 34ff 	subw	r4, r6, #1023	; 0x3ff
 800387a:	2c13      	cmp	r4, #19
 800387c:	460b      	mov	r3, r1
 800387e:	460d      	mov	r5, r1
 8003880:	dc0d      	bgt.n	800389e <trunc+0x2e>
 8003882:	2c00      	cmp	r4, #0
 8003884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003888:	db1a      	blt.n	80038c0 <trunc+0x50>
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <trunc+0x5c>)
 800388c:	4123      	asrs	r3, r4
 800388e:	ea25 0503 	bic.w	r5, r5, r3
 8003892:	2200      	movs	r2, #0
 8003894:	ea45 0301 	orr.w	r3, r5, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389e:	2c33      	cmp	r4, #51	; 0x33
 80038a0:	4602      	mov	r2, r0
 80038a2:	dd03      	ble.n	80038ac <trunc+0x3c>
 80038a4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80038a8:	d00d      	beq.n	80038c6 <trunc+0x56>
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	40f1      	lsrs	r1, r6
 80038b6:	ea20 0201 	bic.w	r2, r0, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4629      	mov	r1, r5
 80038be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c0:	2200      	movs	r2, #0
 80038c2:	4610      	mov	r0, r2
 80038c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c6:	f000 f809 	bl	80038dc <__adddf3>
 80038ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038cc:	000fffff 	.word	0x000fffff

080038d0 <__aeabi_drsub>:
 80038d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80038d4:	e002      	b.n	80038dc <__adddf3>
 80038d6:	bf00      	nop

080038d8 <__aeabi_dsub>:
 80038d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080038dc <__adddf3>:
 80038dc:	b530      	push	{r4, r5, lr}
 80038de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80038e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80038e6:	ea94 0f05 	teq	r4, r5
 80038ea:	bf08      	it	eq
 80038ec:	ea90 0f02 	teqeq	r0, r2
 80038f0:	bf1f      	itttt	ne
 80038f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80038f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80038fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80038fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003902:	f000 80e2 	beq.w	8003aca <__adddf3+0x1ee>
 8003906:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800390a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800390e:	bfb8      	it	lt
 8003910:	426d      	neglt	r5, r5
 8003912:	dd0c      	ble.n	800392e <__adddf3+0x52>
 8003914:	442c      	add	r4, r5
 8003916:	ea80 0202 	eor.w	r2, r0, r2
 800391a:	ea81 0303 	eor.w	r3, r1, r3
 800391e:	ea82 0000 	eor.w	r0, r2, r0
 8003922:	ea83 0101 	eor.w	r1, r3, r1
 8003926:	ea80 0202 	eor.w	r2, r0, r2
 800392a:	ea81 0303 	eor.w	r3, r1, r3
 800392e:	2d36      	cmp	r5, #54	; 0x36
 8003930:	bf88      	it	hi
 8003932:	bd30      	pophi	{r4, r5, pc}
 8003934:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800393c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003940:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003944:	d002      	beq.n	800394c <__adddf3+0x70>
 8003946:	4240      	negs	r0, r0
 8003948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800394c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003954:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003958:	d002      	beq.n	8003960 <__adddf3+0x84>
 800395a:	4252      	negs	r2, r2
 800395c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003960:	ea94 0f05 	teq	r4, r5
 8003964:	f000 80a7 	beq.w	8003ab6 <__adddf3+0x1da>
 8003968:	f1a4 0401 	sub.w	r4, r4, #1
 800396c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003970:	db0d      	blt.n	800398e <__adddf3+0xb2>
 8003972:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003976:	fa22 f205 	lsr.w	r2, r2, r5
 800397a:	1880      	adds	r0, r0, r2
 800397c:	f141 0100 	adc.w	r1, r1, #0
 8003980:	fa03 f20e 	lsl.w	r2, r3, lr
 8003984:	1880      	adds	r0, r0, r2
 8003986:	fa43 f305 	asr.w	r3, r3, r5
 800398a:	4159      	adcs	r1, r3
 800398c:	e00e      	b.n	80039ac <__adddf3+0xd0>
 800398e:	f1a5 0520 	sub.w	r5, r5, #32
 8003992:	f10e 0e20 	add.w	lr, lr, #32
 8003996:	2a01      	cmp	r2, #1
 8003998:	fa03 fc0e 	lsl.w	ip, r3, lr
 800399c:	bf28      	it	cs
 800399e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80039a2:	fa43 f305 	asr.w	r3, r3, r5
 80039a6:	18c0      	adds	r0, r0, r3
 80039a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80039ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80039b0:	d507      	bpl.n	80039c2 <__adddf3+0xe6>
 80039b2:	f04f 0e00 	mov.w	lr, #0
 80039b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80039ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80039be:	eb6e 0101 	sbc.w	r1, lr, r1
 80039c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80039c6:	d31b      	bcc.n	8003a00 <__adddf3+0x124>
 80039c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80039cc:	d30c      	bcc.n	80039e8 <__adddf3+0x10c>
 80039ce:	0849      	lsrs	r1, r1, #1
 80039d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80039d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80039d8:	f104 0401 	add.w	r4, r4, #1
 80039dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80039e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80039e4:	f080 809a 	bcs.w	8003b1c <__adddf3+0x240>
 80039e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80039ec:	bf08      	it	eq
 80039ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80039f2:	f150 0000 	adcs.w	r0, r0, #0
 80039f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80039fa:	ea41 0105 	orr.w	r1, r1, r5
 80039fe:	bd30      	pop	{r4, r5, pc}
 8003a00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003a04:	4140      	adcs	r0, r0
 8003a06:	eb41 0101 	adc.w	r1, r1, r1
 8003a0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a0e:	f1a4 0401 	sub.w	r4, r4, #1
 8003a12:	d1e9      	bne.n	80039e8 <__adddf3+0x10c>
 8003a14:	f091 0f00 	teq	r1, #0
 8003a18:	bf04      	itt	eq
 8003a1a:	4601      	moveq	r1, r0
 8003a1c:	2000      	moveq	r0, #0
 8003a1e:	fab1 f381 	clz	r3, r1
 8003a22:	bf08      	it	eq
 8003a24:	3320      	addeq	r3, #32
 8003a26:	f1a3 030b 	sub.w	r3, r3, #11
 8003a2a:	f1b3 0220 	subs.w	r2, r3, #32
 8003a2e:	da0c      	bge.n	8003a4a <__adddf3+0x16e>
 8003a30:	320c      	adds	r2, #12
 8003a32:	dd08      	ble.n	8003a46 <__adddf3+0x16a>
 8003a34:	f102 0c14 	add.w	ip, r2, #20
 8003a38:	f1c2 020c 	rsb	r2, r2, #12
 8003a3c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003a40:	fa21 f102 	lsr.w	r1, r1, r2
 8003a44:	e00c      	b.n	8003a60 <__adddf3+0x184>
 8003a46:	f102 0214 	add.w	r2, r2, #20
 8003a4a:	bfd8      	it	le
 8003a4c:	f1c2 0c20 	rsble	ip, r2, #32
 8003a50:	fa01 f102 	lsl.w	r1, r1, r2
 8003a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003a58:	bfdc      	itt	le
 8003a5a:	ea41 010c 	orrle.w	r1, r1, ip
 8003a5e:	4090      	lslle	r0, r2
 8003a60:	1ae4      	subs	r4, r4, r3
 8003a62:	bfa2      	ittt	ge
 8003a64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003a68:	4329      	orrge	r1, r5
 8003a6a:	bd30      	popge	{r4, r5, pc}
 8003a6c:	ea6f 0404 	mvn.w	r4, r4
 8003a70:	3c1f      	subs	r4, #31
 8003a72:	da1c      	bge.n	8003aae <__adddf3+0x1d2>
 8003a74:	340c      	adds	r4, #12
 8003a76:	dc0e      	bgt.n	8003a96 <__adddf3+0x1ba>
 8003a78:	f104 0414 	add.w	r4, r4, #20
 8003a7c:	f1c4 0220 	rsb	r2, r4, #32
 8003a80:	fa20 f004 	lsr.w	r0, r0, r4
 8003a84:	fa01 f302 	lsl.w	r3, r1, r2
 8003a88:	ea40 0003 	orr.w	r0, r0, r3
 8003a8c:	fa21 f304 	lsr.w	r3, r1, r4
 8003a90:	ea45 0103 	orr.w	r1, r5, r3
 8003a94:	bd30      	pop	{r4, r5, pc}
 8003a96:	f1c4 040c 	rsb	r4, r4, #12
 8003a9a:	f1c4 0220 	rsb	r2, r4, #32
 8003a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8003aa2:	fa01 f304 	lsl.w	r3, r1, r4
 8003aa6:	ea40 0003 	orr.w	r0, r0, r3
 8003aaa:	4629      	mov	r1, r5
 8003aac:	bd30      	pop	{r4, r5, pc}
 8003aae:	fa21 f004 	lsr.w	r0, r1, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	bd30      	pop	{r4, r5, pc}
 8003ab6:	f094 0f00 	teq	r4, #0
 8003aba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003abe:	bf06      	itte	eq
 8003ac0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003ac4:	3401      	addeq	r4, #1
 8003ac6:	3d01      	subne	r5, #1
 8003ac8:	e74e      	b.n	8003968 <__adddf3+0x8c>
 8003aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003ace:	bf18      	it	ne
 8003ad0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003ad4:	d029      	beq.n	8003b2a <__adddf3+0x24e>
 8003ad6:	ea94 0f05 	teq	r4, r5
 8003ada:	bf08      	it	eq
 8003adc:	ea90 0f02 	teqeq	r0, r2
 8003ae0:	d005      	beq.n	8003aee <__adddf3+0x212>
 8003ae2:	ea54 0c00 	orrs.w	ip, r4, r0
 8003ae6:	bf04      	itt	eq
 8003ae8:	4619      	moveq	r1, r3
 8003aea:	4610      	moveq	r0, r2
 8003aec:	bd30      	pop	{r4, r5, pc}
 8003aee:	ea91 0f03 	teq	r1, r3
 8003af2:	bf1e      	ittt	ne
 8003af4:	2100      	movne	r1, #0
 8003af6:	2000      	movne	r0, #0
 8003af8:	bd30      	popne	{r4, r5, pc}
 8003afa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003afe:	d105      	bne.n	8003b0c <__adddf3+0x230>
 8003b00:	0040      	lsls	r0, r0, #1
 8003b02:	4149      	adcs	r1, r1
 8003b04:	bf28      	it	cs
 8003b06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003b0a:	bd30      	pop	{r4, r5, pc}
 8003b0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003b10:	bf3c      	itt	cc
 8003b12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003b16:	bd30      	popcc	{r4, r5, pc}
 8003b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003b20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	bd30      	pop	{r4, r5, pc}
 8003b2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003b2e:	bf1a      	itte	ne
 8003b30:	4619      	movne	r1, r3
 8003b32:	4610      	movne	r0, r2
 8003b34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003b38:	bf1c      	itt	ne
 8003b3a:	460b      	movne	r3, r1
 8003b3c:	4602      	movne	r2, r0
 8003b3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003b42:	bf06      	itte	eq
 8003b44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003b48:	ea91 0f03 	teqeq	r1, r3
 8003b4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003b50:	bd30      	pop	{r4, r5, pc}
 8003b52:	bf00      	nop

08003b54 <__aeabi_ui2d>:
 8003b54:	f090 0f00 	teq	r0, #0
 8003b58:	bf04      	itt	eq
 8003b5a:	2100      	moveq	r1, #0
 8003b5c:	4770      	bxeq	lr
 8003b5e:	b530      	push	{r4, r5, lr}
 8003b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b68:	f04f 0500 	mov.w	r5, #0
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	e750      	b.n	8003a14 <__adddf3+0x138>
 8003b72:	bf00      	nop

08003b74 <__aeabi_i2d>:
 8003b74:	f090 0f00 	teq	r0, #0
 8003b78:	bf04      	itt	eq
 8003b7a:	2100      	moveq	r1, #0
 8003b7c:	4770      	bxeq	lr
 8003b7e:	b530      	push	{r4, r5, lr}
 8003b80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003b8c:	bf48      	it	mi
 8003b8e:	4240      	negmi	r0, r0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	e73e      	b.n	8003a14 <__adddf3+0x138>
 8003b96:	bf00      	nop

08003b98 <__aeabi_f2d>:
 8003b98:	0042      	lsls	r2, r0, #1
 8003b9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003b9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003ba2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003ba6:	bf1f      	itttt	ne
 8003ba8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003bac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003bb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003bb4:	4770      	bxne	lr
 8003bb6:	f092 0f00 	teq	r2, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003bc0:	4770      	bxeq	lr
 8003bc2:	b530      	push	{r4, r5, lr}
 8003bc4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003bd0:	e720      	b.n	8003a14 <__adddf3+0x138>
 8003bd2:	bf00      	nop

08003bd4 <__aeabi_ul2d>:
 8003bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8003bd8:	bf08      	it	eq
 8003bda:	4770      	bxeq	lr
 8003bdc:	b530      	push	{r4, r5, lr}
 8003bde:	f04f 0500 	mov.w	r5, #0
 8003be2:	e00a      	b.n	8003bfa <__aeabi_l2d+0x16>

08003be4 <__aeabi_l2d>:
 8003be4:	ea50 0201 	orrs.w	r2, r0, r1
 8003be8:	bf08      	it	eq
 8003bea:	4770      	bxeq	lr
 8003bec:	b530      	push	{r4, r5, lr}
 8003bee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003bf2:	d502      	bpl.n	8003bfa <__aeabi_l2d+0x16>
 8003bf4:	4240      	negs	r0, r0
 8003bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003bfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003bfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003c02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003c06:	f43f aedc 	beq.w	80039c2 <__adddf3+0xe6>
 8003c0a:	f04f 0203 	mov.w	r2, #3
 8003c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c12:	bf18      	it	ne
 8003c14:	3203      	addne	r2, #3
 8003c16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c1a:	bf18      	it	ne
 8003c1c:	3203      	addne	r2, #3
 8003c1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003c22:	f1c2 0320 	rsb	r3, r2, #32
 8003c26:	fa00 fc03 	lsl.w	ip, r0, r3
 8003c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8003c2e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003c32:	ea40 000e 	orr.w	r0, r0, lr
 8003c36:	fa21 f102 	lsr.w	r1, r1, r2
 8003c3a:	4414      	add	r4, r2
 8003c3c:	e6c1      	b.n	80039c2 <__adddf3+0xe6>
 8003c3e:	bf00      	nop

08003c40 <__aeabi_dmul>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003c46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003c4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003c4e:	bf1d      	ittte	ne
 8003c50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003c54:	ea94 0f0c 	teqne	r4, ip
 8003c58:	ea95 0f0c 	teqne	r5, ip
 8003c5c:	f000 f8de 	bleq	8003e1c <__aeabi_dmul+0x1dc>
 8003c60:	442c      	add	r4, r5
 8003c62:	ea81 0603 	eor.w	r6, r1, r3
 8003c66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003c6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003c6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003c72:	bf18      	it	ne
 8003c74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c80:	d038      	beq.n	8003cf4 <__aeabi_dmul+0xb4>
 8003c82:	fba0 ce02 	umull	ip, lr, r0, r2
 8003c86:	f04f 0500 	mov.w	r5, #0
 8003c8a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003c8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003c92:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003c96:	f04f 0600 	mov.w	r6, #0
 8003c9a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003c9e:	f09c 0f00 	teq	ip, #0
 8003ca2:	bf18      	it	ne
 8003ca4:	f04e 0e01 	orrne.w	lr, lr, #1
 8003ca8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003cac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003cb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003cb4:	d204      	bcs.n	8003cc0 <__aeabi_dmul+0x80>
 8003cb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003cba:	416d      	adcs	r5, r5
 8003cbc:	eb46 0606 	adc.w	r6, r6, r6
 8003cc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003cc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003cc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003ccc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003cd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003cd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003cd8:	bf88      	it	hi
 8003cda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003cde:	d81e      	bhi.n	8003d1e <__aeabi_dmul+0xde>
 8003ce0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003ce4:	bf08      	it	eq
 8003ce6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003cea:	f150 0000 	adcs.w	r0, r0, #0
 8003cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003cf8:	ea46 0101 	orr.w	r1, r6, r1
 8003cfc:	ea40 0002 	orr.w	r0, r0, r2
 8003d00:	ea81 0103 	eor.w	r1, r1, r3
 8003d04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003d08:	bfc2      	ittt	gt
 8003d0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003d0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003d12:	bd70      	popgt	{r4, r5, r6, pc}
 8003d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003d18:	f04f 0e00 	mov.w	lr, #0
 8003d1c:	3c01      	subs	r4, #1
 8003d1e:	f300 80ab 	bgt.w	8003e78 <__aeabi_dmul+0x238>
 8003d22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003d26:	bfde      	ittt	le
 8003d28:	2000      	movle	r0, #0
 8003d2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003d2e:	bd70      	pople	{r4, r5, r6, pc}
 8003d30:	f1c4 0400 	rsb	r4, r4, #0
 8003d34:	3c20      	subs	r4, #32
 8003d36:	da35      	bge.n	8003da4 <__aeabi_dmul+0x164>
 8003d38:	340c      	adds	r4, #12
 8003d3a:	dc1b      	bgt.n	8003d74 <__aeabi_dmul+0x134>
 8003d3c:	f104 0414 	add.w	r4, r4, #20
 8003d40:	f1c4 0520 	rsb	r5, r4, #32
 8003d44:	fa00 f305 	lsl.w	r3, r0, r5
 8003d48:	fa20 f004 	lsr.w	r0, r0, r4
 8003d4c:	fa01 f205 	lsl.w	r2, r1, r5
 8003d50:	ea40 0002 	orr.w	r0, r0, r2
 8003d54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003d58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003d5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003d60:	fa21 f604 	lsr.w	r6, r1, r4
 8003d64:	eb42 0106 	adc.w	r1, r2, r6
 8003d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d6c:	bf08      	it	eq
 8003d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	f1c4 040c 	rsb	r4, r4, #12
 8003d78:	f1c4 0520 	rsb	r5, r4, #32
 8003d7c:	fa00 f304 	lsl.w	r3, r0, r4
 8003d80:	fa20 f005 	lsr.w	r0, r0, r5
 8003d84:	fa01 f204 	lsl.w	r2, r1, r4
 8003d88:	ea40 0002 	orr.w	r0, r0, r2
 8003d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003d94:	f141 0100 	adc.w	r1, r1, #0
 8003d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d9c:	bf08      	it	eq
 8003d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f1c4 0520 	rsb	r5, r4, #32
 8003da8:	fa00 f205 	lsl.w	r2, r0, r5
 8003dac:	ea4e 0e02 	orr.w	lr, lr, r2
 8003db0:	fa20 f304 	lsr.w	r3, r0, r4
 8003db4:	fa01 f205 	lsl.w	r2, r1, r5
 8003db8:	ea43 0302 	orr.w	r3, r3, r2
 8003dbc:	fa21 f004 	lsr.w	r0, r1, r4
 8003dc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003dc4:	fa21 f204 	lsr.w	r2, r1, r4
 8003dc8:	ea20 0002 	bic.w	r0, r0, r2
 8003dcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003dd4:	bf08      	it	eq
 8003dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f094 0f00 	teq	r4, #0
 8003de0:	d10f      	bne.n	8003e02 <__aeabi_dmul+0x1c2>
 8003de2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003de6:	0040      	lsls	r0, r0, #1
 8003de8:	eb41 0101 	adc.w	r1, r1, r1
 8003dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003df0:	bf08      	it	eq
 8003df2:	3c01      	subeq	r4, #1
 8003df4:	d0f7      	beq.n	8003de6 <__aeabi_dmul+0x1a6>
 8003df6:	ea41 0106 	orr.w	r1, r1, r6
 8003dfa:	f095 0f00 	teq	r5, #0
 8003dfe:	bf18      	it	ne
 8003e00:	4770      	bxne	lr
 8003e02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003e06:	0052      	lsls	r2, r2, #1
 8003e08:	eb43 0303 	adc.w	r3, r3, r3
 8003e0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e10:	bf08      	it	eq
 8003e12:	3d01      	subeq	r5, #1
 8003e14:	d0f7      	beq.n	8003e06 <__aeabi_dmul+0x1c6>
 8003e16:	ea43 0306 	orr.w	r3, r3, r6
 8003e1a:	4770      	bx	lr
 8003e1c:	ea94 0f0c 	teq	r4, ip
 8003e20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003e24:	bf18      	it	ne
 8003e26:	ea95 0f0c 	teqne	r5, ip
 8003e2a:	d00c      	beq.n	8003e46 <__aeabi_dmul+0x206>
 8003e2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003e30:	bf18      	it	ne
 8003e32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003e36:	d1d1      	bne.n	8003ddc <__aeabi_dmul+0x19c>
 8003e38:	ea81 0103 	eor.w	r1, r1, r3
 8003e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e40:	f04f 0000 	mov.w	r0, #0
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003e4a:	bf06      	itte	eq
 8003e4c:	4610      	moveq	r0, r2
 8003e4e:	4619      	moveq	r1, r3
 8003e50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003e54:	d019      	beq.n	8003e8a <__aeabi_dmul+0x24a>
 8003e56:	ea94 0f0c 	teq	r4, ip
 8003e5a:	d102      	bne.n	8003e62 <__aeabi_dmul+0x222>
 8003e5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003e60:	d113      	bne.n	8003e8a <__aeabi_dmul+0x24a>
 8003e62:	ea95 0f0c 	teq	r5, ip
 8003e66:	d105      	bne.n	8003e74 <__aeabi_dmul+0x234>
 8003e68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003e6c:	bf1c      	itt	ne
 8003e6e:	4610      	movne	r0, r2
 8003e70:	4619      	movne	r1, r3
 8003e72:	d10a      	bne.n	8003e8a <__aeabi_dmul+0x24a>
 8003e74:	ea81 0103 	eor.w	r1, r1, r3
 8003e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003e80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
 8003e8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003e8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003e92:	bd70      	pop	{r4, r5, r6, pc}

08003e94 <__aeabi_ddiv>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003e9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003e9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003ea2:	bf1d      	ittte	ne
 8003ea4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003ea8:	ea94 0f0c 	teqne	r4, ip
 8003eac:	ea95 0f0c 	teqne	r5, ip
 8003eb0:	f000 f8a7 	bleq	8004002 <__aeabi_ddiv+0x16e>
 8003eb4:	eba4 0405 	sub.w	r4, r4, r5
 8003eb8:	ea81 0e03 	eor.w	lr, r1, r3
 8003ebc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003ec0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003ec4:	f000 8088 	beq.w	8003fd8 <__aeabi_ddiv+0x144>
 8003ec8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003ecc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003ed0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003ed4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003ed8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003edc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003ee0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003ee4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003ee8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003eec:	429d      	cmp	r5, r3
 8003eee:	bf08      	it	eq
 8003ef0:	4296      	cmpeq	r6, r2
 8003ef2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003ef6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003efa:	d202      	bcs.n	8003f02 <__aeabi_ddiv+0x6e>
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f02:	1ab6      	subs	r6, r6, r2
 8003f04:	eb65 0503 	sbc.w	r5, r5, r3
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003f16:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f1e:	bf22      	ittt	cs
 8003f20:	1ab6      	subcs	r6, r6, r2
 8003f22:	4675      	movcs	r5, lr
 8003f24:	ea40 000c 	orrcs.w	r0, r0, ip
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f36:	bf22      	ittt	cs
 8003f38:	1ab6      	subcs	r6, r6, r2
 8003f3a:	4675      	movcs	r5, lr
 8003f3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f46:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f4e:	bf22      	ittt	cs
 8003f50:	1ab6      	subcs	r6, r6, r2
 8003f52:	4675      	movcs	r5, lr
 8003f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f66:	bf22      	ittt	cs
 8003f68:	1ab6      	subcs	r6, r6, r2
 8003f6a:	4675      	movcs	r5, lr
 8003f6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003f70:	ea55 0e06 	orrs.w	lr, r5, r6
 8003f74:	d018      	beq.n	8003fa8 <__aeabi_ddiv+0x114>
 8003f76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003f7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003f7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003f82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003f86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003f8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003f8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003f92:	d1c0      	bne.n	8003f16 <__aeabi_ddiv+0x82>
 8003f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f98:	d10b      	bne.n	8003fb2 <__aeabi_ddiv+0x11e>
 8003f9a:	ea41 0100 	orr.w	r1, r1, r0
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003fa6:	e7b6      	b.n	8003f16 <__aeabi_ddiv+0x82>
 8003fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003fac:	bf04      	itt	eq
 8003fae:	4301      	orreq	r1, r0
 8003fb0:	2000      	moveq	r0, #0
 8003fb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003fb6:	bf88      	it	hi
 8003fb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003fbc:	f63f aeaf 	bhi.w	8003d1e <__aeabi_dmul+0xde>
 8003fc0:	ebb5 0c03 	subs.w	ip, r5, r3
 8003fc4:	bf04      	itt	eq
 8003fc6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003fca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003fce:	f150 0000 	adcs.w	r0, r0, #0
 8003fd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003fdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003fe0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003fe4:	bfc2      	ittt	gt
 8003fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003fee:	bd70      	popgt	{r4, r5, r6, pc}
 8003ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ff4:	f04f 0e00 	mov.w	lr, #0
 8003ff8:	3c01      	subs	r4, #1
 8003ffa:	e690      	b.n	8003d1e <__aeabi_dmul+0xde>
 8003ffc:	ea45 0e06 	orr.w	lr, r5, r6
 8004000:	e68d      	b.n	8003d1e <__aeabi_dmul+0xde>
 8004002:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004006:	ea94 0f0c 	teq	r4, ip
 800400a:	bf08      	it	eq
 800400c:	ea95 0f0c 	teqeq	r5, ip
 8004010:	f43f af3b 	beq.w	8003e8a <__aeabi_dmul+0x24a>
 8004014:	ea94 0f0c 	teq	r4, ip
 8004018:	d10a      	bne.n	8004030 <__aeabi_ddiv+0x19c>
 800401a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800401e:	f47f af34 	bne.w	8003e8a <__aeabi_dmul+0x24a>
 8004022:	ea95 0f0c 	teq	r5, ip
 8004026:	f47f af25 	bne.w	8003e74 <__aeabi_dmul+0x234>
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	e72c      	b.n	8003e8a <__aeabi_dmul+0x24a>
 8004030:	ea95 0f0c 	teq	r5, ip
 8004034:	d106      	bne.n	8004044 <__aeabi_ddiv+0x1b0>
 8004036:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800403a:	f43f aefd 	beq.w	8003e38 <__aeabi_dmul+0x1f8>
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	e722      	b.n	8003e8a <__aeabi_dmul+0x24a>
 8004044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004048:	bf18      	it	ne
 800404a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800404e:	f47f aec5 	bne.w	8003ddc <__aeabi_dmul+0x19c>
 8004052:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004056:	f47f af0d 	bne.w	8003e74 <__aeabi_dmul+0x234>
 800405a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800405e:	f47f aeeb 	bne.w	8003e38 <__aeabi_dmul+0x1f8>
 8004062:	e712      	b.n	8003e8a <__aeabi_dmul+0x24a>

08004064 <__gedf2>:
 8004064:	f04f 3cff 	mov.w	ip, #4294967295
 8004068:	e006      	b.n	8004078 <__cmpdf2+0x4>
 800406a:	bf00      	nop

0800406c <__ledf2>:
 800406c:	f04f 0c01 	mov.w	ip, #1
 8004070:	e002      	b.n	8004078 <__cmpdf2+0x4>
 8004072:	bf00      	nop

08004074 <__cmpdf2>:
 8004074:	f04f 0c01 	mov.w	ip, #1
 8004078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800407c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004084:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004088:	bf18      	it	ne
 800408a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800408e:	d01b      	beq.n	80040c8 <__cmpdf2+0x54>
 8004090:	b001      	add	sp, #4
 8004092:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004096:	bf0c      	ite	eq
 8004098:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800409c:	ea91 0f03 	teqne	r1, r3
 80040a0:	bf02      	ittt	eq
 80040a2:	ea90 0f02 	teqeq	r0, r2
 80040a6:	2000      	moveq	r0, #0
 80040a8:	4770      	bxeq	lr
 80040aa:	f110 0f00 	cmn.w	r0, #0
 80040ae:	ea91 0f03 	teq	r1, r3
 80040b2:	bf58      	it	pl
 80040b4:	4299      	cmppl	r1, r3
 80040b6:	bf08      	it	eq
 80040b8:	4290      	cmpeq	r0, r2
 80040ba:	bf2c      	ite	cs
 80040bc:	17d8      	asrcs	r0, r3, #31
 80040be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80040c2:	f040 0001 	orr.w	r0, r0, #1
 80040c6:	4770      	bx	lr
 80040c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80040cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040d0:	d102      	bne.n	80040d8 <__cmpdf2+0x64>
 80040d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80040d6:	d107      	bne.n	80040e8 <__cmpdf2+0x74>
 80040d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80040dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040e0:	d1d6      	bne.n	8004090 <__cmpdf2+0x1c>
 80040e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80040e6:	d0d3      	beq.n	8004090 <__cmpdf2+0x1c>
 80040e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <__aeabi_cdrcmple>:
 80040f0:	4684      	mov	ip, r0
 80040f2:	4610      	mov	r0, r2
 80040f4:	4662      	mov	r2, ip
 80040f6:	468c      	mov	ip, r1
 80040f8:	4619      	mov	r1, r3
 80040fa:	4663      	mov	r3, ip
 80040fc:	e000      	b.n	8004100 <__aeabi_cdcmpeq>
 80040fe:	bf00      	nop

08004100 <__aeabi_cdcmpeq>:
 8004100:	b501      	push	{r0, lr}
 8004102:	f7ff ffb7 	bl	8004074 <__cmpdf2>
 8004106:	2800      	cmp	r0, #0
 8004108:	bf48      	it	mi
 800410a:	f110 0f00 	cmnmi.w	r0, #0
 800410e:	bd01      	pop	{r0, pc}

08004110 <__aeabi_dcmpeq>:
 8004110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004114:	f7ff fff4 	bl	8004100 <__aeabi_cdcmpeq>
 8004118:	bf0c      	ite	eq
 800411a:	2001      	moveq	r0, #1
 800411c:	2000      	movne	r0, #0
 800411e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004122:	bf00      	nop

08004124 <__aeabi_dcmplt>:
 8004124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004128:	f7ff ffea 	bl	8004100 <__aeabi_cdcmpeq>
 800412c:	bf34      	ite	cc
 800412e:	2001      	movcc	r0, #1
 8004130:	2000      	movcs	r0, #0
 8004132:	f85d fb08 	ldr.w	pc, [sp], #8
 8004136:	bf00      	nop

08004138 <__aeabi_dcmple>:
 8004138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800413c:	f7ff ffe0 	bl	8004100 <__aeabi_cdcmpeq>
 8004140:	bf94      	ite	ls
 8004142:	2001      	movls	r0, #1
 8004144:	2000      	movhi	r0, #0
 8004146:	f85d fb08 	ldr.w	pc, [sp], #8
 800414a:	bf00      	nop

0800414c <__aeabi_dcmpge>:
 800414c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004150:	f7ff ffce 	bl	80040f0 <__aeabi_cdrcmple>
 8004154:	bf94      	ite	ls
 8004156:	2001      	movls	r0, #1
 8004158:	2000      	movhi	r0, #0
 800415a:	f85d fb08 	ldr.w	pc, [sp], #8
 800415e:	bf00      	nop

08004160 <__aeabi_dcmpgt>:
 8004160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004164:	f7ff ffc4 	bl	80040f0 <__aeabi_cdrcmple>
 8004168:	bf34      	ite	cc
 800416a:	2001      	movcc	r0, #1
 800416c:	2000      	movcs	r0, #0
 800416e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004172:	bf00      	nop

08004174 <__aeabi_d2iz>:
 8004174:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004178:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800417c:	d215      	bcs.n	80041aa <__aeabi_d2iz+0x36>
 800417e:	d511      	bpl.n	80041a4 <__aeabi_d2iz+0x30>
 8004180:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004184:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004188:	d912      	bls.n	80041b0 <__aeabi_d2iz+0x3c>
 800418a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800418e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004192:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004196:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800419a:	fa23 f002 	lsr.w	r0, r3, r2
 800419e:	bf18      	it	ne
 80041a0:	4240      	negne	r0, r0
 80041a2:	4770      	bx	lr
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	4770      	bx	lr
 80041aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80041ae:	d105      	bne.n	80041bc <__aeabi_d2iz+0x48>
 80041b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80041b4:	bf08      	it	eq
 80041b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80041ba:	4770      	bx	lr
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <__aeabi_d2f>:
 80041c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80041c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80041cc:	bf24      	itt	cs
 80041ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80041d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80041d6:	d90d      	bls.n	80041f4 <__aeabi_d2f+0x30>
 80041d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80041dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80041e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80041e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80041e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80041ec:	bf08      	it	eq
 80041ee:	f020 0001 	biceq.w	r0, r0, #1
 80041f2:	4770      	bx	lr
 80041f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80041f8:	d121      	bne.n	800423e <__aeabi_d2f+0x7a>
 80041fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80041fe:	bfbc      	itt	lt
 8004200:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004204:	4770      	bxlt	lr
 8004206:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800420a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800420e:	f1c2 0218 	rsb	r2, r2, #24
 8004212:	f1c2 0c20 	rsb	ip, r2, #32
 8004216:	fa10 f30c 	lsls.w	r3, r0, ip
 800421a:	fa20 f002 	lsr.w	r0, r0, r2
 800421e:	bf18      	it	ne
 8004220:	f040 0001 	orrne.w	r0, r0, #1
 8004224:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004228:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800422c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004230:	ea40 000c 	orr.w	r0, r0, ip
 8004234:	fa23 f302 	lsr.w	r3, r3, r2
 8004238:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800423c:	e7cc      	b.n	80041d8 <__aeabi_d2f+0x14>
 800423e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004242:	d107      	bne.n	8004254 <__aeabi_d2f+0x90>
 8004244:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004248:	bf1e      	ittt	ne
 800424a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800424e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004252:	4770      	bxne	lr
 8004254:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004258:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800425c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000128 	.word	0x20000128

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <__libc_init_array+0x3c>)
 8004274:	4c0e      	ldr	r4, [pc, #56]	; (80042b0 <__libc_init_array+0x40>)
 8004276:	1ae4      	subs	r4, r4, r3
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2500      	movs	r5, #0
 800427c:	461e      	mov	r6, r3
 800427e:	42a5      	cmp	r5, r4
 8004280:	d004      	beq.n	800428c <__libc_init_array+0x1c>
 8004282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004286:	4798      	blx	r3
 8004288:	3501      	adds	r5, #1
 800428a:	e7f8      	b.n	800427e <__libc_init_array+0xe>
 800428c:	f7fe f802 	bl	8002294 <_init>
 8004290:	4c08      	ldr	r4, [pc, #32]	; (80042b4 <__libc_init_array+0x44>)
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <__libc_init_array+0x48>)
 8004294:	1ae4      	subs	r4, r4, r3
 8004296:	10a4      	asrs	r4, r4, #2
 8004298:	2500      	movs	r5, #0
 800429a:	461e      	mov	r6, r3
 800429c:	42a5      	cmp	r5, r4
 800429e:	d004      	beq.n	80042aa <__libc_init_array+0x3a>
 80042a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042a4:	4798      	blx	r3
 80042a6:	3501      	adds	r5, #1
 80042a8:	e7f8      	b.n	800429c <__libc_init_array+0x2c>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	20000168 	.word	0x20000168
 80042b0:	20000168 	.word	0x20000168
 80042b4:	20000168 	.word	0x20000168
 80042b8:	20000168 	.word	0x20000168

080042bc <memcpy>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	1e43      	subs	r3, r0, #1
 80042c0:	440a      	add	r2, r1
 80042c2:	4291      	cmp	r1, r2
 80042c4:	d004      	beq.n	80042d0 <memcpy+0x14>
 80042c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ce:	e7f8      	b.n	80042c2 <memcpy+0x6>
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <memset>:
 80042d2:	4402      	add	r2, r0
 80042d4:	4603      	mov	r3, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d002      	beq.n	80042e0 <memset+0xe>
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7fa      	b.n	80042d6 <memset+0x4>
 80042e0:	4770      	bx	lr

080042e2 <__cvt>:
 80042e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80042ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80042f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80042f4:	461d      	mov	r5, r3
 80042f6:	bfb8      	it	lt
 80042f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042fc:	f027 0720 	bic.w	r7, r7, #32
 8004300:	bfb6      	itet	lt
 8004302:	461d      	movlt	r5, r3
 8004304:	2300      	movge	r3, #0
 8004306:	232d      	movlt	r3, #45	; 0x2d
 8004308:	4614      	mov	r4, r2
 800430a:	bfb8      	it	lt
 800430c:	4614      	movlt	r4, r2
 800430e:	2f46      	cmp	r7, #70	; 0x46
 8004310:	700b      	strb	r3, [r1, #0]
 8004312:	d003      	beq.n	800431c <__cvt+0x3a>
 8004314:	2f45      	cmp	r7, #69	; 0x45
 8004316:	d103      	bne.n	8004320 <__cvt+0x3e>
 8004318:	3601      	adds	r6, #1
 800431a:	e001      	b.n	8004320 <__cvt+0x3e>
 800431c:	2303      	movs	r3, #3
 800431e:	e000      	b.n	8004322 <__cvt+0x40>
 8004320:	2302      	movs	r3, #2
 8004322:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8004326:	ab06      	add	r3, sp, #24
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	ab07      	add	r3, sp, #28
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	f001 fdd9 	bl	8005ee8 <_dtoa_r>
 8004336:	2f47      	cmp	r7, #71	; 0x47
 8004338:	4680      	mov	r8, r0
 800433a:	d102      	bne.n	8004342 <__cvt+0x60>
 800433c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800433e:	07db      	lsls	r3, r3, #31
 8004340:	d526      	bpl.n	8004390 <__cvt+0xae>
 8004342:	2f46      	cmp	r7, #70	; 0x46
 8004344:	eb08 0906 	add.w	r9, r8, r6
 8004348:	d111      	bne.n	800436e <__cvt+0x8c>
 800434a:	f898 3000 	ldrb.w	r3, [r8]
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	d10a      	bne.n	8004368 <__cvt+0x86>
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	2200      	movs	r2, #0
 8004358:	2300      	movs	r3, #0
 800435a:	f7ff fed9 	bl	8004110 <__aeabi_dcmpeq>
 800435e:	b918      	cbnz	r0, 8004368 <__cvt+0x86>
 8004360:	f1c6 0601 	rsb	r6, r6, #1
 8004364:	f8ca 6000 	str.w	r6, [sl]
 8004368:	f8da 3000 	ldr.w	r3, [sl]
 800436c:	4499      	add	r9, r3
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	2200      	movs	r2, #0
 8004374:	2300      	movs	r3, #0
 8004376:	f7ff fecb 	bl	8004110 <__aeabi_dcmpeq>
 800437a:	b108      	cbz	r0, 8004380 <__cvt+0x9e>
 800437c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004380:	9b07      	ldr	r3, [sp, #28]
 8004382:	454b      	cmp	r3, r9
 8004384:	d204      	bcs.n	8004390 <__cvt+0xae>
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	9207      	str	r2, [sp, #28]
 800438a:	2230      	movs	r2, #48	; 0x30
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e7f7      	b.n	8004380 <__cvt+0x9e>
 8004390:	9b07      	ldr	r3, [sp, #28]
 8004392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004394:	ebc8 0303 	rsb	r3, r8, r3
 8004398:	4640      	mov	r0, r8
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	b008      	add	sp, #32
 800439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080043a2 <__exponent>:
 80043a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043a4:	4603      	mov	r3, r0
 80043a6:	2900      	cmp	r1, #0
 80043a8:	bfb8      	it	lt
 80043aa:	4249      	neglt	r1, r1
 80043ac:	f803 2b02 	strb.w	r2, [r3], #2
 80043b0:	bfb4      	ite	lt
 80043b2:	222d      	movlt	r2, #45	; 0x2d
 80043b4:	222b      	movge	r2, #43	; 0x2b
 80043b6:	2909      	cmp	r1, #9
 80043b8:	7042      	strb	r2, [r0, #1]
 80043ba:	dd19      	ble.n	80043f0 <__exponent+0x4e>
 80043bc:	f10d 0407 	add.w	r4, sp, #7
 80043c0:	4626      	mov	r6, r4
 80043c2:	220a      	movs	r2, #10
 80043c4:	fb91 f5f2 	sdiv	r5, r1, r2
 80043c8:	fb02 1115 	mls	r1, r2, r5, r1
 80043cc:	3130      	adds	r1, #48	; 0x30
 80043ce:	2d09      	cmp	r5, #9
 80043d0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80043d4:	4629      	mov	r1, r5
 80043d6:	dcf4      	bgt.n	80043c2 <__exponent+0x20>
 80043d8:	3130      	adds	r1, #48	; 0x30
 80043da:	1e65      	subs	r5, r4, #1
 80043dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043e0:	42b5      	cmp	r5, r6
 80043e2:	461a      	mov	r2, r3
 80043e4:	d20a      	bcs.n	80043fc <__exponent+0x5a>
 80043e6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80043ea:	f803 2b01 	strb.w	r2, [r3], #1
 80043ee:	e7f7      	b.n	80043e0 <__exponent+0x3e>
 80043f0:	2430      	movs	r4, #48	; 0x30
 80043f2:	461a      	mov	r2, r3
 80043f4:	4421      	add	r1, r4
 80043f6:	f802 4b02 	strb.w	r4, [r2], #2
 80043fa:	7059      	strb	r1, [r3, #1]
 80043fc:	1a10      	subs	r0, r2, r0
 80043fe:	b002      	add	sp, #8
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <_printf_float>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	b091      	sub	sp, #68	; 0x44
 800440a:	468b      	mov	fp, r1
 800440c:	4615      	mov	r5, r2
 800440e:	461e      	mov	r6, r3
 8004410:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004412:	4604      	mov	r4, r0
 8004414:	f002 fe38 	bl	8007088 <_localeconv_r>
 8004418:	f8d0 a000 	ldr.w	sl, [r0]
 800441c:	4650      	mov	r0, sl
 800441e:	f000 fdfd 	bl	800501c <strlen>
 8004422:	2300      	movs	r3, #0
 8004424:	930e      	str	r3, [sp, #56]	; 0x38
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9009      	str	r0, [sp, #36]	; 0x24
 800442a:	3307      	adds	r3, #7
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004434:	f103 0208 	add.w	r2, r3, #8
 8004438:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800443c:	603a      	str	r2, [r7, #0]
 800443e:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8004442:	f000 fd99 	bl	8004f78 <__fpclassifyd>
 8004446:	2801      	cmp	r0, #1
 8004448:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800444c:	d119      	bne.n	8004482 <_printf_float+0x7e>
 800444e:	2200      	movs	r2, #0
 8004450:	2300      	movs	r3, #0
 8004452:	f7ff fe67 	bl	8004124 <__aeabi_dcmplt>
 8004456:	b110      	cbz	r0, 800445e <_printf_float+0x5a>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800445e:	4ba0      	ldr	r3, [pc, #640]	; (80046e0 <_printf_float+0x2dc>)
 8004460:	4fa0      	ldr	r7, [pc, #640]	; (80046e4 <_printf_float+0x2e0>)
 8004462:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004466:	bf88      	it	hi
 8004468:	461f      	movhi	r7, r3
 800446a:	2303      	movs	r3, #3
 800446c:	f8cb 3010 	str.w	r3, [fp, #16]
 8004470:	f8db 3000 	ldr.w	r3, [fp]
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	f8cb 3000 	str.w	r3, [fp]
 800447c:	f04f 0900 	mov.w	r9, #0
 8004480:	e0a1      	b.n	80045c6 <_printf_float+0x1c2>
 8004482:	f000 fd79 	bl	8004f78 <__fpclassifyd>
 8004486:	f8db 3000 	ldr.w	r3, [fp]
 800448a:	b948      	cbnz	r0, 80044a0 <_printf_float+0x9c>
 800448c:	4a96      	ldr	r2, [pc, #600]	; (80046e8 <_printf_float+0x2e4>)
 800448e:	4f97      	ldr	r7, [pc, #604]	; (80046ec <_printf_float+0x2e8>)
 8004490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004494:	bf88      	it	hi
 8004496:	4617      	movhi	r7, r2
 8004498:	2203      	movs	r2, #3
 800449a:	f8cb 2010 	str.w	r2, [fp, #16]
 800449e:	e7e9      	b.n	8004474 <_printf_float+0x70>
 80044a0:	f8db 2004 	ldr.w	r2, [fp, #4]
 80044a4:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 80044a8:	1c57      	adds	r7, r2, #1
 80044aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80044ae:	d101      	bne.n	80044b4 <_printf_float+0xb0>
 80044b0:	2206      	movs	r2, #6
 80044b2:	e009      	b.n	80044c8 <_printf_float+0xc4>
 80044b4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80044b8:	d002      	beq.n	80044c0 <_printf_float+0xbc>
 80044ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044be:	d105      	bne.n	80044cc <_printf_float+0xc8>
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	f040 81c7 	bne.w	8004854 <_printf_float+0x450>
 80044c6:	2201      	movs	r2, #1
 80044c8:	f8cb 2004 	str.w	r2, [fp, #4]
 80044cc:	f8db 2004 	ldr.w	r2, [fp, #4]
 80044d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80044d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044d8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80044dc:	f8cb 3000 	str.w	r3, [fp]
 80044e0:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	ab0d      	add	r3, sp, #52	; 0x34
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	ab0e      	add	r3, sp, #56	; 0x38
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9306      	str	r3, [sp, #24]
 80044f2:	4620      	mov	r0, r4
 80044f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044f8:	f7ff fef3 	bl	80042e2 <__cvt>
 80044fc:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004500:	2b47      	cmp	r3, #71	; 0x47
 8004502:	4607      	mov	r7, r0
 8004504:	d10a      	bne.n	800451c <_printf_float+0x118>
 8004506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004508:	1cd8      	adds	r0, r3, #3
 800450a:	db03      	blt.n	8004514 <_printf_float+0x110>
 800450c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8004510:	4293      	cmp	r3, r2
 8004512:	dd37      	ble.n	8004584 <_printf_float+0x180>
 8004514:	f1a8 0802 	sub.w	r8, r8, #2
 8004518:	fa5f f888 	uxtb.w	r8, r8
 800451c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004520:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004522:	d815      	bhi.n	8004550 <_printf_float+0x14c>
 8004524:	3901      	subs	r1, #1
 8004526:	4642      	mov	r2, r8
 8004528:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800452c:	910d      	str	r1, [sp, #52]	; 0x34
 800452e:	f7ff ff38 	bl	80043a2 <__exponent>
 8004532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004534:	1883      	adds	r3, r0, r2
 8004536:	2a01      	cmp	r2, #1
 8004538:	4681      	mov	r9, r0
 800453a:	f8cb 3010 	str.w	r3, [fp, #16]
 800453e:	dc03      	bgt.n	8004548 <_printf_float+0x144>
 8004540:	f8db 2000 	ldr.w	r2, [fp]
 8004544:	07d1      	lsls	r1, r2, #31
 8004546:	d538      	bpl.n	80045ba <_printf_float+0x1b6>
 8004548:	3301      	adds	r3, #1
 800454a:	f8cb 3010 	str.w	r3, [fp, #16]
 800454e:	e034      	b.n	80045ba <_printf_float+0x1b6>
 8004550:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004554:	d118      	bne.n	8004588 <_printf_float+0x184>
 8004556:	2900      	cmp	r1, #0
 8004558:	f8db 3004 	ldr.w	r3, [fp, #4]
 800455c:	dd09      	ble.n	8004572 <_printf_float+0x16e>
 800455e:	f8cb 1010 	str.w	r1, [fp, #16]
 8004562:	b91b      	cbnz	r3, 800456c <_printf_float+0x168>
 8004564:	f8db 2000 	ldr.w	r2, [fp]
 8004568:	07d2      	lsls	r2, r2, #31
 800456a:	d521      	bpl.n	80045b0 <_printf_float+0x1ac>
 800456c:	3301      	adds	r3, #1
 800456e:	440b      	add	r3, r1
 8004570:	e01c      	b.n	80045ac <_printf_float+0x1a8>
 8004572:	b91b      	cbnz	r3, 800457c <_printf_float+0x178>
 8004574:	f8db 2000 	ldr.w	r2, [fp]
 8004578:	07d0      	lsls	r0, r2, #31
 800457a:	d501      	bpl.n	8004580 <_printf_float+0x17c>
 800457c:	3302      	adds	r3, #2
 800457e:	e015      	b.n	80045ac <_printf_float+0x1a8>
 8004580:	2301      	movs	r3, #1
 8004582:	e013      	b.n	80045ac <_printf_float+0x1a8>
 8004584:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800458a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800458c:	4293      	cmp	r3, r2
 800458e:	db07      	blt.n	80045a0 <_printf_float+0x19c>
 8004590:	f8db 2000 	ldr.w	r2, [fp]
 8004594:	f8cb 3010 	str.w	r3, [fp, #16]
 8004598:	07d1      	lsls	r1, r2, #31
 800459a:	d509      	bpl.n	80045b0 <_printf_float+0x1ac>
 800459c:	3301      	adds	r3, #1
 800459e:	e005      	b.n	80045ac <_printf_float+0x1a8>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bfd4      	ite	le
 80045a4:	f1c3 0302 	rsble	r3, r3, #2
 80045a8:	2301      	movgt	r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	f8cb 3010 	str.w	r3, [fp, #16]
 80045b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045b2:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80045b6:	f04f 0900 	mov.w	r9, #0
 80045ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045be:	b113      	cbz	r3, 80045c6 <_printf_float+0x1c2>
 80045c0:	232d      	movs	r3, #45	; 0x2d
 80045c2:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80045c6:	9600      	str	r6, [sp, #0]
 80045c8:	4620      	mov	r0, r4
 80045ca:	4659      	mov	r1, fp
 80045cc:	aa0f      	add	r2, sp, #60	; 0x3c
 80045ce:	462b      	mov	r3, r5
 80045d0:	f000 f95c 	bl	800488c <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d102      	bne.n	80045de <_printf_float+0x1da>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e152      	b.n	8004884 <_printf_float+0x480>
 80045de:	f8db 3000 	ldr.w	r3, [fp]
 80045e2:	055a      	lsls	r2, r3, #21
 80045e4:	d405      	bmi.n	80045f2 <_printf_float+0x1ee>
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	463a      	mov	r2, r7
 80045ec:	f8db 3010 	ldr.w	r3, [fp, #16]
 80045f0:	e108      	b.n	8004804 <_printf_float+0x400>
 80045f2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80045f6:	f240 80d0 	bls.w	800479a <_printf_float+0x396>
 80045fa:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80045fe:	2200      	movs	r2, #0
 8004600:	2300      	movs	r3, #0
 8004602:	f7ff fd85 	bl	8004110 <__aeabi_dcmpeq>
 8004606:	b350      	cbz	r0, 800465e <_printf_float+0x25a>
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <_printf_float+0x2ec>)
 800460e:	2301      	movs	r3, #1
 8004610:	47b0      	blx	r6
 8004612:	3001      	adds	r0, #1
 8004614:	d0e0      	beq.n	80045d8 <_printf_float+0x1d4>
 8004616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800461a:	429a      	cmp	r2, r3
 800461c:	db09      	blt.n	8004632 <_printf_float+0x22e>
 800461e:	f8db 3000 	ldr.w	r3, [fp]
 8004622:	07d8      	lsls	r0, r3, #31
 8004624:	d405      	bmi.n	8004632 <_printf_float+0x22e>
 8004626:	f8db 3000 	ldr.w	r3, [fp]
 800462a:	079f      	lsls	r7, r3, #30
 800462c:	f100 8110 	bmi.w	8004850 <_printf_float+0x44c>
 8004630:	e107      	b.n	8004842 <_printf_float+0x43e>
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	4652      	mov	r2, sl
 8004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463a:	47b0      	blx	r6
 800463c:	3001      	adds	r0, #1
 800463e:	d0cb      	beq.n	80045d8 <_printf_float+0x1d4>
 8004640:	2700      	movs	r7, #0
 8004642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004644:	3b01      	subs	r3, #1
 8004646:	429f      	cmp	r7, r3
 8004648:	daed      	bge.n	8004626 <_printf_float+0x222>
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f10b 021a 	add.w	r2, fp, #26
 8004652:	2301      	movs	r3, #1
 8004654:	47b0      	blx	r6
 8004656:	3001      	adds	r0, #1
 8004658:	d0be      	beq.n	80045d8 <_printf_float+0x1d4>
 800465a:	3701      	adds	r7, #1
 800465c:	e7f1      	b.n	8004642 <_printf_float+0x23e>
 800465e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004660:	2b00      	cmp	r3, #0
 8004662:	dc29      	bgt.n	80046b8 <_printf_float+0x2b4>
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <_printf_float+0x2ec>)
 800466a:	2301      	movs	r3, #1
 800466c:	47b0      	blx	r6
 800466e:	3001      	adds	r0, #1
 8004670:	d0b2      	beq.n	80045d8 <_printf_float+0x1d4>
 8004672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004674:	b92b      	cbnz	r3, 8004682 <_printf_float+0x27e>
 8004676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004678:	b91b      	cbnz	r3, 8004682 <_printf_float+0x27e>
 800467a:	f8db 3000 	ldr.w	r3, [fp]
 800467e:	07d9      	lsls	r1, r3, #31
 8004680:	d5d1      	bpl.n	8004626 <_printf_float+0x222>
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	4652      	mov	r2, sl
 8004688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468a:	47b0      	blx	r6
 800468c:	3001      	adds	r0, #1
 800468e:	d0a3      	beq.n	80045d8 <_printf_float+0x1d4>
 8004690:	f04f 0800 	mov.w	r8, #0
 8004694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004696:	425b      	negs	r3, r3
 8004698:	4598      	cmp	r8, r3
 800469a:	4620      	mov	r0, r4
 800469c:	4629      	mov	r1, r5
 800469e:	da08      	bge.n	80046b2 <_printf_float+0x2ae>
 80046a0:	f10b 021a 	add.w	r2, fp, #26
 80046a4:	2301      	movs	r3, #1
 80046a6:	47b0      	blx	r6
 80046a8:	3001      	adds	r0, #1
 80046aa:	d095      	beq.n	80045d8 <_printf_float+0x1d4>
 80046ac:	f108 0801 	add.w	r8, r8, #1
 80046b0:	e7f0      	b.n	8004694 <_printf_float+0x290>
 80046b2:	463a      	mov	r2, r7
 80046b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046b6:	e0a5      	b.n	8004804 <_printf_float+0x400>
 80046b8:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 80046bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046be:	429a      	cmp	r2, r3
 80046c0:	bfa8      	it	ge
 80046c2:	461a      	movge	r2, r3
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	4691      	mov	r9, r2
 80046c8:	dc02      	bgt.n	80046d0 <_printf_float+0x2cc>
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	e01c      	b.n	800470a <_printf_float+0x306>
 80046d0:	4620      	mov	r0, r4
 80046d2:	4629      	mov	r1, r5
 80046d4:	463a      	mov	r2, r7
 80046d6:	464b      	mov	r3, r9
 80046d8:	47b0      	blx	r6
 80046da:	3001      	adds	r0, #1
 80046dc:	d1f5      	bne.n	80046ca <_printf_float+0x2c6>
 80046de:	e77b      	b.n	80045d8 <_printf_float+0x1d4>
 80046e0:	080084ce 	.word	0x080084ce
 80046e4:	080084ca 	.word	0x080084ca
 80046e8:	080084d6 	.word	0x080084d6
 80046ec:	080084d2 	.word	0x080084d2
 80046f0:	080084da 	.word	0x080084da
 80046f4:	4620      	mov	r0, r4
 80046f6:	4629      	mov	r1, r5
 80046f8:	f10b 021a 	add.w	r2, fp, #26
 80046fc:	2301      	movs	r3, #1
 80046fe:	47b0      	blx	r6
 8004700:	3001      	adds	r0, #1
 8004702:	f43f af69 	beq.w	80045d8 <_printf_float+0x1d4>
 8004706:	f108 0801 	add.w	r8, r8, #1
 800470a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800470e:	f1b9 0f00 	cmp.w	r9, #0
 8004712:	bfac      	ite	ge
 8004714:	ebc9 0203 	rsbge	r2, r9, r3
 8004718:	461a      	movlt	r2, r3
 800471a:	4590      	cmp	r8, r2
 800471c:	dbea      	blt.n	80046f4 <_printf_float+0x2f0>
 800471e:	eb07 0803 	add.w	r8, r7, r3
 8004722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004726:	429a      	cmp	r2, r3
 8004728:	db10      	blt.n	800474c <_printf_float+0x348>
 800472a:	f8db 3000 	ldr.w	r3, [fp]
 800472e:	07da      	lsls	r2, r3, #31
 8004730:	d40c      	bmi.n	800474c <_printf_float+0x348>
 8004732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004734:	4417      	add	r7, r2
 8004736:	ebc8 0307 	rsb	r3, r8, r7
 800473a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800473c:	1bd2      	subs	r2, r2, r7
 800473e:	4293      	cmp	r3, r2
 8004740:	bfa8      	it	ge
 8004742:	4613      	movge	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	461f      	mov	r7, r3
 8004748:	dc08      	bgt.n	800475c <_printf_float+0x358>
 800474a:	e00e      	b.n	800476a <_printf_float+0x366>
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	4652      	mov	r2, sl
 8004752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004754:	47b0      	blx	r6
 8004756:	3001      	adds	r0, #1
 8004758:	d1eb      	bne.n	8004732 <_printf_float+0x32e>
 800475a:	e73d      	b.n	80045d8 <_printf_float+0x1d4>
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	4642      	mov	r2, r8
 8004762:	47b0      	blx	r6
 8004764:	3001      	adds	r0, #1
 8004766:	f43f af37 	beq.w	80045d8 <_printf_float+0x1d4>
 800476a:	f04f 0800 	mov.w	r8, #0
 800476e:	e00a      	b.n	8004786 <_printf_float+0x382>
 8004770:	4620      	mov	r0, r4
 8004772:	4629      	mov	r1, r5
 8004774:	f10b 021a 	add.w	r2, fp, #26
 8004778:	2301      	movs	r3, #1
 800477a:	47b0      	blx	r6
 800477c:	3001      	adds	r0, #1
 800477e:	f43f af2b 	beq.w	80045d8 <_printf_float+0x1d4>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478a:	2f00      	cmp	r7, #0
 800478c:	eba3 0302 	sub.w	r3, r3, r2
 8004790:	bfa8      	it	ge
 8004792:	1bdb      	subge	r3, r3, r7
 8004794:	4598      	cmp	r8, r3
 8004796:	dbeb      	blt.n	8004770 <_printf_float+0x36c>
 8004798:	e745      	b.n	8004626 <_printf_float+0x222>
 800479a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800479c:	2a01      	cmp	r2, #1
 800479e:	dc01      	bgt.n	80047a4 <_printf_float+0x3a0>
 80047a0:	07db      	lsls	r3, r3, #31
 80047a2:	d536      	bpl.n	8004812 <_printf_float+0x40e>
 80047a4:	4620      	mov	r0, r4
 80047a6:	4629      	mov	r1, r5
 80047a8:	463a      	mov	r2, r7
 80047aa:	2301      	movs	r3, #1
 80047ac:	47b0      	blx	r6
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f af12 	beq.w	80045d8 <_printf_float+0x1d4>
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	4652      	mov	r2, sl
 80047ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047bc:	47b0      	blx	r6
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f af0a 	beq.w	80045d8 <_printf_float+0x1d4>
 80047c4:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80047c8:	2200      	movs	r2, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	f7ff fca0 	bl	8004110 <__aeabi_dcmpeq>
 80047d0:	b9e8      	cbnz	r0, 800480e <_printf_float+0x40a>
 80047d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	1c7a      	adds	r2, r7, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	e01d      	b.n	800481a <_printf_float+0x416>
 80047de:	4620      	mov	r0, r4
 80047e0:	4629      	mov	r1, r5
 80047e2:	f10b 021a 	add.w	r2, fp, #26
 80047e6:	2301      	movs	r3, #1
 80047e8:	47b0      	blx	r6
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f aef4 	beq.w	80045d8 <_printf_float+0x1d4>
 80047f0:	3701      	adds	r7, #1
 80047f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f4:	3b01      	subs	r3, #1
 80047f6:	429f      	cmp	r7, r3
 80047f8:	dbf1      	blt.n	80047de <_printf_float+0x3da>
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8004802:	464b      	mov	r3, r9
 8004804:	47b0      	blx	r6
 8004806:	3001      	adds	r0, #1
 8004808:	f47f af0d 	bne.w	8004626 <_printf_float+0x222>
 800480c:	e6e4      	b.n	80045d8 <_printf_float+0x1d4>
 800480e:	2700      	movs	r7, #0
 8004810:	e7ef      	b.n	80047f2 <_printf_float+0x3ee>
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	463a      	mov	r2, r7
 8004818:	2301      	movs	r3, #1
 800481a:	47b0      	blx	r6
 800481c:	3001      	adds	r0, #1
 800481e:	d1ec      	bne.n	80047fa <_printf_float+0x3f6>
 8004820:	e6da      	b.n	80045d8 <_printf_float+0x1d4>
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	f10b 0219 	add.w	r2, fp, #25
 800482a:	2301      	movs	r3, #1
 800482c:	47b0      	blx	r6
 800482e:	3001      	adds	r0, #1
 8004830:	f43f aed2 	beq.w	80045d8 <_printf_float+0x1d4>
 8004834:	3701      	adds	r7, #1
 8004836:	f8db 300c 	ldr.w	r3, [fp, #12]
 800483a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	429f      	cmp	r7, r3
 8004840:	dbef      	blt.n	8004822 <_printf_float+0x41e>
 8004842:	f8db 000c 	ldr.w	r0, [fp, #12]
 8004846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004848:	4298      	cmp	r0, r3
 800484a:	bfb8      	it	lt
 800484c:	4618      	movlt	r0, r3
 800484e:	e019      	b.n	8004884 <_printf_float+0x480>
 8004850:	2700      	movs	r7, #0
 8004852:	e7f0      	b.n	8004836 <_printf_float+0x432>
 8004854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004858:	e88d 000c 	stmia.w	sp, {r2, r3}
 800485c:	f8cb 3000 	str.w	r3, [fp]
 8004860:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004864:	9302      	str	r3, [sp, #8]
 8004866:	ab0d      	add	r3, sp, #52	; 0x34
 8004868:	9303      	str	r3, [sp, #12]
 800486a:	ab0e      	add	r3, sp, #56	; 0x38
 800486c:	9305      	str	r3, [sp, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	9306      	str	r3, [sp, #24]
 8004872:	f8cd 8010 	str.w	r8, [sp, #16]
 8004876:	4620      	mov	r0, r4
 8004878:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800487c:	f7ff fd31 	bl	80042e2 <__cvt>
 8004880:	4607      	mov	r7, r0
 8004882:	e640      	b.n	8004506 <_printf_float+0x102>
 8004884:	b011      	add	sp, #68	; 0x44
 8004886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop

0800488c <_printf_common>:
 800488c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004890:	4691      	mov	r9, r2
 8004892:	461f      	mov	r7, r3
 8004894:	688a      	ldr	r2, [r1, #8]
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800489c:	4293      	cmp	r3, r2
 800489e:	bfb8      	it	lt
 80048a0:	4613      	movlt	r3, r2
 80048a2:	f8c9 3000 	str.w	r3, [r9]
 80048a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048aa:	4606      	mov	r6, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	b112      	cbz	r2, 80048b6 <_printf_common+0x2a>
 80048b0:	3301      	adds	r3, #1
 80048b2:	f8c9 3000 	str.w	r3, [r9]
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	0699      	lsls	r1, r3, #26
 80048ba:	bf42      	ittt	mi
 80048bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048c0:	3302      	addmi	r3, #2
 80048c2:	f8c9 3000 	strmi.w	r3, [r9]
 80048c6:	6825      	ldr	r5, [r4, #0]
 80048c8:	f015 0506 	ands.w	r5, r5, #6
 80048cc:	d01c      	beq.n	8004908 <_printf_common+0x7c>
 80048ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	3300      	adds	r3, #0
 80048d6:	bf18      	it	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	0692      	lsls	r2, r2, #26
 80048dc:	d51f      	bpl.n	800491e <_printf_common+0x92>
 80048de:	18e1      	adds	r1, r4, r3
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	2030      	movs	r0, #48	; 0x30
 80048e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e8:	4422      	add	r2, r4
 80048ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f2:	3302      	adds	r3, #2
 80048f4:	e013      	b.n	800491e <_printf_common+0x92>
 80048f6:	4630      	mov	r0, r6
 80048f8:	4639      	mov	r1, r7
 80048fa:	f104 0219 	add.w	r2, r4, #25
 80048fe:	2301      	movs	r3, #1
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d007      	beq.n	8004916 <_printf_common+0x8a>
 8004906:	3501      	adds	r5, #1
 8004908:	68e3      	ldr	r3, [r4, #12]
 800490a:	f8d9 2000 	ldr.w	r2, [r9]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	429d      	cmp	r5, r3
 8004912:	dbf0      	blt.n	80048f6 <_printf_common+0x6a>
 8004914:	e7db      	b.n	80048ce <_printf_common+0x42>
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491e:	4630      	mov	r0, r6
 8004920:	4639      	mov	r1, r7
 8004922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004926:	47c0      	blx	r8
 8004928:	3001      	adds	r0, #1
 800492a:	d0f4      	beq.n	8004916 <_printf_common+0x8a>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	f8d9 5000 	ldr.w	r5, [r9]
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	f002 0206 	and.w	r2, r2, #6
 8004938:	2a04      	cmp	r2, #4
 800493a:	bf08      	it	eq
 800493c:	1b5d      	subeq	r5, r3, r5
 800493e:	6922      	ldr	r2, [r4, #16]
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	bf0c      	ite	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	2500      	movne	r5, #0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfc4      	itt	gt
 800494e:	1a9b      	subgt	r3, r3, r2
 8004950:	18ed      	addgt	r5, r5, r3
 8004952:	f04f 0900 	mov.w	r9, #0
 8004956:	45a9      	cmp	r9, r5
 8004958:	da0a      	bge.n	8004970 <_printf_common+0xe4>
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f104 021a 	add.w	r2, r4, #26
 8004962:	2301      	movs	r3, #1
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d0d5      	beq.n	8004916 <_printf_common+0x8a>
 800496a:	f109 0901 	add.w	r9, r9, #1
 800496e:	e7f2      	b.n	8004956 <_printf_common+0xca>
 8004970:	2000      	movs	r0, #0
 8004972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08004978 <_printf_i>:
 8004978:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800497c:	460c      	mov	r4, r1
 800497e:	4617      	mov	r7, r2
 8004980:	7e22      	ldrb	r2, [r4, #24]
 8004982:	2a6e      	cmp	r2, #110	; 0x6e
 8004984:	4698      	mov	r8, r3
 8004986:	4606      	mov	r6, r0
 8004988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800498e:	f000 80a9 	beq.w	8004ae4 <_printf_i+0x16c>
 8004992:	d812      	bhi.n	80049ba <_printf_i+0x42>
 8004994:	2a63      	cmp	r2, #99	; 0x63
 8004996:	d023      	beq.n	80049e0 <_printf_i+0x68>
 8004998:	d80a      	bhi.n	80049b0 <_printf_i+0x38>
 800499a:	2a00      	cmp	r2, #0
 800499c:	f000 80b6 	beq.w	8004b0c <_printf_i+0x194>
 80049a0:	2a58      	cmp	r2, #88	; 0x58
 80049a2:	f040 80c5 	bne.w	8004b30 <_printf_i+0x1b8>
 80049a6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80049aa:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004ba4 <_printf_i+0x22c>
 80049ae:	e051      	b.n	8004a54 <_printf_i+0xdc>
 80049b0:	2a64      	cmp	r2, #100	; 0x64
 80049b2:	d01e      	beq.n	80049f2 <_printf_i+0x7a>
 80049b4:	2a69      	cmp	r2, #105	; 0x69
 80049b6:	d01c      	beq.n	80049f2 <_printf_i+0x7a>
 80049b8:	e0ba      	b.n	8004b30 <_printf_i+0x1b8>
 80049ba:	2a73      	cmp	r2, #115	; 0x73
 80049bc:	f000 80aa 	beq.w	8004b14 <_printf_i+0x19c>
 80049c0:	d809      	bhi.n	80049d6 <_printf_i+0x5e>
 80049c2:	2a6f      	cmp	r2, #111	; 0x6f
 80049c4:	d02b      	beq.n	8004a1e <_printf_i+0xa6>
 80049c6:	2a70      	cmp	r2, #112	; 0x70
 80049c8:	f040 80b2 	bne.w	8004b30 <_printf_i+0x1b8>
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	f042 0220 	orr.w	r2, r2, #32
 80049d2:	6022      	str	r2, [r4, #0]
 80049d4:	e039      	b.n	8004a4a <_printf_i+0xd2>
 80049d6:	2a75      	cmp	r2, #117	; 0x75
 80049d8:	d021      	beq.n	8004a1e <_printf_i+0xa6>
 80049da:	2a78      	cmp	r2, #120	; 0x78
 80049dc:	d035      	beq.n	8004a4a <_printf_i+0xd2>
 80049de:	e0a7      	b.n	8004b30 <_printf_i+0x1b8>
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	1d11      	adds	r1, r2, #4
 80049e4:	6019      	str	r1, [r3, #0]
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f0:	e0a2      	b.n	8004b38 <_printf_i+0x1c0>
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80049fa:	d003      	beq.n	8004a04 <_printf_i+0x8c>
 80049fc:	1d10      	adds	r0, r2, #4
 80049fe:	6018      	str	r0, [r3, #0]
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	e005      	b.n	8004a10 <_printf_i+0x98>
 8004a04:	0645      	lsls	r5, r0, #25
 8004a06:	d5f9      	bpl.n	80049fc <_printf_i+0x84>
 8004a08:	1d10      	adds	r0, r2, #4
 8004a0a:	6018      	str	r0, [r3, #0]
 8004a0c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da3b      	bge.n	8004a8c <_printf_i+0x114>
 8004a14:	222d      	movs	r2, #45	; 0x2d
 8004a16:	425b      	negs	r3, r3
 8004a18:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a1c:	e036      	b.n	8004a8c <_printf_i+0x114>
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a26:	d003      	beq.n	8004a30 <_printf_i+0xb8>
 8004a28:	1d10      	adds	r0, r2, #4
 8004a2a:	6018      	str	r0, [r3, #0]
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	e004      	b.n	8004a3a <_printf_i+0xc2>
 8004a30:	0640      	lsls	r0, r0, #25
 8004a32:	d5f9      	bpl.n	8004a28 <_printf_i+0xb0>
 8004a34:	1d10      	adds	r0, r2, #4
 8004a36:	6018      	str	r0, [r3, #0]
 8004a38:	8813      	ldrh	r3, [r2, #0]
 8004a3a:	7e22      	ldrb	r2, [r4, #24]
 8004a3c:	f8df e164 	ldr.w	lr, [pc, #356]	; 8004ba4 <_printf_i+0x22c>
 8004a40:	2a6f      	cmp	r2, #111	; 0x6f
 8004a42:	bf0c      	ite	eq
 8004a44:	2208      	moveq	r2, #8
 8004a46:	220a      	movne	r2, #10
 8004a48:	e01c      	b.n	8004a84 <_printf_i+0x10c>
 8004a4a:	2278      	movs	r2, #120	; 0x78
 8004a4c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004ba8 <_printf_i+0x230>
 8004a50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a5c:	f100 0504 	add.w	r5, r0, #4
 8004a60:	601d      	str	r5, [r3, #0]
 8004a62:	d001      	beq.n	8004a68 <_printf_i+0xf0>
 8004a64:	6803      	ldr	r3, [r0, #0]
 8004a66:	e002      	b.n	8004a6e <_printf_i+0xf6>
 8004a68:	0655      	lsls	r5, r2, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0xec>
 8004a6c:	8803      	ldrh	r3, [r0, #0]
 8004a6e:	07d0      	lsls	r0, r2, #31
 8004a70:	bf44      	itt	mi
 8004a72:	f042 0220 	orrmi.w	r2, r2, #32
 8004a76:	6022      	strmi	r2, [r4, #0]
 8004a78:	b91b      	cbnz	r3, 8004a82 <_printf_i+0x10a>
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	f022 0220 	bic.w	r2, r2, #32
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	2210      	movs	r2, #16
 8004a84:	2000      	movs	r0, #0
 8004a86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0x11a>
 8004a8c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004ba4 <_printf_i+0x22c>
 8004a90:	220a      	movs	r2, #10
 8004a92:	6865      	ldr	r5, [r4, #4]
 8004a94:	60a5      	str	r5, [r4, #8]
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	bfa2      	ittt	ge
 8004a9a:	6820      	ldrge	r0, [r4, #0]
 8004a9c:	f020 0004 	bicge.w	r0, r0, #4
 8004aa0:	6020      	strge	r0, [r4, #0]
 8004aa2:	b903      	cbnz	r3, 8004aa6 <_printf_i+0x12e>
 8004aa4:	b165      	cbz	r5, 8004ac0 <_printf_i+0x148>
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aac:	fb02 3310 	mls	r3, r2, r0, r3
 8004ab0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8004ab4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d1f4      	bne.n	8004aa8 <_printf_i+0x130>
 8004abe:	e000      	b.n	8004ac2 <_printf_i+0x14a>
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	2a08      	cmp	r2, #8
 8004ac4:	d10b      	bne.n	8004ade <_printf_i+0x166>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	07da      	lsls	r2, r3, #31
 8004aca:	d508      	bpl.n	8004ade <_printf_i+0x166>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	bfde      	ittt	le
 8004ad4:	2330      	movle	r3, #48	; 0x30
 8004ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ade:	1b49      	subs	r1, r1, r5
 8004ae0:	6121      	str	r1, [r4, #16]
 8004ae2:	e02e      	b.n	8004b42 <_printf_i+0x1ca>
 8004ae4:	6825      	ldr	r5, [r4, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6960      	ldr	r0, [r4, #20]
 8004aea:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004aee:	d003      	beq.n	8004af8 <_printf_i+0x180>
 8004af0:	1d15      	adds	r5, r2, #4
 8004af2:	601d      	str	r5, [r3, #0]
 8004af4:	6813      	ldr	r3, [r2, #0]
 8004af6:	e008      	b.n	8004b0a <_printf_i+0x192>
 8004af8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004afc:	f102 0504 	add.w	r5, r2, #4
 8004b00:	601d      	str	r5, [r3, #0]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	d001      	beq.n	8004b0a <_printf_i+0x192>
 8004b06:	8018      	strh	r0, [r3, #0]
 8004b08:	e000      	b.n	8004b0c <_printf_i+0x194>
 8004b0a:	6018      	str	r0, [r3, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	460d      	mov	r5, r1
 8004b12:	e016      	b.n	8004b42 <_printf_i+0x1ca>
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	1d11      	adds	r1, r2, #4
 8004b18:	6019      	str	r1, [r3, #0]
 8004b1a:	6815      	ldr	r5, [r2, #0]
 8004b1c:	6862      	ldr	r2, [r4, #4]
 8004b1e:	4628      	mov	r0, r5
 8004b20:	2100      	movs	r1, #0
 8004b22:	f002 fabd 	bl	80070a0 <memchr>
 8004b26:	b108      	cbz	r0, 8004b2c <_printf_i+0x1b4>
 8004b28:	1b40      	subs	r0, r0, r5
 8004b2a:	6060      	str	r0, [r4, #4]
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	e004      	b.n	8004b3a <_printf_i+0x1c2>
 8004b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b34:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b42:	f8cd 8000 	str.w	r8, [sp]
 8004b46:	4630      	mov	r0, r6
 8004b48:	4621      	mov	r1, r4
 8004b4a:	aa03      	add	r2, sp, #12
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	f7ff fe9d 	bl	800488c <_printf_common>
 8004b52:	3001      	adds	r0, #1
 8004b54:	d102      	bne.n	8004b5c <_printf_i+0x1e4>
 8004b56:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5a:	e01f      	b.n	8004b9c <_printf_i+0x224>
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	4639      	mov	r1, r7
 8004b60:	462a      	mov	r2, r5
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0f5      	beq.n	8004b56 <_printf_i+0x1de>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	079b      	lsls	r3, r3, #30
 8004b6e:	d405      	bmi.n	8004b7c <_printf_i+0x204>
 8004b70:	68e0      	ldr	r0, [r4, #12]
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	4298      	cmp	r0, r3
 8004b76:	bfb8      	it	lt
 8004b78:	4618      	movlt	r0, r3
 8004b7a:	e00f      	b.n	8004b9c <_printf_i+0x224>
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	9a03      	ldr	r2, [sp, #12]
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	429d      	cmp	r5, r3
 8004b86:	daf3      	bge.n	8004b70 <_printf_i+0x1f8>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	f104 0219 	add.w	r2, r4, #25
 8004b90:	2301      	movs	r3, #1
 8004b92:	47c0      	blx	r8
 8004b94:	3001      	adds	r0, #1
 8004b96:	d0de      	beq.n	8004b56 <_printf_i+0x1de>
 8004b98:	3501      	adds	r5, #1
 8004b9a:	e7f0      	b.n	8004b7e <_printf_i+0x206>
 8004b9c:	b004      	add	sp, #16
 8004b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba2:	bf00      	nop
 8004ba4:	080084dc 	.word	0x080084dc
 8004ba8:	080084ed 	.word	0x080084ed

08004bac <_scanf_float>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	688b      	ldr	r3, [r1, #8]
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	1e5a      	subs	r2, r3, #1
 8004bb8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bbc:	bf81      	itttt	hi
 8004bbe:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004bc2:	eb03 0c02 	addhi.w	ip, r3, r2
 8004bc6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bca:	608b      	strhi	r3, [r1, #8]
 8004bcc:	680b      	ldr	r3, [r1, #0]
 8004bce:	460f      	mov	r7, r1
 8004bd0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	f847 3b1c 	str.w	r3, [r7], #28
 8004bda:	f04f 0b00 	mov.w	fp, #0
 8004bde:	4606      	mov	r6, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	bf98      	it	ls
 8004be4:	f04f 0c00 	movls.w	ip, #0
 8004be8:	46b8      	mov	r8, r7
 8004bea:	465a      	mov	r2, fp
 8004bec:	f8cd b00c 	str.w	fp, [sp, #12]
 8004bf0:	f8cd b008 	str.w	fp, [sp, #8]
 8004bf4:	46da      	mov	sl, fp
 8004bf6:	f8cd b004 	str.w	fp, [sp, #4]
 8004bfa:	68a1      	ldr	r1, [r4, #8]
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f000 80ec 	beq.w	8004dda <_scanf_float+0x22e>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b49      	cmp	r3, #73	; 0x49
 8004c08:	d070      	beq.n	8004cec <_scanf_float+0x140>
 8004c0a:	d816      	bhi.n	8004c3a <_scanf_float+0x8e>
 8004c0c:	2b39      	cmp	r3, #57	; 0x39
 8004c0e:	d80d      	bhi.n	8004c2c <_scanf_float+0x80>
 8004c10:	2b31      	cmp	r3, #49	; 0x31
 8004c12:	d240      	bcs.n	8004c96 <_scanf_float+0xea>
 8004c14:	2b2d      	cmp	r3, #45	; 0x2d
 8004c16:	d046      	beq.n	8004ca6 <_scanf_float+0xfa>
 8004c18:	d802      	bhi.n	8004c20 <_scanf_float+0x74>
 8004c1a:	2b2b      	cmp	r3, #43	; 0x2b
 8004c1c:	d043      	beq.n	8004ca6 <_scanf_float+0xfa>
 8004c1e:	e0dc      	b.n	8004dda <_scanf_float+0x22e>
 8004c20:	2b2e      	cmp	r3, #46	; 0x2e
 8004c22:	f000 8092 	beq.w	8004d4a <_scanf_float+0x19e>
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	d023      	beq.n	8004c72 <_scanf_float+0xc6>
 8004c2a:	e0d6      	b.n	8004dda <_scanf_float+0x22e>
 8004c2c:	2b45      	cmp	r3, #69	; 0x45
 8004c2e:	f000 8095 	beq.w	8004d5c <_scanf_float+0x1b0>
 8004c32:	2b46      	cmp	r3, #70	; 0x46
 8004c34:	d077      	beq.n	8004d26 <_scanf_float+0x17a>
 8004c36:	2b41      	cmp	r3, #65	; 0x41
 8004c38:	e00c      	b.n	8004c54 <_scanf_float+0xa8>
 8004c3a:	2b65      	cmp	r3, #101	; 0x65
 8004c3c:	f000 808e 	beq.w	8004d5c <_scanf_float+0x1b0>
 8004c40:	d80a      	bhi.n	8004c58 <_scanf_float+0xac>
 8004c42:	2b54      	cmp	r3, #84	; 0x54
 8004c44:	d075      	beq.n	8004d32 <_scanf_float+0x186>
 8004c46:	d802      	bhi.n	8004c4e <_scanf_float+0xa2>
 8004c48:	2b4e      	cmp	r3, #78	; 0x4e
 8004c4a:	d034      	beq.n	8004cb6 <_scanf_float+0x10a>
 8004c4c:	e0c5      	b.n	8004dda <_scanf_float+0x22e>
 8004c4e:	2b59      	cmp	r3, #89	; 0x59
 8004c50:	d075      	beq.n	8004d3e <_scanf_float+0x192>
 8004c52:	2b61      	cmp	r3, #97	; 0x61
 8004c54:	d046      	beq.n	8004ce4 <_scanf_float+0x138>
 8004c56:	e0c0      	b.n	8004dda <_scanf_float+0x22e>
 8004c58:	2b6e      	cmp	r3, #110	; 0x6e
 8004c5a:	d02c      	beq.n	8004cb6 <_scanf_float+0x10a>
 8004c5c:	d804      	bhi.n	8004c68 <_scanf_float+0xbc>
 8004c5e:	2b66      	cmp	r3, #102	; 0x66
 8004c60:	d061      	beq.n	8004d26 <_scanf_float+0x17a>
 8004c62:	2b69      	cmp	r3, #105	; 0x69
 8004c64:	d042      	beq.n	8004cec <_scanf_float+0x140>
 8004c66:	e0b8      	b.n	8004dda <_scanf_float+0x22e>
 8004c68:	2b74      	cmp	r3, #116	; 0x74
 8004c6a:	d062      	beq.n	8004d32 <_scanf_float+0x186>
 8004c6c:	2b79      	cmp	r3, #121	; 0x79
 8004c6e:	d066      	beq.n	8004d3e <_scanf_float+0x192>
 8004c70:	e0b3      	b.n	8004dda <_scanf_float+0x22e>
 8004c72:	6820      	ldr	r0, [r4, #0]
 8004c74:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004c78:	d00d      	beq.n	8004c96 <_scanf_float+0xea>
 8004c7a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004c7e:	6020      	str	r0, [r4, #0]
 8004c80:	f10a 0a01 	add.w	sl, sl, #1
 8004c84:	f1bc 0f00 	cmp.w	ip, #0
 8004c88:	f000 808a 	beq.w	8004da0 <_scanf_float+0x1f4>
 8004c8c:	3101      	adds	r1, #1
 8004c8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004c92:	60a1      	str	r1, [r4, #8]
 8004c94:	e084      	b.n	8004da0 <_scanf_float+0x1f4>
 8004c96:	eb12 0f0b 	cmn.w	r2, fp
 8004c9a:	f040 809e 	bne.w	8004dda <_scanf_float+0x22e>
 8004c9e:	6821      	ldr	r1, [r4, #0]
 8004ca0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004ca4:	e005      	b.n	8004cb2 <_scanf_float+0x106>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	0608      	lsls	r0, r1, #24
 8004caa:	f140 8096 	bpl.w	8004dda <_scanf_float+0x22e>
 8004cae:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cb2:	6021      	str	r1, [r4, #0]
 8004cb4:	e070      	b.n	8004d98 <_scanf_float+0x1ec>
 8004cb6:	b96a      	cbnz	r2, 8004cd4 <_scanf_float+0x128>
 8004cb8:	f1ba 0f00 	cmp.w	sl, #0
 8004cbc:	d10c      	bne.n	8004cd8 <_scanf_float+0x12c>
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004cc4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004cc8:	d106      	bne.n	8004cd8 <_scanf_float+0x12c>
 8004cca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	e061      	b.n	8004d98 <_scanf_float+0x1ec>
 8004cd4:	2a02      	cmp	r2, #2
 8004cd6:	d05e      	beq.n	8004d96 <_scanf_float+0x1ea>
 8004cd8:	f1bb 0f01 	cmp.w	fp, #1
 8004cdc:	d01e      	beq.n	8004d1c <_scanf_float+0x170>
 8004cde:	f1bb 0f04 	cmp.w	fp, #4
 8004ce2:	e01a      	b.n	8004d1a <_scanf_float+0x16e>
 8004ce4:	2a01      	cmp	r2, #1
 8004ce6:	d178      	bne.n	8004dda <_scanf_float+0x22e>
 8004ce8:	2202      	movs	r2, #2
 8004cea:	e055      	b.n	8004d98 <_scanf_float+0x1ec>
 8004cec:	f1bb 0f00 	cmp.w	fp, #0
 8004cf0:	d10e      	bne.n	8004d10 <_scanf_float+0x164>
 8004cf2:	f1ba 0f00 	cmp.w	sl, #0
 8004cf6:	d173      	bne.n	8004de0 <_scanf_float+0x234>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004cfe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004d02:	d171      	bne.n	8004de8 <_scanf_float+0x23c>
 8004d04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d08:	6021      	str	r1, [r4, #0]
 8004d0a:	f04f 0b01 	mov.w	fp, #1
 8004d0e:	e043      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d10:	f1bb 0f03 	cmp.w	fp, #3
 8004d14:	d002      	beq.n	8004d1c <_scanf_float+0x170>
 8004d16:	f1bb 0f05 	cmp.w	fp, #5
 8004d1a:	d15e      	bne.n	8004dda <_scanf_float+0x22e>
 8004d1c:	f10b 0b01 	add.w	fp, fp, #1
 8004d20:	fa5f fb8b 	uxtb.w	fp, fp
 8004d24:	e038      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d26:	f1bb 0f02 	cmp.w	fp, #2
 8004d2a:	d156      	bne.n	8004dda <_scanf_float+0x22e>
 8004d2c:	f04f 0b03 	mov.w	fp, #3
 8004d30:	e032      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d32:	f1bb 0f06 	cmp.w	fp, #6
 8004d36:	d150      	bne.n	8004dda <_scanf_float+0x22e>
 8004d38:	f04f 0b07 	mov.w	fp, #7
 8004d3c:	e02c      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d3e:	f1bb 0f07 	cmp.w	fp, #7
 8004d42:	d14a      	bne.n	8004dda <_scanf_float+0x22e>
 8004d44:	f04f 0b08 	mov.w	fp, #8
 8004d48:	e026      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	0588      	lsls	r0, r1, #22
 8004d4e:	d544      	bpl.n	8004dda <_scanf_float+0x22e>
 8004d50:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004d54:	6021      	str	r1, [r4, #0]
 8004d56:	f8cd a004 	str.w	sl, [sp, #4]
 8004d5a:	e01d      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d5c:	6821      	ldr	r1, [r4, #0]
 8004d5e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004d62:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004d66:	d004      	beq.n	8004d72 <_scanf_float+0x1c6>
 8004d68:	0548      	lsls	r0, r1, #21
 8004d6a:	d536      	bpl.n	8004dda <_scanf_float+0x22e>
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	d03a      	beq.n	8004de8 <_scanf_float+0x23c>
 8004d72:	0588      	lsls	r0, r1, #22
 8004d74:	bf5c      	itt	pl
 8004d76:	9801      	ldrpl	r0, [sp, #4]
 8004d78:	f8cd 800c 	strpl.w	r8, [sp, #12]
 8004d7c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d80:	bf58      	it	pl
 8004d82:	ebc0 000a 	rsbpl	r0, r0, sl
 8004d86:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004d8a:	bf58      	it	pl
 8004d8c:	9002      	strpl	r0, [sp, #8]
 8004d8e:	6021      	str	r1, [r4, #0]
 8004d90:	f04f 0a00 	mov.w	sl, #0
 8004d94:	e000      	b.n	8004d98 <_scanf_float+0x1ec>
 8004d96:	2203      	movs	r2, #3
 8004d98:	f888 3000 	strb.w	r3, [r8]
 8004d9c:	f108 0801 	add.w	r8, r8, #1
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	3301      	adds	r3, #1
 8004daa:	6123      	str	r3, [r4, #16]
 8004dac:	686b      	ldr	r3, [r5, #4]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	606b      	str	r3, [r5, #4]
 8004db4:	dd03      	ble.n	8004dbe <_scanf_float+0x212>
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	e71d      	b.n	8004bfa <_scanf_float+0x4e>
 8004dbe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004dc2:	9205      	str	r2, [sp, #20]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f8cd c010 	str.w	ip, [sp, #16]
 8004dcc:	4798      	blx	r3
 8004dce:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004dd2:	9a05      	ldr	r2, [sp, #20]
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f43f af10 	beq.w	8004bfa <_scanf_float+0x4e>
 8004dda:	f1ba 0f00 	cmp.w	sl, #0
 8004dde:	d003      	beq.n	8004de8 <_scanf_float+0x23c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	3a01      	subs	r2, #1
 8004dea:	2a01      	cmp	r2, #1
 8004dec:	d80e      	bhi.n	8004e0c <_scanf_float+0x260>
 8004dee:	45b8      	cmp	r8, r7
 8004df0:	d90a      	bls.n	8004e08 <_scanf_float+0x25c>
 8004df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004df6:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	4798      	blx	r3
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	6123      	str	r3, [r4, #16]
 8004e06:	e7f2      	b.n	8004dee <_scanf_float+0x242>
 8004e08:	2501      	movs	r5, #1
 8004e0a:	e0ae      	b.n	8004f6a <_scanf_float+0x3be>
 8004e0c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d822      	bhi.n	8004e5a <_scanf_float+0x2ae>
 8004e14:	f1bb 0f02 	cmp.w	fp, #2
 8004e18:	d912      	bls.n	8004e40 <_scanf_float+0x294>
 8004e1a:	f1ab 0b03 	sub.w	fp, fp, #3
 8004e1e:	fa5f fb8b 	uxtb.w	fp, fp
 8004e22:	ebcb 0b08 	rsb	fp, fp, r8
 8004e26:	45d8      	cmp	r8, fp
 8004e28:	d017      	beq.n	8004e5a <_scanf_float+0x2ae>
 8004e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e2e:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8004e32:	4630      	mov	r0, r6
 8004e34:	462a      	mov	r2, r5
 8004e36:	4798      	blx	r3
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	e7f2      	b.n	8004e26 <_scanf_float+0x27a>
 8004e40:	45b8      	cmp	r8, r7
 8004e42:	d9e1      	bls.n	8004e08 <_scanf_float+0x25c>
 8004e44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e48:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	462a      	mov	r2, r5
 8004e50:	4798      	blx	r3
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	e7f2      	b.n	8004e40 <_scanf_float+0x294>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	05da      	lsls	r2, r3, #23
 8004e5e:	d52c      	bpl.n	8004eba <_scanf_float+0x30e>
 8004e60:	055b      	lsls	r3, r3, #21
 8004e62:	d50c      	bpl.n	8004e7e <_scanf_float+0x2d2>
 8004e64:	45b8      	cmp	r8, r7
 8004e66:	d9cf      	bls.n	8004e08 <_scanf_float+0x25c>
 8004e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e6c:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 8004e70:	4630      	mov	r0, r6
 8004e72:	462a      	mov	r2, r5
 8004e74:	4798      	blx	r3
 8004e76:	6923      	ldr	r3, [r4, #16]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	e7f2      	b.n	8004e64 <_scanf_float+0x2b8>
 8004e7e:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	2965      	cmp	r1, #101	; 0x65
 8004e86:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e8a:	f108 3bff 	add.w	fp, r8, #4294967295
 8004e8e:	6123      	str	r3, [r4, #16]
 8004e90:	d00d      	beq.n	8004eae <_scanf_float+0x302>
 8004e92:	2945      	cmp	r1, #69	; 0x45
 8004e94:	d00b      	beq.n	8004eae <_scanf_float+0x302>
 8004e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	4798      	blx	r3
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f1a8 0b02 	sub.w	fp, r8, #2
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4798      	blx	r3
 8004eb8:	46d8      	mov	r8, fp
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	f015 0510 	ands.w	r5, r5, #16
 8004ec0:	d152      	bne.n	8004f68 <_scanf_float+0x3bc>
 8004ec2:	f888 5000 	strb.w	r5, [r8]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed0:	d105      	bne.n	8004ede <_scanf_float+0x332>
 8004ed2:	9b01      	ldr	r3, [sp, #4]
 8004ed4:	ebc3 030a 	rsb	r3, r3, sl
 8004ed8:	425a      	negs	r2, r3
 8004eda:	b96b      	cbnz	r3, 8004ef8 <_scanf_float+0x34c>
 8004edc:	e016      	b.n	8004f0c <_scanf_float+0x360>
 8004ede:	9b02      	ldr	r3, [sp, #8]
 8004ee0:	b1a3      	cbz	r3, 8004f0c <_scanf_float+0x360>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	4630      	mov	r0, r6
 8004eea:	230a      	movs	r3, #10
 8004eec:	f000 fee8 	bl	8005cc0 <_strtol_r>
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ef6:	1ac2      	subs	r2, r0, r3
 8004ef8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004efc:	4598      	cmp	r8, r3
 8004efe:	bf28      	it	cs
 8004f00:	f504 78b7 	addcs.w	r8, r4, #366	; 0x16e
 8004f04:	4640      	mov	r0, r8
 8004f06:	491b      	ldr	r1, [pc, #108]	; (8004f74 <_scanf_float+0x3c8>)
 8004f08:	f000 f864 	bl	8004fd4 <siprintf>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	4639      	mov	r1, r7
 8004f10:	2200      	movs	r2, #0
 8004f12:	f000 f8c1 	bl	8005098 <_strtod_r>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	f8d9 3000 	ldr.w	r3, [r9]
 8004f1c:	f012 0f02 	tst.w	r2, #2
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	d003      	beq.n	8004f2e <_scanf_float+0x382>
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	f8c9 2000 	str.w	r2, [r9]
 8004f2c:	e006      	b.n	8004f3c <_scanf_float+0x390>
 8004f2e:	f012 0f04 	tst.w	r2, #4
 8004f32:	f103 0204 	add.w	r2, r3, #4
 8004f36:	f8c9 2000 	str.w	r2, [r9]
 8004f3a:	d003      	beq.n	8004f44 <_scanf_float+0x398>
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	e9c3 6700 	strd	r6, r7, [r3]
 8004f42:	e00d      	b.n	8004f60 <_scanf_float+0x3b4>
 8004f44:	f8d3 8000 	ldr.w	r8, [r3]
 8004f48:	f000 f816 	bl	8004f78 <__fpclassifyd>
 8004f4c:	b910      	cbnz	r0, 8004f54 <_scanf_float+0x3a8>
 8004f4e:	f000 f83d 	bl	8004fcc <nanf>
 8004f52:	e003      	b.n	8004f5c <_scanf_float+0x3b0>
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7ff f934 	bl	80041c4 <__aeabi_d2f>
 8004f5c:	f8c8 0000 	str.w	r0, [r8]
 8004f60:	68e3      	ldr	r3, [r4, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60e3      	str	r3, [r4, #12]
 8004f66:	e000      	b.n	8004f6a <_scanf_float+0x3be>
 8004f68:	2500      	movs	r5, #0
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	b007      	add	sp, #28
 8004f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	080084fe 	.word	0x080084fe

08004f78 <__fpclassifyd>:
 8004f78:	460a      	mov	r2, r1
 8004f7a:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	4603      	mov	r3, r0
 8004f82:	d01b      	beq.n	8004fbc <__fpclassifyd+0x44>
 8004f84:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <__fpclassifyd+0x4c>)
 8004f86:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8004f8a:	4284      	cmp	r4, r0
 8004f8c:	d910      	bls.n	8004fb0 <__fpclassifyd+0x38>
 8004f8e:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8004f92:	480c      	ldr	r0, [pc, #48]	; (8004fc4 <__fpclassifyd+0x4c>)
 8004f94:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8004f98:	4282      	cmp	r2, r0
 8004f9a:	d909      	bls.n	8004fb0 <__fpclassifyd+0x38>
 8004f9c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004fa0:	d308      	bcc.n	8004fb4 <__fpclassifyd+0x3c>
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <__fpclassifyd+0x50>)
 8004fa4:	4291      	cmp	r1, r2
 8004fa6:	d107      	bne.n	8004fb8 <__fpclassifyd+0x40>
 8004fa8:	fab3 f083 	clz	r0, r3
 8004fac:	0940      	lsrs	r0, r0, #5
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	2004      	movs	r0, #4
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	bd10      	pop	{r4, pc}
 8004fb8:	2000      	movs	r0, #0
 8004fba:	bd10      	pop	{r4, pc}
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d1e6      	bne.n	8004f8e <__fpclassifyd+0x16>
 8004fc0:	2002      	movs	r0, #2
 8004fc2:	bd10      	pop	{r4, pc}
 8004fc4:	7fdfffff 	.word	0x7fdfffff
 8004fc8:	7ff00000 	.word	0x7ff00000

08004fcc <nanf>:
 8004fcc:	4800      	ldr	r0, [pc, #0]	; (8004fd0 <nanf+0x4>)
 8004fce:	4770      	bx	lr
 8004fd0:	7fc00000 	.word	0x7fc00000

08004fd4 <siprintf>:
 8004fd4:	b40e      	push	{r1, r2, r3}
 8004fd6:	b500      	push	{lr}
 8004fd8:	b09c      	sub	sp, #112	; 0x70
 8004fda:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004fde:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004fe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fe6:	9104      	str	r1, [sp, #16]
 8004fe8:	9107      	str	r1, [sp, #28]
 8004fea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fee:	ab1d      	add	r3, sp, #116	; 0x74
 8004ff0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004ff4:	4908      	ldr	r1, [pc, #32]	; (8005018 <siprintf+0x44>)
 8004ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ffa:	9002      	str	r0, [sp, #8]
 8004ffc:	9006      	str	r0, [sp, #24]
 8004ffe:	6808      	ldr	r0, [r1, #0]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	a902      	add	r1, sp, #8
 8005004:	f002 fd54 	bl	8007ab0 <_svfiprintf_r>
 8005008:	9b02      	ldr	r3, [sp, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	b01c      	add	sp, #112	; 0x70
 8005010:	f85d eb04 	ldr.w	lr, [sp], #4
 8005014:	b003      	add	sp, #12
 8005016:	4770      	bx	lr
 8005018:	20000128 	.word	0x20000128

0800501c <strlen>:
 800501c:	4603      	mov	r3, r0
 800501e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005022:	2a00      	cmp	r2, #0
 8005024:	d1fb      	bne.n	800501e <strlen+0x2>
 8005026:	1a18      	subs	r0, r3, r0
 8005028:	3801      	subs	r0, #1
 800502a:	4770      	bx	lr

0800502c <match>:
 800502c:	b530      	push	{r4, r5, lr}
 800502e:	6803      	ldr	r3, [r0, #0]
 8005030:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005034:	3301      	adds	r3, #1
 8005036:	b14c      	cbz	r4, 800504c <match+0x20>
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800503e:	2d19      	cmp	r5, #25
 8005040:	bf98      	it	ls
 8005042:	3220      	addls	r2, #32
 8005044:	42a2      	cmp	r2, r4
 8005046:	d0f3      	beq.n	8005030 <match+0x4>
 8005048:	2000      	movs	r0, #0
 800504a:	bd30      	pop	{r4, r5, pc}
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	2001      	movs	r0, #1
 8005050:	bd30      	pop	{r4, r5, pc}

08005052 <sulp>:
 8005052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	460f      	mov	r7, r1
 8005058:	4690      	mov	r8, r2
 800505a:	f002 fafd 	bl	8007658 <__ulp>
 800505e:	4604      	mov	r4, r0
 8005060:	460d      	mov	r5, r1
 8005062:	f1b8 0f00 	cmp.w	r8, #0
 8005066:	d011      	beq.n	800508c <sulp+0x3a>
 8005068:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800506c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005070:	2b00      	cmp	r3, #0
 8005072:	dd0b      	ble.n	800508c <sulp+0x3a>
 8005074:	051b      	lsls	r3, r3, #20
 8005076:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800507a:	2400      	movs	r4, #0
 800507c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005080:	4622      	mov	r2, r4
 8005082:	462b      	mov	r3, r5
 8005084:	f7fe fddc 	bl	8003c40 <__aeabi_dmul>
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005094:	0000      	movs	r0, r0
	...

08005098 <_strtod_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	b09f      	sub	sp, #124	; 0x7c
 800509e:	2300      	movs	r3, #0
 80050a0:	4683      	mov	fp, r0
 80050a2:	468a      	mov	sl, r1
 80050a4:	9216      	str	r2, [sp, #88]	; 0x58
 80050a6:	931a      	str	r3, [sp, #104]	; 0x68
 80050a8:	f04f 0800 	mov.w	r8, #0
 80050ac:	f04f 0900 	mov.w	r9, #0
 80050b0:	9119      	str	r1, [sp, #100]	; 0x64
 80050b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	2a0d      	cmp	r2, #13
 80050b8:	d805      	bhi.n	80050c6 <_strtod_r+0x2e>
 80050ba:	2a09      	cmp	r2, #9
 80050bc:	d213      	bcs.n	80050e6 <_strtod_r+0x4e>
 80050be:	2a00      	cmp	r2, #0
 80050c0:	f000 81be 	beq.w	8005440 <_strtod_r+0x3a8>
 80050c4:	e012      	b.n	80050ec <_strtod_r+0x54>
 80050c6:	2a2b      	cmp	r2, #43	; 0x2b
 80050c8:	d006      	beq.n	80050d8 <_strtod_r+0x40>
 80050ca:	2a2d      	cmp	r2, #45	; 0x2d
 80050cc:	d002      	beq.n	80050d4 <_strtod_r+0x3c>
 80050ce:	2a20      	cmp	r2, #32
 80050d0:	d10c      	bne.n	80050ec <_strtod_r+0x54>
 80050d2:	e008      	b.n	80050e6 <_strtod_r+0x4e>
 80050d4:	2201      	movs	r2, #1
 80050d6:	e000      	b.n	80050da <_strtod_r+0x42>
 80050d8:	2200      	movs	r2, #0
 80050da:	9209      	str	r2, [sp, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	9219      	str	r2, [sp, #100]	; 0x64
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	b92b      	cbnz	r3, 80050f0 <_strtod_r+0x58>
 80050e4:	e1ac      	b.n	8005440 <_strtod_r+0x3a8>
 80050e6:	3301      	adds	r3, #1
 80050e8:	9319      	str	r3, [sp, #100]	; 0x64
 80050ea:	e7e2      	b.n	80050b2 <_strtod_r+0x1a>
 80050ec:	2300      	movs	r3, #0
 80050ee:	9309      	str	r3, [sp, #36]	; 0x24
 80050f0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80050f2:	7823      	ldrb	r3, [r4, #0]
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d15c      	bne.n	80051b2 <_strtod_r+0x11a>
 80050f8:	7863      	ldrb	r3, [r4, #1]
 80050fa:	2b58      	cmp	r3, #88	; 0x58
 80050fc:	d001      	beq.n	8005102 <_strtod_r+0x6a>
 80050fe:	2b78      	cmp	r3, #120	; 0x78
 8005100:	d14c      	bne.n	800519c <_strtod_r+0x104>
 8005102:	ab1a      	add	r3, sp, #104	; 0x68
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	4658      	mov	r0, fp
 800510c:	a919      	add	r1, sp, #100	; 0x64
 800510e:	4ab1      	ldr	r2, [pc, #708]	; (80053d4 <_strtod_r+0x33c>)
 8005110:	ab1b      	add	r3, sp, #108	; 0x6c
 8005112:	f001 fcf8 	bl	8006b06 <__gethex>
 8005116:	f010 0607 	ands.w	r6, r0, #7
 800511a:	4605      	mov	r5, r0
 800511c:	f000 859b 	beq.w	8005c56 <_strtod_r+0xbbe>
 8005120:	2e06      	cmp	r6, #6
 8005122:	d105      	bne.n	8005130 <_strtod_r+0x98>
 8005124:	3401      	adds	r4, #1
 8005126:	2300      	movs	r3, #0
 8005128:	9419      	str	r4, [sp, #100]	; 0x64
 800512a:	9309      	str	r3, [sp, #36]	; 0x24
 800512c:	f000 bd93 	b.w	8005c56 <_strtod_r+0xbbe>
 8005130:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005132:	b13a      	cbz	r2, 8005144 <_strtod_r+0xac>
 8005134:	a81c      	add	r0, sp, #112	; 0x70
 8005136:	2135      	movs	r1, #53	; 0x35
 8005138:	f002 fb7c 	bl	8007834 <__copybits>
 800513c:	4658      	mov	r0, fp
 800513e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005140:	f001 fff2 	bl	8007128 <_Bfree>
 8005144:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005146:	2e06      	cmp	r6, #6
 8005148:	d821      	bhi.n	800518e <_strtod_r+0xf6>
 800514a:	e8df f006 	tbb	[pc, r6]
 800514e:	0d04      	.short	0x0d04
 8005150:	0d1c1708 	.word	0x0d1c1708
 8005154:	04          	.byte	0x04
 8005155:	00          	.byte	0x00
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	46c8      	mov	r8, r9
 800515c:	e017      	b.n	800518e <_strtod_r+0xf6>
 800515e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005162:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8005166:	e012      	b.n	800518e <_strtod_r+0xf6>
 8005168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800516a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800516e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005172:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005176:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800517a:	e008      	b.n	800518e <_strtod_r+0xf6>
 800517c:	f8df 9258 	ldr.w	r9, [pc, #600]	; 80053d8 <_strtod_r+0x340>
 8005180:	f04f 0800 	mov.w	r8, #0
 8005184:	e003      	b.n	800518e <_strtod_r+0xf6>
 8005186:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800518a:	f04f 38ff 	mov.w	r8, #4294967295
 800518e:	0729      	lsls	r1, r5, #28
 8005190:	f140 8561 	bpl.w	8005c56 <_strtod_r+0xbbe>
 8005194:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005198:	f000 bd5d 	b.w	8005c56 <_strtod_r+0xbbe>
 800519c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	9219      	str	r2, [sp, #100]	; 0x64
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d0f9      	beq.n	800519c <_strtod_r+0x104>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8554 	beq.w	8005c56 <_strtod_r+0xbbe>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <_strtod_r+0x11c>
 80051b2:	2300      	movs	r3, #0
 80051b4:	2600      	movs	r6, #0
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	9603      	str	r6, [sp, #12]
 80051be:	4635      	mov	r5, r6
 80051c0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80051c2:	7827      	ldrb	r7, [r4, #0]
 80051c4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	2a09      	cmp	r2, #9
 80051cc:	d810      	bhi.n	80051f0 <_strtod_r+0x158>
 80051ce:	2d08      	cmp	r5, #8
 80051d0:	bfd8      	it	le
 80051d2:	9903      	ldrle	r1, [sp, #12]
 80051d4:	f04f 020a 	mov.w	r2, #10
 80051d8:	bfd8      	it	le
 80051da:	fb02 3301 	mlale	r3, r2, r1, r3
 80051de:	f104 0401 	add.w	r4, r4, #1
 80051e2:	bfd4      	ite	le
 80051e4:	9303      	strle	r3, [sp, #12]
 80051e6:	fb02 3606 	mlagt	r6, r2, r6, r3
 80051ea:	3501      	adds	r5, #1
 80051ec:	9419      	str	r4, [sp, #100]	; 0x64
 80051ee:	e7e7      	b.n	80051c0 <_strtod_r+0x128>
 80051f0:	4658      	mov	r0, fp
 80051f2:	f001 ff49 	bl	8007088 <_localeconv_r>
 80051f6:	6801      	ldr	r1, [r0, #0]
 80051f8:	9102      	str	r1, [sp, #8]
 80051fa:	4658      	mov	r0, fp
 80051fc:	f001 ff44 	bl	8007088 <_localeconv_r>
 8005200:	6800      	ldr	r0, [r0, #0]
 8005202:	f7ff ff0b 	bl	800501c <strlen>
 8005206:	9902      	ldr	r1, [sp, #8]
 8005208:	4602      	mov	r2, r0
 800520a:	4620      	mov	r0, r4
 800520c:	f002 fd52 	bl	8007cb4 <strncmp>
 8005210:	b128      	cbz	r0, 800521e <_strtod_r+0x186>
 8005212:	2000      	movs	r0, #0
 8005214:	463b      	mov	r3, r7
 8005216:	462c      	mov	r4, r5
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	4607      	mov	r7, r0
 800521c:	e05d      	b.n	80052da <_strtod_r+0x242>
 800521e:	9002      	str	r0, [sp, #8]
 8005220:	4658      	mov	r0, fp
 8005222:	f001 ff31 	bl	8007088 <_localeconv_r>
 8005226:	6800      	ldr	r0, [r0, #0]
 8005228:	f7ff fef8 	bl	800501c <strlen>
 800522c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800522e:	9902      	ldr	r1, [sp, #8]
 8005230:	181a      	adds	r2, r3, r0
 8005232:	9219      	str	r2, [sp, #100]	; 0x64
 8005234:	5c1b      	ldrb	r3, [r3, r0]
 8005236:	2d00      	cmp	r5, #0
 8005238:	d147      	bne.n	80052ca <_strtod_r+0x232>
 800523a:	4628      	mov	r0, r5
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d105      	bne.n	800524c <_strtod_r+0x1b4>
 8005240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	9219      	str	r2, [sp, #100]	; 0x64
 8005246:	3001      	adds	r0, #1
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	e7f7      	b.n	800523c <_strtod_r+0x1a4>
 800524c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005250:	2a08      	cmp	r2, #8
 8005252:	d848      	bhi.n	80052e6 <_strtod_r+0x24e>
 8005254:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005256:	9002      	str	r0, [sp, #8]
 8005258:	2000      	movs	r0, #0
 800525a:	9205      	str	r2, [sp, #20]
 800525c:	4604      	mov	r4, r0
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	f100 0101 	add.w	r1, r0, #1
 8005264:	d02b      	beq.n	80052be <_strtod_r+0x226>
 8005266:	9a02      	ldr	r2, [sp, #8]
 8005268:	440a      	add	r2, r1
 800526a:	9202      	str	r2, [sp, #8]
 800526c:	1907      	adds	r7, r0, r4
 800526e:	4621      	mov	r1, r4
 8005270:	42b9      	cmp	r1, r7
 8005272:	d013      	beq.n	800529c <_strtod_r+0x204>
 8005274:	3101      	adds	r1, #1
 8005276:	f101 3eff 	add.w	lr, r1, #4294967295
 800527a:	f1be 0f08 	cmp.w	lr, #8
 800527e:	dc06      	bgt.n	800528e <_strtod_r+0x1f6>
 8005280:	9a03      	ldr	r2, [sp, #12]
 8005282:	f04f 0e0a 	mov.w	lr, #10
 8005286:	fb0e f202 	mul.w	r2, lr, r2
 800528a:	9203      	str	r2, [sp, #12]
 800528c:	e7f0      	b.n	8005270 <_strtod_r+0x1d8>
 800528e:	2910      	cmp	r1, #16
 8005290:	bfdc      	itt	le
 8005292:	f04f 0e0a 	movle.w	lr, #10
 8005296:	fb0e f606 	mulle.w	r6, lr, r6
 800529a:	e7e9      	b.n	8005270 <_strtod_r+0x1d8>
 800529c:	4420      	add	r0, r4
 800529e:	2808      	cmp	r0, #8
 80052a0:	f100 0401 	add.w	r4, r0, #1
 80052a4:	dc05      	bgt.n	80052b2 <_strtod_r+0x21a>
 80052a6:	9a03      	ldr	r2, [sp, #12]
 80052a8:	210a      	movs	r1, #10
 80052aa:	fb01 3302 	mla	r3, r1, r2, r3
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	e004      	b.n	80052bc <_strtod_r+0x224>
 80052b2:	2c10      	cmp	r4, #16
 80052b4:	bfdc      	itt	le
 80052b6:	210a      	movle	r1, #10
 80052b8:	fb01 3606 	mlale	r6, r1, r6, r3
 80052bc:	2100      	movs	r1, #0
 80052be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c0:	1c58      	adds	r0, r3, #1
 80052c2:	9019      	str	r0, [sp, #100]	; 0x64
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	4608      	mov	r0, r1
 80052c8:	e002      	b.n	80052d0 <_strtod_r+0x238>
 80052ca:	462c      	mov	r4, r5
 80052cc:	4608      	mov	r0, r1
 80052ce:	9102      	str	r1, [sp, #8]
 80052d0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052d4:	2909      	cmp	r1, #9
 80052d6:	d9c2      	bls.n	800525e <_strtod_r+0x1c6>
 80052d8:	2701      	movs	r7, #1
 80052da:	2b65      	cmp	r3, #101	; 0x65
 80052dc:	d001      	beq.n	80052e2 <_strtod_r+0x24a>
 80052de:	2b45      	cmp	r3, #69	; 0x45
 80052e0:	d160      	bne.n	80053a4 <_strtod_r+0x30c>
 80052e2:	b974      	cbnz	r4, 8005302 <_strtod_r+0x26a>
 80052e4:	e005      	b.n	80052f2 <_strtod_r+0x25a>
 80052e6:	2b65      	cmp	r3, #101	; 0x65
 80052e8:	f040 84c3 	bne.w	8005c72 <_strtod_r+0xbda>
 80052ec:	2300      	movs	r3, #0
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	2701      	movs	r7, #1
 80052f2:	b928      	cbnz	r0, 8005300 <_strtod_r+0x268>
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80a2 	beq.w	8005440 <_strtod_r+0x3a8>
 80052fc:	4604      	mov	r4, r0
 80052fe:	e000      	b.n	8005302 <_strtod_r+0x26a>
 8005300:	2400      	movs	r4, #0
 8005302:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8005306:	f10a 0301 	add.w	r3, sl, #1
 800530a:	9319      	str	r3, [sp, #100]	; 0x64
 800530c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005310:	2b2b      	cmp	r3, #43	; 0x2b
 8005312:	d007      	beq.n	8005324 <_strtod_r+0x28c>
 8005314:	2b2d      	cmp	r3, #45	; 0x2d
 8005316:	d002      	beq.n	800531e <_strtod_r+0x286>
 8005318:	f04f 0c00 	mov.w	ip, #0
 800531c:	e009      	b.n	8005332 <_strtod_r+0x29a>
 800531e:	f04f 0c01 	mov.w	ip, #1
 8005322:	e001      	b.n	8005328 <_strtod_r+0x290>
 8005324:	f04f 0c00 	mov.w	ip, #0
 8005328:	f10a 0302 	add.w	r3, sl, #2
 800532c:	9319      	str	r3, [sp, #100]	; 0x64
 800532e:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8005332:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005336:	2909      	cmp	r1, #9
 8005338:	d832      	bhi.n	80053a0 <_strtod_r+0x308>
 800533a:	4619      	mov	r1, r3
 800533c:	2930      	cmp	r1, #48	; 0x30
 800533e:	d104      	bne.n	800534a <_strtod_r+0x2b2>
 8005340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	9119      	str	r1, [sp, #100]	; 0x64
 8005346:	7859      	ldrb	r1, [r3, #1]
 8005348:	e7f8      	b.n	800533c <_strtod_r+0x2a4>
 800534a:	f1a1 0e31 	sub.w	lr, r1, #49	; 0x31
 800534e:	f1be 0f08 	cmp.w	lr, #8
 8005352:	460b      	mov	r3, r1
 8005354:	d826      	bhi.n	80053a4 <_strtod_r+0x30c>
 8005356:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005358:	9306      	str	r3, [sp, #24]
 800535a:	3930      	subs	r1, #48	; 0x30
 800535c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800535e:	f103 0e01 	add.w	lr, r3, #1
 8005362:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800536c:	2a09      	cmp	r2, #9
 800536e:	d805      	bhi.n	800537c <_strtod_r+0x2e4>
 8005370:	f04f 0e0a 	mov.w	lr, #10
 8005374:	fb0e 3101 	mla	r1, lr, r1, r3
 8005378:	3930      	subs	r1, #48	; 0x30
 800537a:	e7ef      	b.n	800535c <_strtod_r+0x2c4>
 800537c:	9a06      	ldr	r2, [sp, #24]
 800537e:	ebc2 0e0e 	rsb	lr, r2, lr
 8005382:	f1be 0f08 	cmp.w	lr, #8
 8005386:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
 800538a:	dc03      	bgt.n	8005394 <_strtod_r+0x2fc>
 800538c:	4571      	cmp	r1, lr
 800538e:	bfa8      	it	ge
 8005390:	4671      	movge	r1, lr
 8005392:	e000      	b.n	8005396 <_strtod_r+0x2fe>
 8005394:	4671      	mov	r1, lr
 8005396:	f1bc 0f00 	cmp.w	ip, #0
 800539a:	d004      	beq.n	80053a6 <_strtod_r+0x30e>
 800539c:	4249      	negs	r1, r1
 800539e:	e002      	b.n	80053a6 <_strtod_r+0x30e>
 80053a0:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80053a4:	2100      	movs	r1, #0
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d154      	bne.n	8005454 <_strtod_r+0x3bc>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f040 8453 	bne.w	8005c56 <_strtod_r+0xbbe>
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	f040 844f 	bne.w	8005c56 <_strtod_r+0xbbe>
 80053b8:	2f00      	cmp	r7, #0
 80053ba:	d141      	bne.n	8005440 <_strtod_r+0x3a8>
 80053bc:	2b4e      	cmp	r3, #78	; 0x4e
 80053be:	d020      	beq.n	8005402 <_strtod_r+0x36a>
 80053c0:	dc02      	bgt.n	80053c8 <_strtod_r+0x330>
 80053c2:	2b49      	cmp	r3, #73	; 0x49
 80053c4:	d00a      	beq.n	80053dc <_strtod_r+0x344>
 80053c6:	e03b      	b.n	8005440 <_strtod_r+0x3a8>
 80053c8:	2b69      	cmp	r3, #105	; 0x69
 80053ca:	d007      	beq.n	80053dc <_strtod_r+0x344>
 80053cc:	2b6e      	cmp	r3, #110	; 0x6e
 80053ce:	d018      	beq.n	8005402 <_strtod_r+0x36a>
 80053d0:	e036      	b.n	8005440 <_strtod_r+0x3a8>
 80053d2:	bf00      	nop
 80053d4:	08008504 	.word	0x08008504
 80053d8:	7ff00000 	.word	0x7ff00000
 80053dc:	a819      	add	r0, sp, #100	; 0x64
 80053de:	49a6      	ldr	r1, [pc, #664]	; (8005678 <_strtod_r+0x5e0>)
 80053e0:	f7ff fe24 	bl	800502c <match>
 80053e4:	b360      	cbz	r0, 8005440 <_strtod_r+0x3a8>
 80053e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053e8:	49a4      	ldr	r1, [pc, #656]	; (800567c <_strtod_r+0x5e4>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	a819      	add	r0, sp, #100	; 0x64
 80053ee:	9319      	str	r3, [sp, #100]	; 0x64
 80053f0:	f7ff fe1c 	bl	800502c <match>
 80053f4:	b910      	cbnz	r0, 80053fc <_strtod_r+0x364>
 80053f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80053f8:	3301      	adds	r3, #1
 80053fa:	9319      	str	r3, [sp, #100]	; 0x64
 80053fc:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8005694 <_strtod_r+0x5fc>
 8005400:	e01a      	b.n	8005438 <_strtod_r+0x3a0>
 8005402:	a819      	add	r0, sp, #100	; 0x64
 8005404:	499e      	ldr	r1, [pc, #632]	; (8005680 <_strtod_r+0x5e8>)
 8005406:	f7ff fe11 	bl	800502c <match>
 800540a:	b1c8      	cbz	r0, 8005440 <_strtod_r+0x3a8>
 800540c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b28      	cmp	r3, #40	; 0x28
 8005412:	d10f      	bne.n	8005434 <_strtod_r+0x39c>
 8005414:	a819      	add	r0, sp, #100	; 0x64
 8005416:	499b      	ldr	r1, [pc, #620]	; (8005684 <_strtod_r+0x5ec>)
 8005418:	aa1c      	add	r2, sp, #112	; 0x70
 800541a:	f001 fdab 	bl	8006f74 <__hexnan>
 800541e:	2805      	cmp	r0, #5
 8005420:	d108      	bne.n	8005434 <_strtod_r+0x39c>
 8005422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005424:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005428:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800542c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005430:	f000 bc11 	b.w	8005c56 <_strtod_r+0xbbe>
 8005434:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8005698 <_strtod_r+0x600>
 8005438:	f04f 0800 	mov.w	r8, #0
 800543c:	f000 bc0b 	b.w	8005c56 <_strtod_r+0xbbe>
 8005440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005442:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8410 	beq.w	8005c6c <_strtod_r+0xbd4>
 800544c:	2300      	movs	r3, #0
 800544e:	9309      	str	r3, [sp, #36]	; 0x24
 8005450:	f000 bc03 	b.w	8005c5a <_strtod_r+0xbc2>
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	9803      	ldr	r0, [sp, #12]
 8005458:	1acb      	subs	r3, r1, r3
 800545a:	2d00      	cmp	r5, #0
 800545c:	bf14      	ite	ne
 800545e:	46aa      	movne	sl, r5
 8005460:	46a2      	moveq	sl, r4
 8005462:	2c10      	cmp	r4, #16
 8005464:	4625      	mov	r5, r4
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	bfa8      	it	ge
 800546a:	2510      	movge	r5, #16
 800546c:	f7fe fb72 	bl	8003b54 <__aeabi_ui2d>
 8005470:	2d09      	cmp	r5, #9
 8005472:	4680      	mov	r8, r0
 8005474:	4689      	mov	r9, r1
 8005476:	dd13      	ble.n	80054a0 <_strtod_r+0x408>
 8005478:	4b83      	ldr	r3, [pc, #524]	; (8005688 <_strtod_r+0x5f0>)
 800547a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800547e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005482:	f7fe fbdd 	bl	8003c40 <__aeabi_dmul>
 8005486:	4680      	mov	r8, r0
 8005488:	4630      	mov	r0, r6
 800548a:	4689      	mov	r9, r1
 800548c:	f7fe fb62 	bl	8003b54 <__aeabi_ui2d>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fe fa20 	bl	80038dc <__adddf3>
 800549c:	4680      	mov	r8, r0
 800549e:	4689      	mov	r9, r1
 80054a0:	2c0f      	cmp	r4, #15
 80054a2:	dc37      	bgt.n	8005514 <_strtod_r+0x47c>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 83d5 	beq.w	8005c56 <_strtod_r+0xbbe>
 80054ac:	dd24      	ble.n	80054f8 <_strtod_r+0x460>
 80054ae:	2b16      	cmp	r3, #22
 80054b0:	dc07      	bgt.n	80054c2 <_strtod_r+0x42a>
 80054b2:	4a75      	ldr	r2, [pc, #468]	; (8005688 <_strtod_r+0x5f0>)
 80054b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80054b8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80054bc:	464b      	mov	r3, r9
 80054be:	4642      	mov	r2, r8
 80054c0:	e015      	b.n	80054ee <_strtod_r+0x456>
 80054c2:	9a04      	ldr	r2, [sp, #16]
 80054c4:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80054c8:	429a      	cmp	r2, r3
 80054ca:	dc23      	bgt.n	8005514 <_strtod_r+0x47c>
 80054cc:	4d6e      	ldr	r5, [pc, #440]	; (8005688 <_strtod_r+0x5f0>)
 80054ce:	f1c4 040f 	rsb	r4, r4, #15
 80054d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80054d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054da:	4642      	mov	r2, r8
 80054dc:	464b      	mov	r3, r9
 80054de:	f7fe fbaf 	bl	8003c40 <__aeabi_dmul>
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	1b1c      	subs	r4, r3, r4
 80054e6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80054ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ee:	f7fe fba7 	bl	8003c40 <__aeabi_dmul>
 80054f2:	4680      	mov	r8, r0
 80054f4:	4689      	mov	r9, r1
 80054f6:	e3ae      	b.n	8005c56 <_strtod_r+0xbbe>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	f113 0f16 	cmn.w	r3, #22
 80054fe:	db09      	blt.n	8005514 <_strtod_r+0x47c>
 8005500:	4a61      	ldr	r2, [pc, #388]	; (8005688 <_strtod_r+0x5f0>)
 8005502:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	e9d2 2300 	ldrd	r2, r3, [r2]
 800550e:	f7fe fcc1 	bl	8003e94 <__aeabi_ddiv>
 8005512:	e7ee      	b.n	80054f2 <_strtod_r+0x45a>
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	1b65      	subs	r5, r4, r5
 8005518:	441d      	add	r5, r3
 800551a:	2d00      	cmp	r5, #0
 800551c:	dd54      	ble.n	80055c8 <_strtod_r+0x530>
 800551e:	f015 020f 	ands.w	r2, r5, #15
 8005522:	d00a      	beq.n	800553a <_strtod_r+0x4a2>
 8005524:	4b58      	ldr	r3, [pc, #352]	; (8005688 <_strtod_r+0x5f0>)
 8005526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800552a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800552e:	4642      	mov	r2, r8
 8005530:	464b      	mov	r3, r9
 8005532:	f7fe fb85 	bl	8003c40 <__aeabi_dmul>
 8005536:	4680      	mov	r8, r0
 8005538:	4689      	mov	r9, r1
 800553a:	f035 050f 	bics.w	r5, r5, #15
 800553e:	f000 80b1 	beq.w	80056a4 <_strtod_r+0x60c>
 8005542:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005546:	dd0b      	ble.n	8005560 <_strtod_r+0x4c8>
 8005548:	2400      	movs	r4, #0
 800554a:	46a2      	mov	sl, r4
 800554c:	9405      	str	r4, [sp, #20]
 800554e:	9403      	str	r4, [sp, #12]
 8005550:	2322      	movs	r3, #34	; 0x22
 8005552:	f8cb 3000 	str.w	r3, [fp]
 8005556:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8005694 <_strtod_r+0x5fc>
 800555a:	f04f 0800 	mov.w	r8, #0
 800555e:	e180      	b.n	8005862 <_strtod_r+0x7ca>
 8005560:	4649      	mov	r1, r9
 8005562:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800569c <_strtod_r+0x604>
 8005566:	112d      	asrs	r5, r5, #4
 8005568:	4640      	mov	r0, r8
 800556a:	2700      	movs	r7, #0
 800556c:	464e      	mov	r6, r9
 800556e:	2d01      	cmp	r5, #1
 8005570:	dd0a      	ble.n	8005588 <_strtod_r+0x4f0>
 8005572:	07ea      	lsls	r2, r5, #31
 8005574:	d503      	bpl.n	800557e <_strtod_r+0x4e6>
 8005576:	e9d9 2300 	ldrd	r2, r3, [r9]
 800557a:	f7fe fb61 	bl	8003c40 <__aeabi_dmul>
 800557e:	3701      	adds	r7, #1
 8005580:	106d      	asrs	r5, r5, #1
 8005582:	f109 0908 	add.w	r9, r9, #8
 8005586:	e7f2      	b.n	800556e <_strtod_r+0x4d6>
 8005588:	4680      	mov	r8, r0
 800558a:	f1a1 7954 	sub.w	r9, r1, #55574528	; 0x3500000
 800558e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8005592:	4642      	mov	r2, r8
 8005594:	464b      	mov	r3, r9
 8005596:	e9d6 0100 	ldrd	r0, r1, [r6]
 800559a:	f7fe fb51 	bl	8003c40 <__aeabi_dmul>
 800559e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055a2:	4689      	mov	r9, r1
 80055a4:	460a      	mov	r2, r1
 80055a6:	0d1b      	lsrs	r3, r3, #20
 80055a8:	4938      	ldr	r1, [pc, #224]	; (800568c <_strtod_r+0x5f4>)
 80055aa:	051b      	lsls	r3, r3, #20
 80055ac:	428b      	cmp	r3, r1
 80055ae:	4680      	mov	r8, r0
 80055b0:	d8ca      	bhi.n	8005548 <_strtod_r+0x4b0>
 80055b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80055b6:	428b      	cmp	r3, r1
 80055b8:	bf86      	itte	hi
 80055ba:	f8df 90e4 	ldrhi.w	r9, [pc, #228]	; 80056a0 <_strtod_r+0x608>
 80055be:	f04f 38ff 	movhi.w	r8, #4294967295
 80055c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80055c6:	e06d      	b.n	80056a4 <_strtod_r+0x60c>
 80055c8:	d06c      	beq.n	80056a4 <_strtod_r+0x60c>
 80055ca:	426d      	negs	r5, r5
 80055cc:	f015 020f 	ands.w	r2, r5, #15
 80055d0:	d00a      	beq.n	80055e8 <_strtod_r+0x550>
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <_strtod_r+0x5f0>)
 80055d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fe fc58 	bl	8003e94 <__aeabi_ddiv>
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	112d      	asrs	r5, r5, #4
 80055ea:	d05b      	beq.n	80056a4 <_strtod_r+0x60c>
 80055ec:	2d1f      	cmp	r5, #31
 80055ee:	dd04      	ble.n	80055fa <_strtod_r+0x562>
 80055f0:	2400      	movs	r4, #0
 80055f2:	46a2      	mov	sl, r4
 80055f4:	9405      	str	r4, [sp, #20]
 80055f6:	9403      	str	r4, [sp, #12]
 80055f8:	e12c      	b.n	8005854 <_strtod_r+0x7bc>
 80055fa:	f015 0f10 	tst.w	r5, #16
 80055fe:	bf0c      	ite	eq
 8005600:	2300      	moveq	r3, #0
 8005602:	236a      	movne	r3, #106	; 0x6a
 8005604:	4e22      	ldr	r6, [pc, #136]	; (8005690 <_strtod_r+0x5f8>)
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	2d00      	cmp	r5, #0
 800560e:	dd08      	ble.n	8005622 <_strtod_r+0x58a>
 8005610:	07eb      	lsls	r3, r5, #31
 8005612:	d503      	bpl.n	800561c <_strtod_r+0x584>
 8005614:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005618:	f7fe fb12 	bl	8003c40 <__aeabi_dmul>
 800561c:	106d      	asrs	r5, r5, #1
 800561e:	3608      	adds	r6, #8
 8005620:	e7f4      	b.n	800560c <_strtod_r+0x574>
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	4680      	mov	r8, r0
 8005626:	4689      	mov	r9, r1
 8005628:	b1eb      	cbz	r3, 8005666 <_strtod_r+0x5ce>
 800562a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800562e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005632:	2b00      	cmp	r3, #0
 8005634:	460a      	mov	r2, r1
 8005636:	dd16      	ble.n	8005666 <_strtod_r+0x5ce>
 8005638:	2b1f      	cmp	r3, #31
 800563a:	dd0e      	ble.n	800565a <_strtod_r+0x5c2>
 800563c:	2b34      	cmp	r3, #52	; 0x34
 800563e:	bfde      	ittt	le
 8005640:	3b20      	suble	r3, #32
 8005642:	f04f 31ff 	movle.w	r1, #4294967295
 8005646:	fa01 f303 	lslle.w	r3, r1, r3
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	bfcc      	ite	gt
 8005650:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005654:	ea03 0902 	andle.w	r9, r3, r2
 8005658:	e005      	b.n	8005666 <_strtod_r+0x5ce>
 800565a:	f04f 32ff 	mov.w	r2, #4294967295
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	ea03 0800 	and.w	r8, r3, r0
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	2200      	movs	r2, #0
 800566c:	2300      	movs	r3, #0
 800566e:	f7fe fd4f 	bl	8004110 <__aeabi_dcmpeq>
 8005672:	2800      	cmp	r0, #0
 8005674:	d1bc      	bne.n	80055f0 <_strtod_r+0x558>
 8005676:	e017      	b.n	80056a8 <_strtod_r+0x610>
 8005678:	080084cf 	.word	0x080084cf
 800567c:	08008658 	.word	0x08008658
 8005680:	080084d7 	.word	0x080084d7
 8005684:	08008540 	.word	0x08008540
 8005688:	08008670 	.word	0x08008670
 800568c:	7ca00000 	.word	0x7ca00000
 8005690:	08008518 	.word	0x08008518
 8005694:	7ff00000 	.word	0x7ff00000
 8005698:	fff80000 	.word	0xfff80000
 800569c:	08008738 	.word	0x08008738
 80056a0:	7fefffff 	.word	0x7fefffff
 80056a4:	2300      	movs	r3, #0
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4658      	mov	r0, fp
 80056ae:	9905      	ldr	r1, [sp, #20]
 80056b0:	4652      	mov	r2, sl
 80056b2:	4623      	mov	r3, r4
 80056b4:	f001 fd8d 	bl	80071d2 <__s2b>
 80056b8:	9005      	str	r0, [sp, #20]
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f43f af44 	beq.w	8005548 <_strtod_r+0x4b0>
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	2a00      	cmp	r2, #0
 80056c6:	f1c3 0300 	rsb	r3, r3, #0
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	bfa8      	it	ge
 80056d0:	2300      	movge	r3, #0
 80056d2:	9312      	str	r3, [sp, #72]	; 0x48
 80056d4:	46a2      	mov	sl, r4
 80056d6:	9b05      	ldr	r3, [sp, #20]
 80056d8:	4658      	mov	r0, fp
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	f001 fcef 	bl	80070be <_Balloc>
 80056e0:	9003      	str	r0, [sp, #12]
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f43f af34 	beq.w	8005550 <_strtod_r+0x4b8>
 80056e8:	9b05      	ldr	r3, [sp, #20]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	9b05      	ldr	r3, [sp, #20]
 80056ee:	3202      	adds	r2, #2
 80056f0:	f103 010c 	add.w	r1, r3, #12
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	300c      	adds	r0, #12
 80056f8:	f7fe fde0 	bl	80042bc <memcpy>
 80056fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	ab1c      	add	r3, sp, #112	; 0x70
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	4658      	mov	r0, fp
 8005706:	4642      	mov	r2, r8
 8005708:	464b      	mov	r3, r9
 800570a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800570e:	f002 f816 	bl	800773e <__d2b>
 8005712:	901a      	str	r0, [sp, #104]	; 0x68
 8005714:	2800      	cmp	r0, #0
 8005716:	f43f af1b 	beq.w	8005550 <_strtod_r+0x4b8>
 800571a:	4658      	mov	r0, fp
 800571c:	2101      	movs	r1, #1
 800571e:	f001 fde5 	bl	80072ec <__i2b>
 8005722:	4682      	mov	sl, r0
 8005724:	2800      	cmp	r0, #0
 8005726:	f43f af13 	beq.w	8005550 <_strtod_r+0x4b8>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	9902      	ldr	r1, [sp, #8]
 800572e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005734:	9308      	str	r3, [sp, #32]
 8005736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005738:	2b00      	cmp	r3, #0
 800573a:	bfad      	iteet	ge
 800573c:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 800573e:	9a08      	ldrlt	r2, [sp, #32]
 8005740:	9e12      	ldrlt	r6, [sp, #72]	; 0x48
 8005742:	18d6      	addge	r6, r2, r3
 8005744:	bfb8      	it	lt
 8005746:	1ad2      	sublt	r2, r2, r3
 8005748:	eba3 0301 	sub.w	r3, r3, r1
 800574c:	442b      	add	r3, r5
 800574e:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8005752:	bfa8      	it	ge
 8005754:	9a08      	ldrge	r2, [sp, #32]
 8005756:	428b      	cmp	r3, r1
 8005758:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
 800575c:	f280 8086 	bge.w	800586c <_strtod_r+0x7d4>
 8005760:	1ac9      	subs	r1, r1, r3
 8005762:	291f      	cmp	r1, #31
 8005764:	eba5 0501 	sub.w	r5, r5, r1
 8005768:	bfc8      	it	gt
 800576a:	49b3      	ldrgt	r1, [pc, #716]	; (8005a38 <_strtod_r+0x9a0>)
 800576c:	f04f 0001 	mov.w	r0, #1
 8005770:	bfd5      	itete	le
 8005772:	fa00 f301 	lslle.w	r3, r0, r1
 8005776:	1ac9      	subgt	r1, r1, r3
 8005778:	9313      	strle	r3, [sp, #76]	; 0x4c
 800577a:	fa00 f301 	lslgt.w	r3, r0, r1
 800577e:	bfd9      	ittee	le
 8005780:	2300      	movle	r3, #0
 8005782:	9306      	strle	r3, [sp, #24]
 8005784:	9306      	strgt	r3, [sp, #24]
 8005786:	9013      	strgt	r0, [sp, #76]	; 0x4c
 8005788:	1977      	adds	r7, r6, r5
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	42b7      	cmp	r7, r6
 800578e:	4415      	add	r5, r2
 8005790:	441d      	add	r5, r3
 8005792:	463b      	mov	r3, r7
 8005794:	bfa8      	it	ge
 8005796:	4633      	movge	r3, r6
 8005798:	42ab      	cmp	r3, r5
 800579a:	bfa8      	it	ge
 800579c:	462b      	movge	r3, r5
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfc2      	ittt	gt
 80057a2:	1aff      	subgt	r7, r7, r3
 80057a4:	1aed      	subgt	r5, r5, r3
 80057a6:	1af6      	subgt	r6, r6, r3
 80057a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d163      	bne.n	8005876 <_strtod_r+0x7de>
 80057ae:	2f00      	cmp	r7, #0
 80057b0:	dc7a      	bgt.n	80058a8 <_strtod_r+0x810>
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8081 	bne.w	80058bc <_strtod_r+0x824>
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	f300 8088 	bgt.w	80058d0 <_strtod_r+0x838>
 80057c0:	2e00      	cmp	r6, #0
 80057c2:	f300 808f 	bgt.w	80058e4 <_strtod_r+0x84c>
 80057c6:	4658      	mov	r0, fp
 80057c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	f001 fee5 	bl	800759a <__mdiff>
 80057d0:	4604      	mov	r4, r0
 80057d2:	2800      	cmp	r0, #0
 80057d4:	f43f aebc 	beq.w	8005550 <_strtod_r+0x4b8>
 80057d8:	68c3      	ldr	r3, [r0, #12]
 80057da:	9308      	str	r3, [sp, #32]
 80057dc:	2300      	movs	r3, #0
 80057de:	60c3      	str	r3, [r0, #12]
 80057e0:	4651      	mov	r1, sl
 80057e2:	f001 febe 	bl	8007562 <__mcmp>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f280 808a 	bge.w	8005900 <_strtod_r+0x868>
 80057ec:	9b08      	ldr	r3, [sp, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 820a 	bne.w	8005c08 <_strtod_r+0xb70>
 80057f4:	f1b8 0f00 	cmp.w	r8, #0
 80057f8:	f040 8206 	bne.w	8005c08 <_strtod_r+0xb70>
 80057fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 8201 	bne.w	8005c08 <_strtod_r+0xb70>
 8005806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800580a:	0d1b      	lsrs	r3, r3, #20
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005812:	f240 81f9 	bls.w	8005c08 <_strtod_r+0xb70>
 8005816:	6963      	ldr	r3, [r4, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d06d      	beq.n	80058f8 <_strtod_r+0x860>
 800581c:	4621      	mov	r1, r4
 800581e:	2201      	movs	r2, #1
 8005820:	4658      	mov	r0, fp
 8005822:	f001 fe4b 	bl	80074bc <__lshift>
 8005826:	4651      	mov	r1, sl
 8005828:	4604      	mov	r4, r0
 800582a:	f001 fe9a 	bl	8007562 <__mcmp>
 800582e:	2800      	cmp	r0, #0
 8005830:	f340 81ea 	ble.w	8005c08 <_strtod_r+0xb70>
 8005834:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005838:	9a02      	ldr	r2, [sp, #8]
 800583a:	0d1b      	lsrs	r3, r3, #20
 800583c:	051b      	lsls	r3, r3, #20
 800583e:	2a00      	cmp	r2, #0
 8005840:	f000 808d 	beq.w	800595e <_strtod_r+0x8c6>
 8005844:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005848:	f300 8089 	bgt.w	800595e <_strtod_r+0x8c6>
 800584c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8005850:	f300 81dc 	bgt.w	8005c0c <_strtod_r+0xb74>
 8005854:	2322      	movs	r3, #34	; 0x22
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	f8cb 3000 	str.w	r3, [fp]
 8005862:	9b05      	ldr	r3, [sp, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 81e2 	bne.w	8005c2e <_strtod_r+0xb96>
 800586a:	e1f4      	b.n	8005c56 <_strtod_r+0xbbe>
 800586c:	2300      	movs	r3, #0
 800586e:	9306      	str	r3, [sp, #24]
 8005870:	2301      	movs	r3, #1
 8005872:	9313      	str	r3, [sp, #76]	; 0x4c
 8005874:	e788      	b.n	8005788 <_strtod_r+0x6f0>
 8005876:	4651      	mov	r1, sl
 8005878:	4658      	mov	r0, fp
 800587a:	461a      	mov	r2, r3
 800587c:	f001 fdd0 	bl	8007420 <__pow5mult>
 8005880:	4682      	mov	sl, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	f43f ae64 	beq.w	8005550 <_strtod_r+0x4b8>
 8005888:	4658      	mov	r0, fp
 800588a:	4651      	mov	r1, sl
 800588c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800588e:	f001 fd36 	bl	80072fe <__multiply>
 8005892:	9017      	str	r0, [sp, #92]	; 0x5c
 8005894:	2800      	cmp	r0, #0
 8005896:	f43f ae5b 	beq.w	8005550 <_strtod_r+0x4b8>
 800589a:	4658      	mov	r0, fp
 800589c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800589e:	f001 fc43 	bl	8007128 <_Bfree>
 80058a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058a4:	931a      	str	r3, [sp, #104]	; 0x68
 80058a6:	e782      	b.n	80057ae <_strtod_r+0x716>
 80058a8:	4658      	mov	r0, fp
 80058aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058ac:	463a      	mov	r2, r7
 80058ae:	f001 fe05 	bl	80074bc <__lshift>
 80058b2:	901a      	str	r0, [sp, #104]	; 0x68
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f47f af7c 	bne.w	80057b2 <_strtod_r+0x71a>
 80058ba:	e649      	b.n	8005550 <_strtod_r+0x4b8>
 80058bc:	4658      	mov	r0, fp
 80058be:	9903      	ldr	r1, [sp, #12]
 80058c0:	9a08      	ldr	r2, [sp, #32]
 80058c2:	f001 fdad 	bl	8007420 <__pow5mult>
 80058c6:	9003      	str	r0, [sp, #12]
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f47f af76 	bne.w	80057ba <_strtod_r+0x722>
 80058ce:	e63f      	b.n	8005550 <_strtod_r+0x4b8>
 80058d0:	4658      	mov	r0, fp
 80058d2:	9903      	ldr	r1, [sp, #12]
 80058d4:	462a      	mov	r2, r5
 80058d6:	f001 fdf1 	bl	80074bc <__lshift>
 80058da:	9003      	str	r0, [sp, #12]
 80058dc:	2800      	cmp	r0, #0
 80058de:	f47f af6f 	bne.w	80057c0 <_strtod_r+0x728>
 80058e2:	e635      	b.n	8005550 <_strtod_r+0x4b8>
 80058e4:	4651      	mov	r1, sl
 80058e6:	4658      	mov	r0, fp
 80058e8:	4632      	mov	r2, r6
 80058ea:	f001 fde7 	bl	80074bc <__lshift>
 80058ee:	4682      	mov	sl, r0
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f47f af68 	bne.w	80057c6 <_strtod_r+0x72e>
 80058f6:	e62b      	b.n	8005550 <_strtod_r+0x4b8>
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	dc8e      	bgt.n	800581c <_strtod_r+0x784>
 80058fe:	e183      	b.n	8005c08 <_strtod_r+0xb70>
 8005900:	d162      	bne.n	80059c8 <_strtod_r+0x930>
 8005902:	9a08      	ldr	r2, [sp, #32]
 8005904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005908:	b322      	cbz	r2, 8005954 <_strtod_r+0x8bc>
 800590a:	494c      	ldr	r1, [pc, #304]	; (8005a3c <_strtod_r+0x9a4>)
 800590c:	428b      	cmp	r3, r1
 800590e:	464a      	mov	r2, r9
 8005910:	d12e      	bne.n	8005970 <_strtod_r+0x8d8>
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	4641      	mov	r1, r8
 8005916:	b163      	cbz	r3, 8005932 <_strtod_r+0x89a>
 8005918:	4b49      	ldr	r3, [pc, #292]	; (8005a40 <_strtod_r+0x9a8>)
 800591a:	4013      	ands	r3, r2
 800591c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005920:	d807      	bhi.n	8005932 <_strtod_r+0x89a>
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	fa00 f303 	lsl.w	r3, r0, r3
 8005930:	e001      	b.n	8005936 <_strtod_r+0x89e>
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
 8005936:	4299      	cmp	r1, r3
 8005938:	d11a      	bne.n	8005970 <_strtod_r+0x8d8>
 800593a:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <_strtod_r+0x9ac>)
 800593c:	429a      	cmp	r2, r3
 800593e:	d102      	bne.n	8005946 <_strtod_r+0x8ae>
 8005940:	3101      	adds	r1, #1
 8005942:	f43f ae05 	beq.w	8005550 <_strtod_r+0x4b8>
 8005946:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <_strtod_r+0x9a8>)
 8005948:	4013      	ands	r3, r2
 800594a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800594e:	f04f 0800 	mov.w	r8, #0
 8005952:	e159      	b.n	8005c08 <_strtod_r+0xb70>
 8005954:	b963      	cbnz	r3, 8005970 <_strtod_r+0x8d8>
 8005956:	f1b8 0f00 	cmp.w	r8, #0
 800595a:	d109      	bne.n	8005970 <_strtod_r+0x8d8>
 800595c:	e76a      	b.n	8005834 <_strtod_r+0x79c>
 800595e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005962:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005966:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800596a:	f04f 38ff 	mov.w	r8, #4294967295
 800596e:	e14b      	b.n	8005c08 <_strtod_r+0xb70>
 8005970:	9b06      	ldr	r3, [sp, #24]
 8005972:	b113      	cbz	r3, 800597a <_strtod_r+0x8e2>
 8005974:	ea13 0f09 	tst.w	r3, r9
 8005978:	e002      	b.n	8005980 <_strtod_r+0x8e8>
 800597a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800597c:	ea13 0f08 	tst.w	r3, r8
 8005980:	f000 8142 	beq.w	8005c08 <_strtod_r+0xb70>
 8005984:	9b08      	ldr	r3, [sp, #32]
 8005986:	9a02      	ldr	r2, [sp, #8]
 8005988:	4640      	mov	r0, r8
 800598a:	4649      	mov	r1, r9
 800598c:	b153      	cbz	r3, 80059a4 <_strtod_r+0x90c>
 800598e:	f7ff fb60 	bl	8005052 <sulp>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800599a:	f7fd ff9f 	bl	80038dc <__adddf3>
 800599e:	4680      	mov	r8, r0
 80059a0:	4689      	mov	r9, r1
 80059a2:	e131      	b.n	8005c08 <_strtod_r+0xb70>
 80059a4:	f7ff fb55 	bl	8005052 <sulp>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059b0:	f7fd ff92 	bl	80038d8 <__aeabi_dsub>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4680      	mov	r8, r0
 80059ba:	4689      	mov	r9, r1
 80059bc:	f7fe fba8 	bl	8004110 <__aeabi_dcmpeq>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f47f af47 	bne.w	8005854 <_strtod_r+0x7bc>
 80059c6:	e11f      	b.n	8005c08 <_strtod_r+0xb70>
 80059c8:	4620      	mov	r0, r4
 80059ca:	4651      	mov	r1, sl
 80059cc:	f001 ff09 	bl	80077e2 <__ratio>
 80059d0:	2200      	movs	r2, #0
 80059d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	f7fe fbad 	bl	8004138 <__aeabi_dcmple>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d041      	beq.n	8005a66 <_strtod_r+0x9ce>
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	b113      	cbz	r3, 80059ec <_strtod_r+0x954>
 80059e6:	2200      	movs	r2, #0
 80059e8:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <_strtod_r+0x9b0>)
 80059ea:	e00f      	b.n	8005a0c <_strtod_r+0x974>
 80059ec:	f1b8 0f00 	cmp.w	r8, #0
 80059f0:	d103      	bne.n	80059fa <_strtod_r+0x962>
 80059f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059f6:	b93b      	cbnz	r3, 8005a08 <_strtod_r+0x970>
 80059f8:	e00d      	b.n	8005a16 <_strtod_r+0x97e>
 80059fa:	f1b8 0f01 	cmp.w	r8, #1
 80059fe:	d103      	bne.n	8005a08 <_strtod_r+0x970>
 8005a00:	f1b9 0f00 	cmp.w	r9, #0
 8005a04:	f43f af26 	beq.w	8005854 <_strtod_r+0x7bc>
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <_strtod_r+0x9b4>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a10:	2600      	movs	r6, #0
 8005a12:	4f0d      	ldr	r7, [pc, #52]	; (8005a48 <_strtod_r+0x9b0>)
 8005a14:	e03c      	b.n	8005a90 <_strtod_r+0x9f8>
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <_strtod_r+0x9b0>)
 8005a1e:	f7fe fb81 	bl	8004124 <__aeabi_dcmplt>
 8005a22:	b9b8      	cbnz	r0, 8005a54 <_strtod_r+0x9bc>
 8005a24:	4630      	mov	r0, r6
 8005a26:	4639      	mov	r1, r7
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <_strtod_r+0x9b8>)
 8005a2c:	f7fe f908 	bl	8003c40 <__aeabi_dmul>
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	e010      	b.n	8005a58 <_strtod_r+0x9c0>
 8005a36:	bf00      	nop
 8005a38:	fffffbe3 	.word	0xfffffbe3
 8005a3c:	000fffff 	.word	0x000fffff
 8005a40:	7ff00000 	.word	0x7ff00000
 8005a44:	7fefffff 	.word	0x7fefffff
 8005a48:	3ff00000 	.word	0x3ff00000
 8005a4c:	bff00000 	.word	0xbff00000
 8005a50:	3fe00000 	.word	0x3fe00000
 8005a54:	4f94      	ldr	r7, [pc, #592]	; (8005ca8 <_strtod_r+0xc10>)
 8005a56:	2600      	movs	r6, #0
 8005a58:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005a5c:	9614      	str	r6, [sp, #80]	; 0x50
 8005a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8005a60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005a64:	e012      	b.n	8005a8c <_strtod_r+0x9f4>
 8005a66:	4630      	mov	r0, r6
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <_strtod_r+0xc10>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f7fe f8e7 	bl	8003c40 <__aeabi_dmul>
 8005a72:	9b08      	ldr	r3, [sp, #32]
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	b923      	cbnz	r3, 8005a84 <_strtod_r+0x9ec>
 8005a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a7e:	900e      	str	r0, [sp, #56]	; 0x38
 8005a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a82:	e001      	b.n	8005a88 <_strtod_r+0x9f0>
 8005a84:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8005a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a90:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 8005a94:	0d2d      	lsrs	r5, r5, #20
 8005a96:	4b85      	ldr	r3, [pc, #532]	; (8005cac <_strtod_r+0xc14>)
 8005a98:	052d      	lsls	r5, r5, #20
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	d12d      	bne.n	8005afa <_strtod_r+0xa62>
 8005a9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005aa2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005aae:	f001 fdd3 	bl	8007658 <__ulp>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aba:	f7fe f8c1 	bl	8003c40 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fd ff09 	bl	80038dc <__adddf3>
 8005aca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ace:	0d1b      	lsrs	r3, r3, #20
 8005ad0:	4a77      	ldr	r2, [pc, #476]	; (8005cb0 <_strtod_r+0xc18>)
 8005ad2:	051b      	lsls	r3, r3, #20
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	4680      	mov	r8, r0
 8005ad8:	d90c      	bls.n	8005af4 <_strtod_r+0xa5c>
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <_strtod_r+0xc1c>)
 8005adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d103      	bne.n	8005aea <_strtod_r+0xa52>
 8005ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f43f ad33 	beq.w	8005550 <_strtod_r+0x4b8>
 8005aea:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8005cb4 <_strtod_r+0xc1c>
 8005aee:	f04f 38ff 	mov.w	r8, #4294967295
 8005af2:	e078      	b.n	8005be6 <_strtod_r+0xb4e>
 8005af4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8005af8:	e03d      	b.n	8005b76 <_strtod_r+0xade>
 8005afa:	9b02      	ldr	r3, [sp, #8]
 8005afc:	b33b      	cbz	r3, 8005b4e <_strtod_r+0xab6>
 8005afe:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
 8005b02:	d824      	bhi.n	8005b4e <_strtod_r+0xab6>
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	a35f      	add	r3, pc, #380	; (adr r3, 8005c88 <_strtod_r+0xbf0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fe fb13 	bl	8004138 <__aeabi_dcmple>
 8005b12:	b1b8      	cbz	r0, 8005b44 <_strtod_r+0xaac>
 8005b14:	4639      	mov	r1, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	f002 f932 	bl	8007d80 <__aeabi_d2uiz>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	bf08      	it	eq
 8005b20:	2001      	moveq	r0, #1
 8005b22:	f7fe f817 	bl	8003b54 <__aeabi_ui2d>
 8005b26:	9b08      	ldr	r3, [sp, #32]
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	b923      	cbnz	r3, 8005b38 <_strtod_r+0xaa0>
 8005b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b32:	9010      	str	r0, [sp, #64]	; 0x40
 8005b34:	9311      	str	r3, [sp, #68]	; 0x44
 8005b36:	e001      	b.n	8005b3c <_strtod_r+0xaa4>
 8005b38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005b3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005b4a:	1b5b      	subs	r3, r3, r5
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b52:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005b56:	f001 fd7f 	bl	8007658 <__ulp>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fe f86d 	bl	8003c40 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b6e:	f7fd feb5 	bl	80038dc <__adddf3>
 8005b72:	4680      	mov	r8, r0
 8005b74:	4689      	mov	r9, r1
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	bbab      	cbnz	r3, 8005be6 <_strtod_r+0xb4e>
 8005b7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b7e:	0d1b      	lsrs	r3, r3, #20
 8005b80:	051b      	lsls	r3, r3, #20
 8005b82:	429d      	cmp	r5, r3
 8005b84:	d12f      	bne.n	8005be6 <_strtod_r+0xb4e>
 8005b86:	4639      	mov	r1, r7
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f8cd 9018 	str.w	r9, [sp, #24]
 8005b8e:	f7fe faf1 	bl	8004174 <__aeabi_d2iz>
 8005b92:	f7fd ffef 	bl	8003b74 <__aeabi_i2d>
 8005b96:	460b      	mov	r3, r1
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7fd fe9b 	bl	80038d8 <__aeabi_dsub>
 8005ba2:	9b08      	ldr	r3, [sp, #32]
 8005ba4:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	b92b      	cbnz	r3, 8005bba <_strtod_r+0xb22>
 8005bae:	f1b8 0f00 	cmp.w	r8, #0
 8005bb2:	d102      	bne.n	8005bba <_strtod_r+0xb22>
 8005bb4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8005bb8:	b17b      	cbz	r3, 8005bda <_strtod_r+0xb42>
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	a334      	add	r3, pc, #208	; (adr r3, 8005c90 <_strtod_r+0xbf8>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fe faae 	bl	8004124 <__aeabi_dcmplt>
 8005bc8:	bb88      	cbnz	r0, 8005c2e <_strtod_r+0xb96>
 8005bca:	4630      	mov	r0, r6
 8005bcc:	4639      	mov	r1, r7
 8005bce:	a332      	add	r3, pc, #200	; (adr r3, 8005c98 <_strtod_r+0xc00>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fe fac4 	bl	8004160 <__aeabi_dcmpgt>
 8005bd8:	e004      	b.n	8005be4 <_strtod_r+0xb4c>
 8005bda:	a331      	add	r3, pc, #196	; (adr r3, 8005ca0 <_strtod_r+0xc08>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fe faa0 	bl	8004124 <__aeabi_dcmplt>
 8005be4:	bb18      	cbnz	r0, 8005c2e <_strtod_r+0xb96>
 8005be6:	4658      	mov	r0, fp
 8005be8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005bea:	f001 fa9d 	bl	8007128 <_Bfree>
 8005bee:	4658      	mov	r0, fp
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	f001 fa99 	bl	8007128 <_Bfree>
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	f001 fa95 	bl	8007128 <_Bfree>
 8005bfe:	4658      	mov	r0, fp
 8005c00:	4621      	mov	r1, r4
 8005c02:	f001 fa91 	bl	8007128 <_Bfree>
 8005c06:	e566      	b.n	80056d6 <_strtod_r+0x63e>
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	b183      	cbz	r3, 8005c2e <_strtod_r+0xb96>
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <_strtod_r+0xc20>)
 8005c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c10:	2300      	movs	r3, #0
 8005c12:	930c      	str	r3, [sp, #48]	; 0x30
 8005c14:	4640      	mov	r0, r8
 8005c16:	4649      	mov	r1, r9
 8005c18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c1c:	f7fe f810 	bl	8003c40 <__aeabi_dmul>
 8005c20:	4680      	mov	r8, r0
 8005c22:	4689      	mov	r9, r1
 8005c24:	b919      	cbnz	r1, 8005c2e <_strtod_r+0xb96>
 8005c26:	b910      	cbnz	r0, 8005c2e <_strtod_r+0xb96>
 8005c28:	2322      	movs	r3, #34	; 0x22
 8005c2a:	f8cb 3000 	str.w	r3, [fp]
 8005c2e:	4658      	mov	r0, fp
 8005c30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c32:	f001 fa79 	bl	8007128 <_Bfree>
 8005c36:	4658      	mov	r0, fp
 8005c38:	9903      	ldr	r1, [sp, #12]
 8005c3a:	f001 fa75 	bl	8007128 <_Bfree>
 8005c3e:	4658      	mov	r0, fp
 8005c40:	4651      	mov	r1, sl
 8005c42:	f001 fa71 	bl	8007128 <_Bfree>
 8005c46:	4658      	mov	r0, fp
 8005c48:	9905      	ldr	r1, [sp, #20]
 8005c4a:	f001 fa6d 	bl	8007128 <_Bfree>
 8005c4e:	4658      	mov	r0, fp
 8005c50:	4621      	mov	r1, r4
 8005c52:	f001 fa69 	bl	8007128 <_Bfree>
 8005c56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c58:	b113      	cbz	r3, 8005c60 <_strtod_r+0xbc8>
 8005c5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	b11b      	cbz	r3, 8005c6c <_strtod_r+0xbd4>
 8005c64:	4640      	mov	r0, r8
 8005c66:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8005c6a:	e007      	b.n	8005c7c <_strtod_r+0xbe4>
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4649      	mov	r1, r9
 8005c70:	e004      	b.n	8005c7c <_strtod_r+0xbe4>
 8005c72:	2400      	movs	r4, #0
 8005c74:	9402      	str	r4, [sp, #8]
 8005c76:	2701      	movs	r7, #1
 8005c78:	f7ff bb31 	b.w	80052de <_strtod_r+0x246>
 8005c7c:	b01f      	add	sp, #124	; 0x7c
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
 8005c88:	ffc00000 	.word	0xffc00000
 8005c8c:	41dfffff 	.word	0x41dfffff
 8005c90:	94a03595 	.word	0x94a03595
 8005c94:	3fdfffff 	.word	0x3fdfffff
 8005c98:	35afe535 	.word	0x35afe535
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	94a03595 	.word	0x94a03595
 8005ca4:	3fcfffff 	.word	0x3fcfffff
 8005ca8:	3fe00000 	.word	0x3fe00000
 8005cac:	7fe00000 	.word	0x7fe00000
 8005cb0:	7c9fffff 	.word	0x7c9fffff
 8005cb4:	7fefffff 	.word	0x7fefffff
 8005cb8:	39500000 	.word	0x39500000
 8005cbc:	f3af 8000 	nop.w

08005cc0 <_strtol_r>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4c40      	ldr	r4, [pc, #256]	; (8005dc8 <_strtol_r+0x108>)
 8005cc6:	f8d4 9000 	ldr.w	r9, [r4]
 8005cca:	460f      	mov	r7, r1
 8005ccc:	463d      	mov	r5, r7
 8005cce:	f815 eb01 	ldrb.w	lr, [r5], #1
 8005cd2:	eb09 040e 	add.w	r4, r9, lr
 8005cd6:	7866      	ldrb	r6, [r4, #1]
 8005cd8:	f006 0408 	and.w	r4, r6, #8
 8005cdc:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8005ce0:	b10c      	cbz	r4, 8005ce6 <_strtol_r+0x26>
 8005ce2:	462f      	mov	r7, r5
 8005ce4:	e7f2      	b.n	8005ccc <_strtol_r+0xc>
 8005ce6:	4674      	mov	r4, lr
 8005ce8:	2c2d      	cmp	r4, #45	; 0x2d
 8005cea:	d103      	bne.n	8005cf4 <_strtol_r+0x34>
 8005cec:	1cbd      	adds	r5, r7, #2
 8005cee:	787c      	ldrb	r4, [r7, #1]
 8005cf0:	2601      	movs	r6, #1
 8005cf2:	e003      	b.n	8005cfc <_strtol_r+0x3c>
 8005cf4:	2c2b      	cmp	r4, #43	; 0x2b
 8005cf6:	bf04      	itt	eq
 8005cf8:	787c      	ldrbeq	r4, [r7, #1]
 8005cfa:	1cbd      	addeq	r5, r7, #2
 8005cfc:	b113      	cbz	r3, 8005d04 <_strtol_r+0x44>
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d10a      	bne.n	8005d18 <_strtol_r+0x58>
 8005d02:	e05a      	b.n	8005dba <_strtol_r+0xfa>
 8005d04:	2c30      	cmp	r4, #48	; 0x30
 8005d06:	d156      	bne.n	8005db6 <_strtol_r+0xf6>
 8005d08:	782c      	ldrb	r4, [r5, #0]
 8005d0a:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d0e:	2c58      	cmp	r4, #88	; 0x58
 8005d10:	d14c      	bne.n	8005dac <_strtol_r+0xec>
 8005d12:	786c      	ldrb	r4, [r5, #1]
 8005d14:	2310      	movs	r3, #16
 8005d16:	3502      	adds	r5, #2
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8005d20:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8005d24:	2700      	movs	r7, #0
 8005d26:	fbb8 faf3 	udiv	sl, r8, r3
 8005d2a:	46be      	mov	lr, r7
 8005d2c:	fb03 881a 	mls	r8, r3, sl, r8
 8005d30:	eb09 0c04 	add.w	ip, r9, r4
 8005d34:	f89c c001 	ldrb.w	ip, [ip, #1]
 8005d38:	f01c 0f04 	tst.w	ip, #4
 8005d3c:	d001      	beq.n	8005d42 <_strtol_r+0x82>
 8005d3e:	3c30      	subs	r4, #48	; 0x30
 8005d40:	e00b      	b.n	8005d5a <_strtol_r+0x9a>
 8005d42:	f01c 0c03 	ands.w	ip, ip, #3
 8005d46:	d01b      	beq.n	8005d80 <_strtol_r+0xc0>
 8005d48:	f1bc 0f01 	cmp.w	ip, #1
 8005d4c:	bf0c      	ite	eq
 8005d4e:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8005d52:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8005d56:	ebcc 0404 	rsb	r4, ip, r4
 8005d5a:	429c      	cmp	r4, r3
 8005d5c:	da10      	bge.n	8005d80 <_strtol_r+0xc0>
 8005d5e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005d62:	d00a      	beq.n	8005d7a <_strtol_r+0xba>
 8005d64:	45d6      	cmp	lr, sl
 8005d66:	d806      	bhi.n	8005d76 <_strtol_r+0xb6>
 8005d68:	d101      	bne.n	8005d6e <_strtol_r+0xae>
 8005d6a:	4544      	cmp	r4, r8
 8005d6c:	dc03      	bgt.n	8005d76 <_strtol_r+0xb6>
 8005d6e:	fb03 4e0e 	mla	lr, r3, lr, r4
 8005d72:	2701      	movs	r7, #1
 8005d74:	e001      	b.n	8005d7a <_strtol_r+0xba>
 8005d76:	f04f 37ff 	mov.w	r7, #4294967295
 8005d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d7e:	e7d7      	b.n	8005d30 <_strtol_r+0x70>
 8005d80:	1c7c      	adds	r4, r7, #1
 8005d82:	4673      	mov	r3, lr
 8005d84:	d10a      	bne.n	8005d9c <_strtol_r+0xdc>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	f04f 0122 	mov.w	r1, #34	; 0x22
 8005d8c:	bf14      	ite	ne
 8005d8e:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8005d92:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8005d96:	6001      	str	r1, [r0, #0]
 8005d98:	b92a      	cbnz	r2, 8005da6 <_strtol_r+0xe6>
 8005d9a:	e011      	b.n	8005dc0 <_strtol_r+0x100>
 8005d9c:	b10e      	cbz	r6, 8005da2 <_strtol_r+0xe2>
 8005d9e:	f1ce 0300 	rsb	r3, lr, #0
 8005da2:	b16a      	cbz	r2, 8005dc0 <_strtol_r+0x100>
 8005da4:	b107      	cbz	r7, 8005da8 <_strtol_r+0xe8>
 8005da6:	1e69      	subs	r1, r5, #1
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e009      	b.n	8005dc0 <_strtol_r+0x100>
 8005dac:	2430      	movs	r4, #48	; 0x30
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1b2      	bne.n	8005d18 <_strtol_r+0x58>
 8005db2:	2308      	movs	r3, #8
 8005db4:	e7b0      	b.n	8005d18 <_strtol_r+0x58>
 8005db6:	230a      	movs	r3, #10
 8005db8:	e7ae      	b.n	8005d18 <_strtol_r+0x58>
 8005dba:	2c30      	cmp	r4, #48	; 0x30
 8005dbc:	d1ac      	bne.n	8005d18 <_strtol_r+0x58>
 8005dbe:	e7a3      	b.n	8005d08 <_strtol_r+0x48>
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2000012c 	.word	0x2000012c

08005dcc <quorem>:
 8005dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	6903      	ldr	r3, [r0, #16]
 8005dd2:	690c      	ldr	r4, [r1, #16]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	f2c0 8081 	blt.w	8005ede <quorem+0x112>
 8005ddc:	3c01      	subs	r4, #1
 8005dde:	f101 0714 	add.w	r7, r1, #20
 8005de2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005de6:	f100 0614 	add.w	r6, r0, #20
 8005dea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005dee:	eb06 030e 	add.w	r3, r6, lr
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	3501      	adds	r5, #1
 8005df6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005dfa:	fbb3 f5f5 	udiv	r5, r3, r5
 8005dfe:	eb07 090e 	add.w	r9, r7, lr
 8005e02:	b3c5      	cbz	r5, 8005e76 <quorem+0xaa>
 8005e04:	f04f 0a00 	mov.w	sl, #0
 8005e08:	4638      	mov	r0, r7
 8005e0a:	46b4      	mov	ip, r6
 8005e0c:	46d3      	mov	fp, sl
 8005e0e:	f850 3b04 	ldr.w	r3, [r0], #4
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	fb02 a205 	mla	r2, r2, r5, sl
 8005e1a:	436b      	muls	r3, r5
 8005e1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005e20:	b292      	uxth	r2, r2
 8005e22:	ebc2 020b 	rsb	r2, r2, fp
 8005e26:	f8bc b000 	ldrh.w	fp, [ip]
 8005e2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e2e:	fa12 f28b 	uxtah	r2, r2, fp
 8005e32:	fa1f fb83 	uxth.w	fp, r3
 8005e36:	f8dc 3000 	ldr.w	r3, [ip]
 8005e3a:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8005e3e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005e42:	b292      	uxth	r2, r2
 8005e44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e48:	4548      	cmp	r0, r9
 8005e4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e4e:	f84c 2b04 	str.w	r2, [ip], #4
 8005e52:	d9dc      	bls.n	8005e0e <quorem+0x42>
 8005e54:	f856 300e 	ldr.w	r3, [r6, lr]
 8005e58:	b96b      	cbnz	r3, 8005e76 <quorem+0xaa>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	42b3      	cmp	r3, r6
 8005e60:	461a      	mov	r2, r3
 8005e62:	d802      	bhi.n	8005e6a <quorem+0x9e>
 8005e64:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e68:	e005      	b.n	8005e76 <quorem+0xaa>
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	d1f8      	bne.n	8005e64 <quorem+0x98>
 8005e72:	3c01      	subs	r4, #1
 8005e74:	e7f3      	b.n	8005e5e <quorem+0x92>
 8005e76:	4640      	mov	r0, r8
 8005e78:	f001 fb73 	bl	8007562 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	db2c      	blt.n	8005eda <quorem+0x10e>
 8005e80:	3501      	adds	r5, #1
 8005e82:	4630      	mov	r0, r6
 8005e84:	f04f 0e00 	mov.w	lr, #0
 8005e88:	f857 1b04 	ldr.w	r1, [r7], #4
 8005e8c:	f8d0 c000 	ldr.w	ip, [r0]
 8005e90:	b28a      	uxth	r2, r1
 8005e92:	ebc2 030e 	rsb	r3, r2, lr
 8005e96:	0c09      	lsrs	r1, r1, #16
 8005e98:	fa13 f38c 	uxtah	r3, r3, ip
 8005e9c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8005ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eaa:	454f      	cmp	r7, r9
 8005eac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005eb0:	f840 3b04 	str.w	r3, [r0], #4
 8005eb4:	d9e8      	bls.n	8005e88 <quorem+0xbc>
 8005eb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005eba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ebe:	b962      	cbnz	r2, 8005eda <quorem+0x10e>
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	42b3      	cmp	r3, r6
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	d802      	bhi.n	8005ece <quorem+0x102>
 8005ec8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ecc:	e005      	b.n	8005eda <quorem+0x10e>
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d1f8      	bne.n	8005ec8 <quorem+0xfc>
 8005ed6:	3c01      	subs	r4, #1
 8005ed8:	e7f3      	b.n	8005ec2 <quorem+0xf6>
 8005eda:	4628      	mov	r0, r5
 8005edc:	e000      	b.n	8005ee0 <quorem+0x114>
 8005ede:	2000      	movs	r0, #0
 8005ee0:	b003      	add	sp, #12
 8005ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005ee8 <_dtoa_r>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eee:	b097      	sub	sp, #92	; 0x5c
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8005ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ef8:	b945      	cbnz	r5, 8005f0c <_dtoa_r+0x24>
 8005efa:	2010      	movs	r0, #16
 8005efc:	f001 f8c8 	bl	8007090 <malloc>
 8005f00:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8005f04:	6045      	str	r5, [r0, #4]
 8005f06:	6085      	str	r5, [r0, #8]
 8005f08:	6005      	str	r5, [r0, #0]
 8005f0a:	60c5      	str	r5, [r0, #12]
 8005f0c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	b159      	cbz	r1, 8005f2c <_dtoa_r+0x44>
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	604a      	str	r2, [r1, #4]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4093      	lsls	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
 8005f1e:	4650      	mov	r0, sl
 8005f20:	f001 f902 	bl	8007128 <_Bfree>
 8005f24:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	4aa2      	ldr	r2, [pc, #648]	; (80061b8 <_dtoa_r+0x2d0>)
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfbf      	itttt	lt
 8005f34:	2301      	movlt	r3, #1
 8005f36:	6023      	strlt	r3, [r4, #0]
 8005f38:	9b03      	ldrlt	r3, [sp, #12]
 8005f3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	bfb8      	it	lt
 8005f40:	9303      	strlt	r3, [sp, #12]
 8005f42:	9f03      	ldr	r7, [sp, #12]
 8005f44:	bfa4      	itt	ge
 8005f46:	2300      	movge	r3, #0
 8005f48:	6023      	strge	r3, [r4, #0]
 8005f4a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8005f4e:	0d1b      	lsrs	r3, r3, #20
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d11d      	bne.n	8005f92 <_dtoa_r+0xaa>
 8005f56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f58:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	b943      	cbnz	r3, 8005f74 <_dtoa_r+0x8c>
 8005f62:	4a96      	ldr	r2, [pc, #600]	; (80061bc <_dtoa_r+0x2d4>)
 8005f64:	4b96      	ldr	r3, [pc, #600]	; (80061c0 <_dtoa_r+0x2d8>)
 8005f66:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	4618      	movne	r0, r3
 8005f70:	4610      	moveq	r0, r2
 8005f72:	e000      	b.n	8005f76 <_dtoa_r+0x8e>
 8005f74:	4892      	ldr	r0, [pc, #584]	; (80061c0 <_dtoa_r+0x2d8>)
 8005f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8573 	beq.w	8006a64 <_dtoa_r+0xb7c>
 8005f7e:	78c3      	ldrb	r3, [r0, #3]
 8005f80:	b113      	cbz	r3, 8005f88 <_dtoa_r+0xa0>
 8005f82:	f100 0308 	add.w	r3, r0, #8
 8005f86:	e000      	b.n	8005f8a <_dtoa_r+0xa2>
 8005f88:	1cc3      	adds	r3, r0, #3
 8005f8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	f000 bd69 	b.w	8006a64 <_dtoa_r+0xb7c>
 8005f92:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f7fe f8b7 	bl	8004110 <__aeabi_dcmpeq>
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	b158      	cbz	r0, 8005fbe <_dtoa_r+0xd6>
 8005fa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fa8:	2301      	movs	r3, #1
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8546 	beq.w	8006a40 <_dtoa_r+0xb58>
 8005fb4:	4883      	ldr	r0, [pc, #524]	; (80061c4 <_dtoa_r+0x2dc>)
 8005fb6:	6018      	str	r0, [r3, #0]
 8005fb8:	3801      	subs	r0, #1
 8005fba:	f000 bd53 	b.w	8006a64 <_dtoa_r+0xb7c>
 8005fbe:	ab15      	add	r3, sp, #84	; 0x54
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	ab14      	add	r3, sp, #80	; 0x50
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	4622      	mov	r2, r4
 8005fca:	462b      	mov	r3, r5
 8005fcc:	f001 fbb7 	bl	800773e <__d2b>
 8005fd0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fd4:	9007      	str	r0, [sp, #28]
 8005fd6:	b15e      	cbz	r6, 8005ff0 <_dtoa_r+0x108>
 8005fd8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fdc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005fe6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005fea:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005fee:	e01d      	b.n	800602c <_dtoa_r+0x144>
 8005ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ff2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005ff4:	441e      	add	r6, r3
 8005ff6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8005ffa:	429e      	cmp	r6, r3
 8005ffc:	bfad      	iteet	ge
 8005ffe:	9a02      	ldrge	r2, [sp, #8]
 8006000:	4b71      	ldrlt	r3, [pc, #452]	; (80061c8 <_dtoa_r+0x2e0>)
 8006002:	9a02      	ldrlt	r2, [sp, #8]
 8006004:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8006008:	bfa3      	ittte	ge
 800600a:	fa22 f003 	lsrge.w	r0, r2, r3
 800600e:	4b6f      	ldrge	r3, [pc, #444]	; (80061cc <_dtoa_r+0x2e4>)
 8006010:	1b9b      	subge	r3, r3, r6
 8006012:	1b9b      	sublt	r3, r3, r6
 8006014:	bfaa      	itet	ge
 8006016:	409f      	lslge	r7, r3
 8006018:	fa02 f003 	lsllt.w	r0, r2, r3
 800601c:	4338      	orrge	r0, r7
 800601e:	f7fd fd99 	bl	8003b54 <__aeabi_ui2d>
 8006022:	2301      	movs	r3, #1
 8006024:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006028:	3e01      	subs	r6, #1
 800602a:	9313      	str	r3, [sp, #76]	; 0x4c
 800602c:	2200      	movs	r2, #0
 800602e:	4b68      	ldr	r3, [pc, #416]	; (80061d0 <_dtoa_r+0x2e8>)
 8006030:	f7fd fc52 	bl	80038d8 <__aeabi_dsub>
 8006034:	a35a      	add	r3, pc, #360	; (adr r3, 80061a0 <_dtoa_r+0x2b8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fd fe01 	bl	8003c40 <__aeabi_dmul>
 800603e:	a35a      	add	r3, pc, #360	; (adr r3, 80061a8 <_dtoa_r+0x2c0>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fd fc4a 	bl	80038dc <__adddf3>
 8006048:	4604      	mov	r4, r0
 800604a:	4630      	mov	r0, r6
 800604c:	460d      	mov	r5, r1
 800604e:	f7fd fd91 	bl	8003b74 <__aeabi_i2d>
 8006052:	a357      	add	r3, pc, #348	; (adr r3, 80061b0 <_dtoa_r+0x2c8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fd fdf2 	bl	8003c40 <__aeabi_dmul>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4620      	mov	r0, r4
 8006062:	4629      	mov	r1, r5
 8006064:	f7fd fc3a 	bl	80038dc <__adddf3>
 8006068:	4604      	mov	r4, r0
 800606a:	460d      	mov	r5, r1
 800606c:	f7fe f882 	bl	8004174 <__aeabi_d2iz>
 8006070:	4629      	mov	r1, r5
 8006072:	4683      	mov	fp, r0
 8006074:	2200      	movs	r2, #0
 8006076:	4620      	mov	r0, r4
 8006078:	2300      	movs	r3, #0
 800607a:	f7fe f853 	bl	8004124 <__aeabi_dcmplt>
 800607e:	b158      	cbz	r0, 8006098 <_dtoa_r+0x1b0>
 8006080:	4658      	mov	r0, fp
 8006082:	f7fd fd77 	bl	8003b74 <__aeabi_i2d>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	f7fe f83f 	bl	8004110 <__aeabi_dcmpeq>
 8006092:	b908      	cbnz	r0, 8006098 <_dtoa_r+0x1b0>
 8006094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006098:	f1bb 0f16 	cmp.w	fp, #22
 800609c:	d80d      	bhi.n	80060ba <_dtoa_r+0x1d2>
 800609e:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <_dtoa_r+0x2ec>)
 80060a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060ac:	f7fe f858 	bl	8004160 <__aeabi_dcmpgt>
 80060b0:	b130      	cbz	r0, 80060c0 <_dtoa_r+0x1d8>
 80060b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <_dtoa_r+0x1d4>
 80060ba:	2301      	movs	r3, #1
 80060bc:	9312      	str	r3, [sp, #72]	; 0x48
 80060be:	e000      	b.n	80060c2 <_dtoa_r+0x1da>
 80060c0:	9012      	str	r0, [sp, #72]	; 0x48
 80060c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060c4:	1b9e      	subs	r6, r3, r6
 80060c6:	1e73      	subs	r3, r6, #1
 80060c8:	930a      	str	r3, [sp, #40]	; 0x28
 80060ca:	bf45      	ittet	mi
 80060cc:	425b      	negmi	r3, r3
 80060ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060d0:	2300      	movpl	r3, #0
 80060d2:	2300      	movmi	r3, #0
 80060d4:	bf4c      	ite	mi
 80060d6:	930a      	strmi	r3, [sp, #40]	; 0x28
 80060d8:	9309      	strpl	r3, [sp, #36]	; 0x24
 80060da:	f1bb 0f00 	cmp.w	fp, #0
 80060de:	db07      	blt.n	80060f0 <_dtoa_r+0x208>
 80060e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80060e6:	445b      	add	r3, fp
 80060e8:	930a      	str	r3, [sp, #40]	; 0x28
 80060ea:	2300      	movs	r3, #0
 80060ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ee:	e008      	b.n	8006102 <_dtoa_r+0x21a>
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	ebcb 0303 	rsb	r3, fp, r3
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	f1cb 0300 	rsb	r3, fp, #0
 80060fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80060fe:	2300      	movs	r3, #0
 8006100:	930d      	str	r3, [sp, #52]	; 0x34
 8006102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006104:	2b09      	cmp	r3, #9
 8006106:	d828      	bhi.n	800615a <_dtoa_r+0x272>
 8006108:	2b05      	cmp	r3, #5
 800610a:	bfc4      	itt	gt
 800610c:	3b04      	subgt	r3, #4
 800610e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006110:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006112:	f1a3 0302 	sub.w	r3, r3, #2
 8006116:	bfcc      	ite	gt
 8006118:	2500      	movgt	r5, #0
 800611a:	2501      	movle	r5, #1
 800611c:	2b03      	cmp	r3, #3
 800611e:	d821      	bhi.n	8006164 <_dtoa_r+0x27c>
 8006120:	e8df f003 	tbb	[pc, r3]
 8006124:	10040e02 	.word	0x10040e02
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <_dtoa_r+0x246>
 800612c:	2301      	movs	r3, #1
 800612e:	930c      	str	r3, [sp, #48]	; 0x30
 8006130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc20      	bgt.n	8006178 <_dtoa_r+0x290>
 8006136:	2301      	movs	r3, #1
 8006138:	9306      	str	r3, [sp, #24]
 800613a:	9305      	str	r3, [sp, #20]
 800613c:	461a      	mov	r2, r3
 800613e:	e019      	b.n	8006174 <_dtoa_r+0x28c>
 8006140:	2300      	movs	r3, #0
 8006142:	e000      	b.n	8006146 <_dtoa_r+0x25e>
 8006144:	2301      	movs	r3, #1
 8006146:	930c      	str	r3, [sp, #48]	; 0x30
 8006148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800614a:	445b      	add	r3, fp
 800614c:	9306      	str	r3, [sp, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	2b01      	cmp	r3, #1
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	bfb8      	it	lt
 8006156:	2301      	movlt	r3, #1
 8006158:	e011      	b.n	800617e <_dtoa_r+0x296>
 800615a:	2501      	movs	r5, #1
 800615c:	2300      	movs	r3, #0
 800615e:	9320      	str	r3, [sp, #128]	; 0x80
 8006160:	950c      	str	r5, [sp, #48]	; 0x30
 8006162:	e001      	b.n	8006168 <_dtoa_r+0x280>
 8006164:	2301      	movs	r3, #1
 8006166:	930c      	str	r3, [sp, #48]	; 0x30
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	9306      	str	r3, [sp, #24]
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	2200      	movs	r2, #0
 8006172:	2312      	movs	r3, #18
 8006174:	9221      	str	r2, [sp, #132]	; 0x84
 8006176:	e002      	b.n	800617e <_dtoa_r+0x296>
 8006178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800617a:	9306      	str	r3, [sp, #24]
 800617c:	9305      	str	r3, [sp, #20]
 800617e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	6062      	str	r2, [r4, #4]
 8006186:	2104      	movs	r1, #4
 8006188:	f101 0214 	add.w	r2, r1, #20
 800618c:	429a      	cmp	r2, r3
 800618e:	d823      	bhi.n	80061d8 <_dtoa_r+0x2f0>
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	3201      	adds	r2, #1
 8006194:	6062      	str	r2, [r4, #4]
 8006196:	0049      	lsls	r1, r1, #1
 8006198:	e7f6      	b.n	8006188 <_dtoa_r+0x2a0>
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w
 80061a0:	636f4361 	.word	0x636f4361
 80061a4:	3fd287a7 	.word	0x3fd287a7
 80061a8:	8b60c8b3 	.word	0x8b60c8b3
 80061ac:	3fc68a28 	.word	0x3fc68a28
 80061b0:	509f79fb 	.word	0x509f79fb
 80061b4:	3fd34413 	.word	0x3fd34413
 80061b8:	7ff00000 	.word	0x7ff00000
 80061bc:	08008655 	.word	0x08008655
 80061c0:	0800865e 	.word	0x0800865e
 80061c4:	080084db 	.word	0x080084db
 80061c8:	fffffbee 	.word	0xfffffbee
 80061cc:	fffffc0e 	.word	0xfffffc0e
 80061d0:	3ff80000 	.word	0x3ff80000
 80061d4:	08008670 	.word	0x08008670
 80061d8:	4650      	mov	r0, sl
 80061da:	6861      	ldr	r1, [r4, #4]
 80061dc:	f000 ff6f 	bl	80070be <_Balloc>
 80061e0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80061e4:	6020      	str	r0, [r4, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	9b05      	ldr	r3, [sp, #20]
 80061ec:	2b0e      	cmp	r3, #14
 80061ee:	f200 814b 	bhi.w	8006488 <_dtoa_r+0x5a0>
 80061f2:	2d00      	cmp	r5, #0
 80061f4:	f000 8148 	beq.w	8006488 <_dtoa_r+0x5a0>
 80061f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061fc:	f1bb 0f00 	cmp.w	fp, #0
 8006200:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006204:	dd31      	ble.n	800626a <_dtoa_r+0x382>
 8006206:	4ab3      	ldr	r2, [pc, #716]	; (80064d4 <_dtoa_r+0x5ec>)
 8006208:	f00b 030f 	and.w	r3, fp, #15
 800620c:	ea4f 172b 	mov.w	r7, fp, asr #4
 8006210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006214:	06f8      	lsls	r0, r7, #27
 8006216:	e9d3 4500 	ldrd	r4, r5, [r3]
 800621a:	d50c      	bpl.n	8006236 <_dtoa_r+0x34e>
 800621c:	4bae      	ldr	r3, [pc, #696]	; (80064d8 <_dtoa_r+0x5f0>)
 800621e:	ec51 0b17 	vmov	r0, r1, d7
 8006222:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006226:	f7fd fe35 	bl	8003e94 <__aeabi_ddiv>
 800622a:	f007 070f 	and.w	r7, r7, #15
 800622e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006232:	2603      	movs	r6, #3
 8006234:	e000      	b.n	8006238 <_dtoa_r+0x350>
 8006236:	2602      	movs	r6, #2
 8006238:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80064d8 <_dtoa_r+0x5f0>
 800623c:	b177      	cbz	r7, 800625c <_dtoa_r+0x374>
 800623e:	07f9      	lsls	r1, r7, #31
 8006240:	d508      	bpl.n	8006254 <_dtoa_r+0x36c>
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	e9d8 2300 	ldrd	r2, r3, [r8]
 800624a:	f7fd fcf9 	bl	8003c40 <__aeabi_dmul>
 800624e:	3601      	adds	r6, #1
 8006250:	4604      	mov	r4, r0
 8006252:	460d      	mov	r5, r1
 8006254:	107f      	asrs	r7, r7, #1
 8006256:	f108 0808 	add.w	r8, r8, #8
 800625a:	e7ef      	b.n	800623c <_dtoa_r+0x354>
 800625c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7fd fe16 	bl	8003e94 <__aeabi_ddiv>
 8006268:	e01b      	b.n	80062a2 <_dtoa_r+0x3ba>
 800626a:	f1cb 0400 	rsb	r4, fp, #0
 800626e:	b1dc      	cbz	r4, 80062a8 <_dtoa_r+0x3c0>
 8006270:	4b98      	ldr	r3, [pc, #608]	; (80064d4 <_dtoa_r+0x5ec>)
 8006272:	4d99      	ldr	r5, [pc, #612]	; (80064d8 <_dtoa_r+0x5f0>)
 8006274:	f004 020f 	and.w	r2, r4, #15
 8006278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800627c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f7fd fcdc 	bl	8003c40 <__aeabi_dmul>
 8006288:	1124      	asrs	r4, r4, #4
 800628a:	2602      	movs	r6, #2
 800628c:	b14c      	cbz	r4, 80062a2 <_dtoa_r+0x3ba>
 800628e:	07e2      	lsls	r2, r4, #31
 8006290:	d504      	bpl.n	800629c <_dtoa_r+0x3b4>
 8006292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006296:	3601      	adds	r6, #1
 8006298:	f7fd fcd2 	bl	8003c40 <__aeabi_dmul>
 800629c:	1064      	asrs	r4, r4, #1
 800629e:	3508      	adds	r5, #8
 80062a0:	e7f4      	b.n	800628c <_dtoa_r+0x3a4>
 80062a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062a6:	e000      	b.n	80062aa <_dtoa_r+0x3c2>
 80062a8:	2602      	movs	r6, #2
 80062aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ac:	b1db      	cbz	r3, 80062e6 <_dtoa_r+0x3fe>
 80062ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	4b88      	ldr	r3, [pc, #544]	; (80064dc <_dtoa_r+0x5f4>)
 80062ba:	f7fd ff33 	bl	8004124 <__aeabi_dcmplt>
 80062be:	b190      	cbz	r0, 80062e6 <_dtoa_r+0x3fe>
 80062c0:	9b05      	ldr	r3, [sp, #20]
 80062c2:	b183      	cbz	r3, 80062e6 <_dtoa_r+0x3fe>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f340 80da 	ble.w	8006480 <_dtoa_r+0x598>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4620      	mov	r0, r4
 80062d0:	2200      	movs	r2, #0
 80062d2:	4b83      	ldr	r3, [pc, #524]	; (80064e0 <_dtoa_r+0x5f8>)
 80062d4:	f7fd fcb4 	bl	8003c40 <__aeabi_dmul>
 80062d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80062dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e0:	3601      	adds	r6, #1
 80062e2:	9d06      	ldr	r5, [sp, #24]
 80062e4:	e001      	b.n	80062ea <_dtoa_r+0x402>
 80062e6:	9d05      	ldr	r5, [sp, #20]
 80062e8:	465f      	mov	r7, fp
 80062ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062ee:	4630      	mov	r0, r6
 80062f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80062f4:	f7fd fc3e 	bl	8003b74 <__aeabi_i2d>
 80062f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80062fc:	f7fd fca0 	bl	8003c40 <__aeabi_dmul>
 8006300:	2200      	movs	r2, #0
 8006302:	4b78      	ldr	r3, [pc, #480]	; (80064e4 <_dtoa_r+0x5fc>)
 8006304:	f7fd faea 	bl	80038dc <__adddf3>
 8006308:	4680      	mov	r8, r0
 800630a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800630e:	b9cd      	cbnz	r5, 8006344 <_dtoa_r+0x45c>
 8006310:	2200      	movs	r2, #0
 8006312:	4b75      	ldr	r3, [pc, #468]	; (80064e8 <_dtoa_r+0x600>)
 8006314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006318:	f7fd fade 	bl	80038d8 <__aeabi_dsub>
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006324:	f7fd ff1c 	bl	8004160 <__aeabi_dcmpgt>
 8006328:	2800      	cmp	r0, #0
 800632a:	f040 8246 	bne.w	80067ba <_dtoa_r+0x8d2>
 800632e:	4642      	mov	r2, r8
 8006330:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	f7fd fef4 	bl	8004124 <__aeabi_dcmplt>
 800633c:	2800      	cmp	r0, #0
 800633e:	f040 8236 	bne.w	80067ae <_dtoa_r+0x8c6>
 8006342:	e09d      	b.n	8006480 <_dtoa_r+0x598>
 8006344:	4b63      	ldr	r3, [pc, #396]	; (80064d4 <_dtoa_r+0x5ec>)
 8006346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006348:	1e6a      	subs	r2, r5, #1
 800634a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800634e:	2900      	cmp	r1, #0
 8006350:	d049      	beq.n	80063e6 <_dtoa_r+0x4fe>
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	2000      	movs	r0, #0
 8006358:	4964      	ldr	r1, [pc, #400]	; (80064ec <_dtoa_r+0x604>)
 800635a:	f7fd fd9b 	bl	8003e94 <__aeabi_ddiv>
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	f7fd fab9 	bl	80038d8 <__aeabi_dsub>
 8006366:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800636a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636e:	9c08      	ldr	r4, [sp, #32]
 8006370:	4649      	mov	r1, r9
 8006372:	4640      	mov	r0, r8
 8006374:	f7fd fefe 	bl	8004174 <__aeabi_d2iz>
 8006378:	4606      	mov	r6, r0
 800637a:	f7fd fbfb 	bl	8003b74 <__aeabi_i2d>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7fd faa7 	bl	80038d8 <__aeabi_dsub>
 800638a:	3630      	adds	r6, #48	; 0x30
 800638c:	f804 6b01 	strb.w	r6, [r4], #1
 8006390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006394:	4680      	mov	r8, r0
 8006396:	4689      	mov	r9, r1
 8006398:	f7fd fec4 	bl	8004124 <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f040 8340 	bne.w	8006a22 <_dtoa_r+0xb3a>
 80063a2:	4642      	mov	r2, r8
 80063a4:	464b      	mov	r3, r9
 80063a6:	2000      	movs	r0, #0
 80063a8:	494c      	ldr	r1, [pc, #304]	; (80064dc <_dtoa_r+0x5f4>)
 80063aa:	f7fd fa95 	bl	80038d8 <__aeabi_dsub>
 80063ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063b2:	f7fd feb7 	bl	8004124 <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f040 80d3 	bne.w	8006562 <_dtoa_r+0x67a>
 80063bc:	9b08      	ldr	r3, [sp, #32]
 80063be:	1ae3      	subs	r3, r4, r3
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	da5d      	bge.n	8006480 <_dtoa_r+0x598>
 80063c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <_dtoa_r+0x5f8>)
 80063cc:	f7fd fc38 	bl	8003c40 <__aeabi_dmul>
 80063d0:	2200      	movs	r2, #0
 80063d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d6:	4b42      	ldr	r3, [pc, #264]	; (80064e0 <_dtoa_r+0x5f8>)
 80063d8:	4640      	mov	r0, r8
 80063da:	4649      	mov	r1, r9
 80063dc:	f7fd fc30 	bl	8003c40 <__aeabi_dmul>
 80063e0:	4680      	mov	r8, r0
 80063e2:	4689      	mov	r9, r1
 80063e4:	e7c4      	b.n	8006370 <_dtoa_r+0x488>
 80063e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ea:	4642      	mov	r2, r8
 80063ec:	464b      	mov	r3, r9
 80063ee:	f7fd fc27 	bl	8003c40 <__aeabi_dmul>
 80063f2:	9b08      	ldr	r3, [sp, #32]
 80063f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80063fc:	195c      	adds	r4, r3, r5
 80063fe:	461d      	mov	r5, r3
 8006400:	4649      	mov	r1, r9
 8006402:	4640      	mov	r0, r8
 8006404:	f7fd feb6 	bl	8004174 <__aeabi_d2iz>
 8006408:	4606      	mov	r6, r0
 800640a:	f7fd fbb3 	bl	8003b74 <__aeabi_i2d>
 800640e:	3630      	adds	r6, #48	; 0x30
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4640      	mov	r0, r8
 8006416:	4649      	mov	r1, r9
 8006418:	f7fd fa5e 	bl	80038d8 <__aeabi_dsub>
 800641c:	f805 6b01 	strb.w	r6, [r5], #1
 8006420:	42a5      	cmp	r5, r4
 8006422:	4680      	mov	r8, r0
 8006424:	4689      	mov	r9, r1
 8006426:	d124      	bne.n	8006472 <_dtoa_r+0x58a>
 8006428:	2200      	movs	r2, #0
 800642a:	4b30      	ldr	r3, [pc, #192]	; (80064ec <_dtoa_r+0x604>)
 800642c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006430:	f7fd fa54 	bl	80038dc <__adddf3>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fd fe90 	bl	8004160 <__aeabi_dcmpgt>
 8006440:	2800      	cmp	r0, #0
 8006442:	f040 808e 	bne.w	8006562 <_dtoa_r+0x67a>
 8006446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800644a:	2000      	movs	r0, #0
 800644c:	4927      	ldr	r1, [pc, #156]	; (80064ec <_dtoa_r+0x604>)
 800644e:	f7fd fa43 	bl	80038d8 <__aeabi_dsub>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4640      	mov	r0, r8
 8006458:	4649      	mov	r1, r9
 800645a:	f7fd fe63 	bl	8004124 <__aeabi_dcmplt>
 800645e:	b178      	cbz	r0, 8006480 <_dtoa_r+0x598>
 8006460:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006464:	2b30      	cmp	r3, #48	; 0x30
 8006466:	f104 32ff 	add.w	r2, r4, #4294967295
 800646a:	f040 82da 	bne.w	8006a22 <_dtoa_r+0xb3a>
 800646e:	4614      	mov	r4, r2
 8006470:	e7f6      	b.n	8006460 <_dtoa_r+0x578>
 8006472:	2200      	movs	r2, #0
 8006474:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <_dtoa_r+0x5f8>)
 8006476:	f7fd fbe3 	bl	8003c40 <__aeabi_dmul>
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	e7bf      	b.n	8006400 <_dtoa_r+0x518>
 8006480:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800648a:	2b00      	cmp	r3, #0
 800648c:	f2c0 808b 	blt.w	80065a6 <_dtoa_r+0x6be>
 8006490:	f1bb 0f0e 	cmp.w	fp, #14
 8006494:	f300 8087 	bgt.w	80065a6 <_dtoa_r+0x6be>
 8006498:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <_dtoa_r+0x5ec>)
 800649a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800649e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da23      	bge.n	80064f0 <_dtoa_r+0x608>
 80064a8:	9b05      	ldr	r3, [sp, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dc20      	bgt.n	80064f0 <_dtoa_r+0x608>
 80064ae:	f040 817d 	bne.w	80067ac <_dtoa_r+0x8c4>
 80064b2:	4630      	mov	r0, r6
 80064b4:	2200      	movs	r2, #0
 80064b6:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <_dtoa_r+0x600>)
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fd fbc1 	bl	8003c40 <__aeabi_dmul>
 80064be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064c2:	f7fd fe43 	bl	800414c <__aeabi_dcmpge>
 80064c6:	9d05      	ldr	r5, [sp, #20]
 80064c8:	462e      	mov	r6, r5
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 8170 	bne.w	80067b0 <_dtoa_r+0x8c8>
 80064d0:	e175      	b.n	80067be <_dtoa_r+0x8d6>
 80064d2:	bf00      	nop
 80064d4:	08008670 	.word	0x08008670
 80064d8:	08008738 	.word	0x08008738
 80064dc:	3ff00000 	.word	0x3ff00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	401c0000 	.word	0x401c0000
 80064e8:	40140000 	.word	0x40140000
 80064ec:	3fe00000 	.word	0x3fe00000
 80064f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80064f4:	9c08      	ldr	r4, [sp, #32]
 80064f6:	4632      	mov	r2, r6
 80064f8:	463b      	mov	r3, r7
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7fd fcc9 	bl	8003e94 <__aeabi_ddiv>
 8006502:	f7fd fe37 	bl	8004174 <__aeabi_d2iz>
 8006506:	4605      	mov	r5, r0
 8006508:	f7fd fb34 	bl	8003b74 <__aeabi_i2d>
 800650c:	4632      	mov	r2, r6
 800650e:	463b      	mov	r3, r7
 8006510:	f7fd fb96 	bl	8003c40 <__aeabi_dmul>
 8006514:	460b      	mov	r3, r1
 8006516:	4602      	mov	r2, r0
 8006518:	4649      	mov	r1, r9
 800651a:	4640      	mov	r0, r8
 800651c:	f7fd f9dc 	bl	80038d8 <__aeabi_dsub>
 8006520:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006524:	9b08      	ldr	r3, [sp, #32]
 8006526:	f804 eb01 	strb.w	lr, [r4], #1
 800652a:	ebc3 0e04 	rsb	lr, r3, r4
 800652e:	9b05      	ldr	r3, [sp, #20]
 8006530:	459e      	cmp	lr, r3
 8006532:	d12b      	bne.n	800658c <_dtoa_r+0x6a4>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	f7fd f9d0 	bl	80038dc <__adddf3>
 800653c:	4632      	mov	r2, r6
 800653e:	463b      	mov	r3, r7
 8006540:	4680      	mov	r8, r0
 8006542:	4689      	mov	r9, r1
 8006544:	f7fd fe0c 	bl	8004160 <__aeabi_dcmpgt>
 8006548:	b970      	cbnz	r0, 8006568 <_dtoa_r+0x680>
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	4632      	mov	r2, r6
 8006550:	463b      	mov	r3, r7
 8006552:	f7fd fddd 	bl	8004110 <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	f000 8264 	beq.w	8006a24 <_dtoa_r+0xb3c>
 800655c:	07eb      	lsls	r3, r5, #31
 800655e:	d403      	bmi.n	8006568 <_dtoa_r+0x680>
 8006560:	e260      	b.n	8006a24 <_dtoa_r+0xb3c>
 8006562:	46bb      	mov	fp, r7
 8006564:	e000      	b.n	8006568 <_dtoa_r+0x680>
 8006566:	461c      	mov	r4, r3
 8006568:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800656c:	2a39      	cmp	r2, #57	; 0x39
 800656e:	f104 33ff 	add.w	r3, r4, #4294967295
 8006572:	d107      	bne.n	8006584 <_dtoa_r+0x69c>
 8006574:	9a08      	ldr	r2, [sp, #32]
 8006576:	4293      	cmp	r3, r2
 8006578:	d1f5      	bne.n	8006566 <_dtoa_r+0x67e>
 800657a:	2330      	movs	r3, #48	; 0x30
 800657c:	7013      	strb	r3, [r2, #0]
 800657e:	f10b 0b01 	add.w	fp, fp, #1
 8006582:	4613      	mov	r3, r2
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	3201      	adds	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e24b      	b.n	8006a24 <_dtoa_r+0xb3c>
 800658c:	2200      	movs	r2, #0
 800658e:	4ba4      	ldr	r3, [pc, #656]	; (8006820 <_dtoa_r+0x938>)
 8006590:	f7fd fb56 	bl	8003c40 <__aeabi_dmul>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4680      	mov	r8, r0
 800659a:	4689      	mov	r9, r1
 800659c:	f7fd fdb8 	bl	8004110 <__aeabi_dcmpeq>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0a8      	beq.n	80064f6 <_dtoa_r+0x60e>
 80065a4:	e23e      	b.n	8006a24 <_dtoa_r+0xb3c>
 80065a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d032      	beq.n	8006612 <_dtoa_r+0x72a>
 80065ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065ae:	2a01      	cmp	r2, #1
 80065b0:	dc0a      	bgt.n	80065c8 <_dtoa_r+0x6e0>
 80065b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065b4:	b112      	cbz	r2, 80065bc <_dtoa_r+0x6d4>
 80065b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065ba:	e002      	b.n	80065c2 <_dtoa_r+0x6da>
 80065bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80065c6:	e018      	b.n	80065fa <_dtoa_r+0x712>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	1e5d      	subs	r5, r3, #1
 80065cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ce:	42ab      	cmp	r3, r5
 80065d0:	bfbf      	itttt	lt
 80065d2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80065d4:	950b      	strlt	r5, [sp, #44]	; 0x2c
 80065d6:	1aea      	sublt	r2, r5, r3
 80065d8:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80065da:	bfb6      	itet	lt
 80065dc:	189b      	addlt	r3, r3, r2
 80065de:	1b5d      	subge	r5, r3, r5
 80065e0:	930d      	strlt	r3, [sp, #52]	; 0x34
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	bfb8      	it	lt
 80065e6:	2500      	movlt	r5, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb9      	ittee	lt
 80065ec:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 80065ee:	9a05      	ldrlt	r2, [sp, #20]
 80065f0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 80065f2:	9b05      	ldrge	r3, [sp, #20]
 80065f4:	bfbc      	itt	lt
 80065f6:	1a9c      	sublt	r4, r3, r2
 80065f8:	2300      	movlt	r3, #0
 80065fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065fc:	441a      	add	r2, r3
 80065fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006602:	4650      	mov	r0, sl
 8006604:	441a      	add	r2, r3
 8006606:	2101      	movs	r1, #1
 8006608:	920a      	str	r2, [sp, #40]	; 0x28
 800660a:	f000 fe6f 	bl	80072ec <__i2b>
 800660e:	4606      	mov	r6, r0
 8006610:	e002      	b.n	8006618 <_dtoa_r+0x730>
 8006612:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006614:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006616:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006618:	b164      	cbz	r4, 8006634 <_dtoa_r+0x74c>
 800661a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd09      	ble.n	8006634 <_dtoa_r+0x74c>
 8006620:	42a3      	cmp	r3, r4
 8006622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006624:	bfa8      	it	ge
 8006626:	4623      	movge	r3, r4
 8006628:	1ad2      	subs	r2, r2, r3
 800662a:	9209      	str	r2, [sp, #36]	; 0x24
 800662c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662e:	1ae4      	subs	r4, r4, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	930a      	str	r3, [sp, #40]	; 0x28
 8006634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd20      	ble.n	800667c <_dtoa_r+0x794>
 800663a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800663c:	b1c3      	cbz	r3, 8006670 <_dtoa_r+0x788>
 800663e:	2d00      	cmp	r5, #0
 8006640:	dd10      	ble.n	8006664 <_dtoa_r+0x77c>
 8006642:	4631      	mov	r1, r6
 8006644:	462a      	mov	r2, r5
 8006646:	4650      	mov	r0, sl
 8006648:	f000 feea 	bl	8007420 <__pow5mult>
 800664c:	4606      	mov	r6, r0
 800664e:	4631      	mov	r1, r6
 8006650:	9a07      	ldr	r2, [sp, #28]
 8006652:	4650      	mov	r0, sl
 8006654:	f000 fe53 	bl	80072fe <__multiply>
 8006658:	9907      	ldr	r1, [sp, #28]
 800665a:	4607      	mov	r7, r0
 800665c:	4650      	mov	r0, sl
 800665e:	f000 fd63 	bl	8007128 <_Bfree>
 8006662:	9707      	str	r7, [sp, #28]
 8006664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006666:	1b5a      	subs	r2, r3, r5
 8006668:	d008      	beq.n	800667c <_dtoa_r+0x794>
 800666a:	4650      	mov	r0, sl
 800666c:	9907      	ldr	r1, [sp, #28]
 800666e:	e002      	b.n	8006676 <_dtoa_r+0x78e>
 8006670:	9907      	ldr	r1, [sp, #28]
 8006672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006674:	4650      	mov	r0, sl
 8006676:	f000 fed3 	bl	8007420 <__pow5mult>
 800667a:	9007      	str	r0, [sp, #28]
 800667c:	4650      	mov	r0, sl
 800667e:	2101      	movs	r1, #1
 8006680:	f000 fe34 	bl	80072ec <__i2b>
 8006684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	4605      	mov	r5, r0
 800668a:	dd0a      	ble.n	80066a2 <_dtoa_r+0x7ba>
 800668c:	4629      	mov	r1, r5
 800668e:	461a      	mov	r2, r3
 8006690:	4650      	mov	r0, sl
 8006692:	f000 fec5 	bl	8007420 <__pow5mult>
 8006696:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006698:	2b01      	cmp	r3, #1
 800669a:	4605      	mov	r5, r0
 800669c:	dd04      	ble.n	80066a8 <_dtoa_r+0x7c0>
 800669e:	2700      	movs	r7, #0
 80066a0:	e01b      	b.n	80066da <_dtoa_r+0x7f2>
 80066a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	dc13      	bgt.n	80066d0 <_dtoa_r+0x7e8>
 80066a8:	9b02      	ldr	r3, [sp, #8]
 80066aa:	b98b      	cbnz	r3, 80066d0 <_dtoa_r+0x7e8>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b2:	b97b      	cbnz	r3, 80066d4 <_dtoa_r+0x7ec>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80066ba:	0d3f      	lsrs	r7, r7, #20
 80066bc:	053f      	lsls	r7, r7, #20
 80066be:	b157      	cbz	r7, 80066d6 <_dtoa_r+0x7ee>
 80066c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c2:	3301      	adds	r3, #1
 80066c4:	9309      	str	r3, [sp, #36]	; 0x24
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	3301      	adds	r3, #1
 80066ca:	930a      	str	r3, [sp, #40]	; 0x28
 80066cc:	2701      	movs	r7, #1
 80066ce:	e002      	b.n	80066d6 <_dtoa_r+0x7ee>
 80066d0:	2700      	movs	r7, #0
 80066d2:	e000      	b.n	80066d6 <_dtoa_r+0x7ee>
 80066d4:	9f02      	ldr	r7, [sp, #8]
 80066d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d8:	b143      	cbz	r3, 80066ec <_dtoa_r+0x804>
 80066da:	692b      	ldr	r3, [r5, #16]
 80066dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80066e0:	6918      	ldr	r0, [r3, #16]
 80066e2:	f000 fdb6 	bl	8007252 <__hi0bits>
 80066e6:	f1c0 0020 	rsb	r0, r0, #32
 80066ea:	e000      	b.n	80066ee <_dtoa_r+0x806>
 80066ec:	2001      	movs	r0, #1
 80066ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f0:	4418      	add	r0, r3
 80066f2:	f010 001f 	ands.w	r0, r0, #31
 80066f6:	d008      	beq.n	800670a <_dtoa_r+0x822>
 80066f8:	f1c0 0320 	rsb	r3, r0, #32
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	dd02      	ble.n	8006706 <_dtoa_r+0x81e>
 8006700:	f1c0 001c 	rsb	r0, r0, #28
 8006704:	e002      	b.n	800670c <_dtoa_r+0x824>
 8006706:	d008      	beq.n	800671a <_dtoa_r+0x832>
 8006708:	4618      	mov	r0, r3
 800670a:	301c      	adds	r0, #28
 800670c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670e:	4403      	add	r3, r0
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006714:	4403      	add	r3, r0
 8006716:	4404      	add	r4, r0
 8006718:	930a      	str	r3, [sp, #40]	; 0x28
 800671a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd05      	ble.n	800672c <_dtoa_r+0x844>
 8006720:	4650      	mov	r0, sl
 8006722:	9907      	ldr	r1, [sp, #28]
 8006724:	461a      	mov	r2, r3
 8006726:	f000 fec9 	bl	80074bc <__lshift>
 800672a:	9007      	str	r0, [sp, #28]
 800672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd05      	ble.n	800673e <_dtoa_r+0x856>
 8006732:	4629      	mov	r1, r5
 8006734:	4650      	mov	r0, sl
 8006736:	461a      	mov	r2, r3
 8006738:	f000 fec0 	bl	80074bc <__lshift>
 800673c:	4605      	mov	r5, r0
 800673e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006740:	b1eb      	cbz	r3, 800677e <_dtoa_r+0x896>
 8006742:	9807      	ldr	r0, [sp, #28]
 8006744:	4629      	mov	r1, r5
 8006746:	f000 ff0c 	bl	8007562 <__mcmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	da17      	bge.n	800677e <_dtoa_r+0x896>
 800674e:	2300      	movs	r3, #0
 8006750:	4650      	mov	r0, sl
 8006752:	9907      	ldr	r1, [sp, #28]
 8006754:	220a      	movs	r2, #10
 8006756:	f000 fcfe 	bl	8007156 <__multadd>
 800675a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800675c:	9007      	str	r0, [sp, #28]
 800675e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8170 	beq.w	8006a48 <_dtoa_r+0xb60>
 8006768:	4631      	mov	r1, r6
 800676a:	2300      	movs	r3, #0
 800676c:	4650      	mov	r0, sl
 800676e:	220a      	movs	r2, #10
 8006770:	f000 fcf1 	bl	8007156 <__multadd>
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	4606      	mov	r6, r0
 800677a:	dc33      	bgt.n	80067e4 <_dtoa_r+0x8fc>
 800677c:	e16d      	b.n	8006a5a <_dtoa_r+0xb72>
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	dc26      	bgt.n	80067d2 <_dtoa_r+0x8ea>
 8006784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006786:	2b02      	cmp	r3, #2
 8006788:	dd23      	ble.n	80067d2 <_dtoa_r+0x8ea>
 800678a:	9b05      	ldr	r3, [sp, #20]
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	b973      	cbnz	r3, 80067b0 <_dtoa_r+0x8c8>
 8006792:	4629      	mov	r1, r5
 8006794:	2205      	movs	r2, #5
 8006796:	4650      	mov	r0, sl
 8006798:	f000 fcdd 	bl	8007156 <__multadd>
 800679c:	4605      	mov	r5, r0
 800679e:	4629      	mov	r1, r5
 80067a0:	9807      	ldr	r0, [sp, #28]
 80067a2:	f000 fede 	bl	8007562 <__mcmp>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	dc09      	bgt.n	80067be <_dtoa_r+0x8d6>
 80067aa:	e001      	b.n	80067b0 <_dtoa_r+0x8c8>
 80067ac:	2500      	movs	r5, #0
 80067ae:	462e      	mov	r6, r5
 80067b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067b2:	9c08      	ldr	r4, [sp, #32]
 80067b4:	ea6f 0b03 	mvn.w	fp, r3
 80067b8:	e008      	b.n	80067cc <_dtoa_r+0x8e4>
 80067ba:	46bb      	mov	fp, r7
 80067bc:	462e      	mov	r6, r5
 80067be:	9b08      	ldr	r3, [sp, #32]
 80067c0:	9a08      	ldr	r2, [sp, #32]
 80067c2:	1c5c      	adds	r4, r3, #1
 80067c4:	2331      	movs	r3, #49	; 0x31
 80067c6:	7013      	strb	r3, [r2, #0]
 80067c8:	f10b 0b01 	add.w	fp, fp, #1
 80067cc:	46b1      	mov	r9, r6
 80067ce:	2600      	movs	r6, #0
 80067d0:	e114      	b.n	80069fc <_dtoa_r+0xb14>
 80067d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d4:	b923      	cbnz	r3, 80067e0 <_dtoa_r+0x8f8>
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	9306      	str	r3, [sp, #24]
 80067da:	9f08      	ldr	r7, [sp, #32]
 80067dc:	9c07      	ldr	r4, [sp, #28]
 80067de:	e0cc      	b.n	800697a <_dtoa_r+0xa92>
 80067e0:	9b05      	ldr	r3, [sp, #20]
 80067e2:	9306      	str	r3, [sp, #24]
 80067e4:	2c00      	cmp	r4, #0
 80067e6:	dd05      	ble.n	80067f4 <_dtoa_r+0x90c>
 80067e8:	4631      	mov	r1, r6
 80067ea:	4650      	mov	r0, sl
 80067ec:	4622      	mov	r2, r4
 80067ee:	f000 fe65 	bl	80074bc <__lshift>
 80067f2:	4606      	mov	r6, r0
 80067f4:	b1b7      	cbz	r7, 8006824 <_dtoa_r+0x93c>
 80067f6:	6871      	ldr	r1, [r6, #4]
 80067f8:	4650      	mov	r0, sl
 80067fa:	f000 fc60 	bl	80070be <_Balloc>
 80067fe:	6932      	ldr	r2, [r6, #16]
 8006800:	3202      	adds	r2, #2
 8006802:	4604      	mov	r4, r0
 8006804:	f106 010c 	add.w	r1, r6, #12
 8006808:	0092      	lsls	r2, r2, #2
 800680a:	300c      	adds	r0, #12
 800680c:	f7fd fd56 	bl	80042bc <memcpy>
 8006810:	4650      	mov	r0, sl
 8006812:	4621      	mov	r1, r4
 8006814:	2201      	movs	r2, #1
 8006816:	f000 fe51 	bl	80074bc <__lshift>
 800681a:	4681      	mov	r9, r0
 800681c:	e003      	b.n	8006826 <_dtoa_r+0x93e>
 800681e:	bf00      	nop
 8006820:	40240000 	.word	0x40240000
 8006824:	46b1      	mov	r9, r6
 8006826:	9f08      	ldr	r7, [sp, #32]
 8006828:	9c07      	ldr	r4, [sp, #28]
 800682a:	4629      	mov	r1, r5
 800682c:	4620      	mov	r0, r4
 800682e:	f7ff facd 	bl	8005dcc <quorem>
 8006832:	4631      	mov	r1, r6
 8006834:	9009      	str	r0, [sp, #36]	; 0x24
 8006836:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fe91 	bl	8007562 <__mcmp>
 8006840:	464a      	mov	r2, r9
 8006842:	9005      	str	r0, [sp, #20]
 8006844:	4629      	mov	r1, r5
 8006846:	4650      	mov	r0, sl
 8006848:	f000 fea7 	bl	800759a <__mdiff>
 800684c:	68c2      	ldr	r2, [r0, #12]
 800684e:	4603      	mov	r3, r0
 8006850:	b93a      	cbnz	r2, 8006862 <_dtoa_r+0x97a>
 8006852:	4619      	mov	r1, r3
 8006854:	4620      	mov	r0, r4
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f000 fe83 	bl	8007562 <__mcmp>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	4602      	mov	r2, r0
 8006860:	e000      	b.n	8006864 <_dtoa_r+0x97c>
 8006862:	2201      	movs	r2, #1
 8006864:	4650      	mov	r0, sl
 8006866:	4619      	mov	r1, r3
 8006868:	9207      	str	r2, [sp, #28]
 800686a:	f000 fc5d 	bl	8007128 <_Bfree>
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	b9a2      	cbnz	r2, 800689c <_dtoa_r+0x9b4>
 8006872:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006874:	b993      	cbnz	r3, 800689c <_dtoa_r+0x9b4>
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	b973      	cbnz	r3, 800689c <_dtoa_r+0x9b4>
 800687e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006882:	463b      	mov	r3, r7
 8006884:	9407      	str	r4, [sp, #28]
 8006886:	d040      	beq.n	800690a <_dtoa_r+0xa22>
 8006888:	9b05      	ldr	r3, [sp, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfc8      	it	gt
 800688e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8006890:	f107 0401 	add.w	r4, r7, #1
 8006894:	bfc8      	it	gt
 8006896:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 800689a:	e03d      	b.n	8006918 <_dtoa_r+0xa30>
 800689c:	9b05      	ldr	r3, [sp, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da04      	bge.n	80068ac <_dtoa_r+0x9c4>
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	46c4      	mov	ip, r8
 80068a6:	9407      	str	r4, [sp, #28]
 80068a8:	dc08      	bgt.n	80068bc <_dtoa_r+0x9d4>
 80068aa:	e021      	b.n	80068f0 <_dtoa_r+0xa08>
 80068ac:	d124      	bne.n	80068f8 <_dtoa_r+0xa10>
 80068ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068b0:	bb13      	cbnz	r3, 80068f8 <_dtoa_r+0xa10>
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	b9f3      	cbnz	r3, 80068f8 <_dtoa_r+0xa10>
 80068ba:	e7f2      	b.n	80068a2 <_dtoa_r+0x9ba>
 80068bc:	4621      	mov	r1, r4
 80068be:	2201      	movs	r2, #1
 80068c0:	4650      	mov	r0, sl
 80068c2:	9705      	str	r7, [sp, #20]
 80068c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80068c8:	f000 fdf8 	bl	80074bc <__lshift>
 80068cc:	4629      	mov	r1, r5
 80068ce:	9007      	str	r0, [sp, #28]
 80068d0:	f000 fe47 	bl	8007562 <__mcmp>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f8dd c008 	ldr.w	ip, [sp, #8]
 80068da:	9b05      	ldr	r3, [sp, #20]
 80068dc:	dc03      	bgt.n	80068e6 <_dtoa_r+0x9fe>
 80068de:	d107      	bne.n	80068f0 <_dtoa_r+0xa08>
 80068e0:	f018 0f01 	tst.w	r8, #1
 80068e4:	d004      	beq.n	80068f0 <_dtoa_r+0xa08>
 80068e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068ea:	d00e      	beq.n	800690a <_dtoa_r+0xa22>
 80068ec:	f108 0c01 	add.w	ip, r8, #1
 80068f0:	1c7c      	adds	r4, r7, #1
 80068f2:	f887 c000 	strb.w	ip, [r7]
 80068f6:	e081      	b.n	80069fc <_dtoa_r+0xb14>
 80068f8:	2a00      	cmp	r2, #0
 80068fa:	f107 0201 	add.w	r2, r7, #1
 80068fe:	dd0e      	ble.n	800691e <_dtoa_r+0xa36>
 8006900:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006904:	463b      	mov	r3, r7
 8006906:	9407      	str	r4, [sp, #28]
 8006908:	d103      	bne.n	8006912 <_dtoa_r+0xa2a>
 800690a:	2239      	movs	r2, #57	; 0x39
 800690c:	3701      	adds	r7, #1
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e057      	b.n	80069c2 <_dtoa_r+0xada>
 8006912:	4614      	mov	r4, r2
 8006914:	f108 0801 	add.w	r8, r8, #1
 8006918:	f887 8000 	strb.w	r8, [r7]
 800691c:	e06e      	b.n	80069fc <_dtoa_r+0xb14>
 800691e:	9b08      	ldr	r3, [sp, #32]
 8006920:	f802 8c01 	strb.w	r8, [r2, #-1]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	4617      	mov	r7, r2
 8006928:	9a06      	ldr	r2, [sp, #24]
 800692a:	4293      	cmp	r3, r2
 800692c:	d03a      	beq.n	80069a4 <_dtoa_r+0xabc>
 800692e:	4621      	mov	r1, r4
 8006930:	220a      	movs	r2, #10
 8006932:	2300      	movs	r3, #0
 8006934:	4650      	mov	r0, sl
 8006936:	f000 fc0e 	bl	8007156 <__multadd>
 800693a:	454e      	cmp	r6, r9
 800693c:	4604      	mov	r4, r0
 800693e:	4631      	mov	r1, r6
 8006940:	4650      	mov	r0, sl
 8006942:	f04f 020a 	mov.w	r2, #10
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	d104      	bne.n	8006956 <_dtoa_r+0xa6e>
 800694c:	f000 fc03 	bl	8007156 <__multadd>
 8006950:	4606      	mov	r6, r0
 8006952:	4681      	mov	r9, r0
 8006954:	e769      	b.n	800682a <_dtoa_r+0x942>
 8006956:	f000 fbfe 	bl	8007156 <__multadd>
 800695a:	4649      	mov	r1, r9
 800695c:	4606      	mov	r6, r0
 800695e:	220a      	movs	r2, #10
 8006960:	4650      	mov	r0, sl
 8006962:	2300      	movs	r3, #0
 8006964:	f000 fbf7 	bl	8007156 <__multadd>
 8006968:	4681      	mov	r9, r0
 800696a:	e75e      	b.n	800682a <_dtoa_r+0x942>
 800696c:	4621      	mov	r1, r4
 800696e:	4650      	mov	r0, sl
 8006970:	220a      	movs	r2, #10
 8006972:	2300      	movs	r3, #0
 8006974:	f000 fbef 	bl	8007156 <__multadd>
 8006978:	4604      	mov	r4, r0
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7ff fa25 	bl	8005dcc <quorem>
 8006982:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006986:	f807 8b01 	strb.w	r8, [r7], #1
 800698a:	9b08      	ldr	r3, [sp, #32]
 800698c:	9a06      	ldr	r2, [sp, #24]
 800698e:	1afb      	subs	r3, r7, r3
 8006990:	4293      	cmp	r3, r2
 8006992:	dbeb      	blt.n	800696c <_dtoa_r+0xa84>
 8006994:	9b08      	ldr	r3, [sp, #32]
 8006996:	2a01      	cmp	r2, #1
 8006998:	bfac      	ite	ge
 800699a:	189b      	addge	r3, r3, r2
 800699c:	3301      	addlt	r3, #1
 800699e:	46b1      	mov	r9, r6
 80069a0:	461f      	mov	r7, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	4621      	mov	r1, r4
 80069a6:	2201      	movs	r2, #1
 80069a8:	4650      	mov	r0, sl
 80069aa:	f000 fd87 	bl	80074bc <__lshift>
 80069ae:	4629      	mov	r1, r5
 80069b0:	9007      	str	r0, [sp, #28]
 80069b2:	f000 fdd6 	bl	8007562 <__mcmp>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	dc03      	bgt.n	80069c2 <_dtoa_r+0xada>
 80069ba:	d116      	bne.n	80069ea <_dtoa_r+0xb02>
 80069bc:	f018 0f01 	tst.w	r8, #1
 80069c0:	d013      	beq.n	80069ea <_dtoa_r+0xb02>
 80069c2:	463c      	mov	r4, r7
 80069c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80069c8:	2b39      	cmp	r3, #57	; 0x39
 80069ca:	f104 32ff 	add.w	r2, r4, #4294967295
 80069ce:	d109      	bne.n	80069e4 <_dtoa_r+0xafc>
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d104      	bne.n	80069e0 <_dtoa_r+0xaf8>
 80069d6:	f10b 0b01 	add.w	fp, fp, #1
 80069da:	2331      	movs	r3, #49	; 0x31
 80069dc:	9a08      	ldr	r2, [sp, #32]
 80069de:	e002      	b.n	80069e6 <_dtoa_r+0xafe>
 80069e0:	4614      	mov	r4, r2
 80069e2:	e7ef      	b.n	80069c4 <_dtoa_r+0xadc>
 80069e4:	3301      	adds	r3, #1
 80069e6:	7013      	strb	r3, [r2, #0]
 80069e8:	e008      	b.n	80069fc <_dtoa_r+0xb14>
 80069ea:	463c      	mov	r4, r7
 80069ec:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	f104 32ff 	add.w	r2, r4, #4294967295
 80069f6:	d101      	bne.n	80069fc <_dtoa_r+0xb14>
 80069f8:	4614      	mov	r4, r2
 80069fa:	e7f7      	b.n	80069ec <_dtoa_r+0xb04>
 80069fc:	4650      	mov	r0, sl
 80069fe:	4629      	mov	r1, r5
 8006a00:	f000 fb92 	bl	8007128 <_Bfree>
 8006a04:	f1b9 0f00 	cmp.w	r9, #0
 8006a08:	d00c      	beq.n	8006a24 <_dtoa_r+0xb3c>
 8006a0a:	b12e      	cbz	r6, 8006a18 <_dtoa_r+0xb30>
 8006a0c:	454e      	cmp	r6, r9
 8006a0e:	d003      	beq.n	8006a18 <_dtoa_r+0xb30>
 8006a10:	4650      	mov	r0, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	f000 fb88 	bl	8007128 <_Bfree>
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f000 fb84 	bl	8007128 <_Bfree>
 8006a20:	e000      	b.n	8006a24 <_dtoa_r+0xb3c>
 8006a22:	46bb      	mov	fp, r7
 8006a24:	4650      	mov	r0, sl
 8006a26:	9907      	ldr	r1, [sp, #28]
 8006a28:	f000 fb7e 	bl	8007128 <_Bfree>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a30:	7023      	strb	r3, [r4, #0]
 8006a32:	f10b 0301 	add.w	r3, fp, #1
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a3a:	b11b      	cbz	r3, 8006a44 <_dtoa_r+0xb5c>
 8006a3c:	601c      	str	r4, [r3, #0]
 8006a3e:	e001      	b.n	8006a44 <_dtoa_r+0xb5c>
 8006a40:	480a      	ldr	r0, [pc, #40]	; (8006a6c <_dtoa_r+0xb84>)
 8006a42:	e00f      	b.n	8006a64 <_dtoa_r+0xb7c>
 8006a44:	9808      	ldr	r0, [sp, #32]
 8006a46:	e00d      	b.n	8006a64 <_dtoa_r+0xb7c>
 8006a48:	9b06      	ldr	r3, [sp, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f73f aec5 	bgt.w	80067da <_dtoa_r+0x8f2>
 8006a50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	f73f ae9b 	bgt.w	800678e <_dtoa_r+0x8a6>
 8006a58:	e6bf      	b.n	80067da <_dtoa_r+0x8f2>
 8006a5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f73f ae96 	bgt.w	800678e <_dtoa_r+0x8a6>
 8006a62:	e6bf      	b.n	80067e4 <_dtoa_r+0x8fc>
 8006a64:	b017      	add	sp, #92	; 0x5c
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6a:	bf00      	nop
 8006a6c:	080084da 	.word	0x080084da

08006a70 <rshift>:
 8006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a72:	6906      	ldr	r6, [r0, #16]
 8006a74:	114b      	asrs	r3, r1, #5
 8006a76:	42b3      	cmp	r3, r6
 8006a78:	f100 0514 	add.w	r5, r0, #20
 8006a7c:	da27      	bge.n	8006ace <rshift+0x5e>
 8006a7e:	f011 011f 	ands.w	r1, r1, #31
 8006a82:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8006a86:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8006a8a:	d101      	bne.n	8006a90 <rshift+0x20>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	e016      	b.n	8006abe <rshift+0x4e>
 8006a90:	1d14      	adds	r4, r2, #4
 8006a92:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8006a96:	f1c1 0e20 	rsb	lr, r1, #32
 8006a9a:	40ca      	lsrs	r2, r1
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	42b4      	cmp	r4, r6
 8006aa0:	d209      	bcs.n	8006ab6 <rshift+0x46>
 8006aa2:	6827      	ldr	r7, [r4, #0]
 8006aa4:	fa07 f70e 	lsl.w	r7, r7, lr
 8006aa8:	433a      	orrs	r2, r7
 8006aaa:	f843 2b04 	str.w	r2, [r3], #4
 8006aae:	f854 2b04 	ldr.w	r2, [r4], #4
 8006ab2:	40ca      	lsrs	r2, r1
 8006ab4:	e7f3      	b.n	8006a9e <rshift+0x2e>
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	b152      	cbz	r2, 8006ad0 <rshift+0x60>
 8006aba:	3304      	adds	r3, #4
 8006abc:	e008      	b.n	8006ad0 <rshift+0x60>
 8006abe:	42b2      	cmp	r2, r6
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	d205      	bcs.n	8006ad0 <rshift+0x60>
 8006ac4:	f852 3b04 	ldr.w	r3, [r2], #4
 8006ac8:	f841 3b04 	str.w	r3, [r1], #4
 8006acc:	e7f7      	b.n	8006abe <rshift+0x4e>
 8006ace:	462b      	mov	r3, r5
 8006ad0:	1b5b      	subs	r3, r3, r5
 8006ad2:	109b      	asrs	r3, r3, #2
 8006ad4:	6103      	str	r3, [r0, #16]
 8006ad6:	b903      	cbnz	r3, 8006ada <rshift+0x6a>
 8006ad8:	6143      	str	r3, [r0, #20]
 8006ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006adc <__hexdig_fun>:
 8006adc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ae0:	2b09      	cmp	r3, #9
 8006ae2:	d801      	bhi.n	8006ae8 <__hexdig_fun+0xc>
 8006ae4:	3820      	subs	r0, #32
 8006ae6:	e00a      	b.n	8006afe <__hexdig_fun+0x22>
 8006ae8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006aec:	2b05      	cmp	r3, #5
 8006aee:	d801      	bhi.n	8006af4 <__hexdig_fun+0x18>
 8006af0:	3847      	subs	r0, #71	; 0x47
 8006af2:	e004      	b.n	8006afe <__hexdig_fun+0x22>
 8006af4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d802      	bhi.n	8006b02 <__hexdig_fun+0x26>
 8006afc:	3827      	subs	r0, #39	; 0x27
 8006afe:	b2c0      	uxtb	r0, r0
 8006b00:	4770      	bx	lr
 8006b02:	2000      	movs	r0, #0
 8006b04:	4770      	bx	lr

08006b06 <__gethex>:
 8006b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	468a      	mov	sl, r1
 8006b0e:	4691      	mov	r9, r2
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	9001      	str	r0, [sp, #4]
 8006b14:	f000 fab8 	bl	8007088 <_localeconv_r>
 8006b18:	6803      	ldr	r3, [r0, #0]
 8006b1a:	9302      	str	r3, [sp, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fa7d 	bl	800501c <strlen>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	9000      	str	r0, [sp, #0]
 8006b26:	4403      	add	r3, r0
 8006b28:	2600      	movs	r6, #0
 8006b2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	f8da 3000 	ldr.w	r3, [sl]
 8006b34:	3302      	adds	r3, #2
 8006b36:	4698      	mov	r8, r3
 8006b38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b3c:	2830      	cmp	r0, #48	; 0x30
 8006b3e:	d101      	bne.n	8006b44 <__gethex+0x3e>
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f8      	b.n	8006b36 <__gethex+0x30>
 8006b44:	f7ff ffca 	bl	8006adc <__hexdig_fun>
 8006b48:	4604      	mov	r4, r0
 8006b4a:	b9e8      	cbnz	r0, 8006b88 <__gethex+0x82>
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	9902      	ldr	r1, [sp, #8]
 8006b50:	9a00      	ldr	r2, [sp, #0]
 8006b52:	f001 f8af 	bl	8007cb4 <strncmp>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d137      	bne.n	8006bca <__gethex+0xc4>
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	f818 0003 	ldrb.w	r0, [r8, r3]
 8006b60:	eb08 0703 	add.w	r7, r8, r3
 8006b64:	f7ff ffba 	bl	8006adc <__hexdig_fun>
 8006b68:	b388      	cbz	r0, 8006bce <__gethex+0xc8>
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	7818      	ldrb	r0, [r3, #0]
 8006b6e:	2830      	cmp	r0, #48	; 0x30
 8006b70:	4698      	mov	r8, r3
 8006b72:	f103 0301 	add.w	r3, r3, #1
 8006b76:	d0f9      	beq.n	8006b6c <__gethex+0x66>
 8006b78:	f7ff ffb0 	bl	8006adc <__hexdig_fun>
 8006b7c:	463c      	mov	r4, r7
 8006b7e:	fab0 f580 	clz	r5, r0
 8006b82:	2601      	movs	r6, #1
 8006b84:	096d      	lsrs	r5, r5, #5
 8006b86:	e001      	b.n	8006b8c <__gethex+0x86>
 8006b88:	2500      	movs	r5, #0
 8006b8a:	462c      	mov	r4, r5
 8006b8c:	46c3      	mov	fp, r8
 8006b8e:	465f      	mov	r7, fp
 8006b90:	f10b 0b01 	add.w	fp, fp, #1
 8006b94:	7838      	ldrb	r0, [r7, #0]
 8006b96:	f7ff ffa1 	bl	8006adc <__hexdig_fun>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d1f7      	bne.n	8006b8e <__gethex+0x88>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	9902      	ldr	r1, [sp, #8]
 8006ba2:	9a00      	ldr	r2, [sp, #0]
 8006ba4:	f001 f886 	bl	8007cb4 <strncmp>
 8006ba8:	b958      	cbnz	r0, 8006bc2 <__gethex+0xbc>
 8006baa:	b95c      	cbnz	r4, 8006bc4 <__gethex+0xbe>
 8006bac:	9b00      	ldr	r3, [sp, #0]
 8006bae:	18fc      	adds	r4, r7, r3
 8006bb0:	46a3      	mov	fp, r4
 8006bb2:	465f      	mov	r7, fp
 8006bb4:	f10b 0b01 	add.w	fp, fp, #1
 8006bb8:	7838      	ldrb	r0, [r7, #0]
 8006bba:	f7ff ff8f 	bl	8006adc <__hexdig_fun>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1f7      	bne.n	8006bb2 <__gethex+0xac>
 8006bc2:	b134      	cbz	r4, 8006bd2 <__gethex+0xcc>
 8006bc4:	1be4      	subs	r4, r4, r7
 8006bc6:	00a4      	lsls	r4, r4, #2
 8006bc8:	e003      	b.n	8006bd2 <__gethex+0xcc>
 8006bca:	4647      	mov	r7, r8
 8006bcc:	e000      	b.n	8006bd0 <__gethex+0xca>
 8006bce:	4604      	mov	r4, r0
 8006bd0:	2501      	movs	r5, #1
 8006bd2:	783b      	ldrb	r3, [r7, #0]
 8006bd4:	2b50      	cmp	r3, #80	; 0x50
 8006bd6:	d001      	beq.n	8006bdc <__gethex+0xd6>
 8006bd8:	2b70      	cmp	r3, #112	; 0x70
 8006bda:	d130      	bne.n	8006c3e <__gethex+0x138>
 8006bdc:	787b      	ldrb	r3, [r7, #1]
 8006bde:	2b2b      	cmp	r3, #43	; 0x2b
 8006be0:	d006      	beq.n	8006bf0 <__gethex+0xea>
 8006be2:	2b2d      	cmp	r3, #45	; 0x2d
 8006be4:	d002      	beq.n	8006bec <__gethex+0xe6>
 8006be6:	1c7a      	adds	r2, r7, #1
 8006be8:	2300      	movs	r3, #0
 8006bea:	e003      	b.n	8006bf4 <__gethex+0xee>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <__gethex+0xec>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	1cba      	adds	r2, r7, #2
 8006bf4:	7810      	ldrb	r0, [r2, #0]
 8006bf6:	9306      	str	r3, [sp, #24]
 8006bf8:	9203      	str	r2, [sp, #12]
 8006bfa:	f7ff ff6f 	bl	8006adc <__hexdig_fun>
 8006bfe:	1e41      	subs	r1, r0, #1
 8006c00:	b2c9      	uxtb	r1, r1
 8006c02:	2918      	cmp	r1, #24
 8006c04:	9a03      	ldr	r2, [sp, #12]
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	d819      	bhi.n	8006c3e <__gethex+0x138>
 8006c0a:	f1a0 0b10 	sub.w	fp, r0, #16
 8006c0e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006c12:	9306      	str	r3, [sp, #24]
 8006c14:	9203      	str	r2, [sp, #12]
 8006c16:	9207      	str	r2, [sp, #28]
 8006c18:	f7ff ff60 	bl	8006adc <__hexdig_fun>
 8006c1c:	1e41      	subs	r1, r0, #1
 8006c1e:	b2c9      	uxtb	r1, r1
 8006c20:	2918      	cmp	r1, #24
 8006c22:	9a03      	ldr	r2, [sp, #12]
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	d805      	bhi.n	8006c34 <__gethex+0x12e>
 8006c28:	210a      	movs	r1, #10
 8006c2a:	fb01 0b0b 	mla	fp, r1, fp, r0
 8006c2e:	f1ab 0b10 	sub.w	fp, fp, #16
 8006c32:	e7ec      	b.n	8006c0e <__gethex+0x108>
 8006c34:	b10b      	cbz	r3, 8006c3a <__gethex+0x134>
 8006c36:	f1cb 0b00 	rsb	fp, fp, #0
 8006c3a:	445c      	add	r4, fp
 8006c3c:	e000      	b.n	8006c40 <__gethex+0x13a>
 8006c3e:	463a      	mov	r2, r7
 8006c40:	f8ca 2000 	str.w	r2, [sl]
 8006c44:	b125      	cbz	r5, 8006c50 <__gethex+0x14a>
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2000      	movne	r0, #0
 8006c4c:	2006      	moveq	r0, #6
 8006c4e:	e17c      	b.n	8006f4a <__gethex+0x444>
 8006c50:	ebc8 0307 	rsb	r3, r8, r7
 8006c54:	3b01      	subs	r3, #1
 8006c56:	4629      	mov	r1, r5
 8006c58:	2b07      	cmp	r3, #7
 8006c5a:	dd02      	ble.n	8006c62 <__gethex+0x15c>
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	105b      	asrs	r3, r3, #1
 8006c60:	e7fa      	b.n	8006c58 <__gethex+0x152>
 8006c62:	9801      	ldr	r0, [sp, #4]
 8006c64:	f000 fa2b 	bl	80070be <_Balloc>
 8006c68:	f04f 0a00 	mov.w	sl, #0
 8006c6c:	f100 0b14 	add.w	fp, r0, #20
 8006c70:	4605      	mov	r5, r0
 8006c72:	465e      	mov	r6, fp
 8006c74:	46d4      	mov	ip, sl
 8006c76:	4547      	cmp	r7, r8
 8006c78:	d937      	bls.n	8006cea <__gethex+0x1e4>
 8006c7a:	1e7b      	subs	r3, r7, #1
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	9a05      	ldr	r2, [sp, #20]
 8006c80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <__gethex+0x196>
 8006c88:	f1bc 0f20 	cmp.w	ip, #32
 8006c8c:	d11a      	bne.n	8006cc4 <__gethex+0x1be>
 8006c8e:	f8c6 a000 	str.w	sl, [r6]
 8006c92:	f04f 0a00 	mov.w	sl, #0
 8006c96:	3604      	adds	r6, #4
 8006c98:	46d4      	mov	ip, sl
 8006c9a:	e013      	b.n	8006cc4 <__gethex+0x1be>
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	9a03      	ldr	r2, [sp, #12]
 8006ca0:	f1c3 0301 	rsb	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	4543      	cmp	r3, r8
 8006ca8:	d3ee      	bcc.n	8006c88 <__gethex+0x182>
 8006caa:	4618      	mov	r0, r3
 8006cac:	9902      	ldr	r1, [sp, #8]
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	f8cd c01c 	str.w	ip, [sp, #28]
 8006cb4:	9306      	str	r3, [sp, #24]
 8006cb6:	f000 fffd 	bl	8007cb4 <strncmp>
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006cc0:	b188      	cbz	r0, 8006ce6 <__gethex+0x1e0>
 8006cc2:	e7e1      	b.n	8006c88 <__gethex+0x182>
 8006cc4:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 8006cc8:	f8cd c018 	str.w	ip, [sp, #24]
 8006ccc:	f7ff ff06 	bl	8006adc <__hexdig_fun>
 8006cd0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	f000 000f 	and.w	r0, r0, #15
 8006cda:	fa00 f00c 	lsl.w	r0, r0, ip
 8006cde:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ce2:	f10c 0c04 	add.w	ip, ip, #4
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	e7c5      	b.n	8006c76 <__gethex+0x170>
 8006cea:	f846 ab04 	str.w	sl, [r6], #4
 8006cee:	ebcb 0606 	rsb	r6, fp, r6
 8006cf2:	10b0      	asrs	r0, r6, #2
 8006cf4:	6128      	str	r0, [r5, #16]
 8006cf6:	0147      	lsls	r7, r0, #5
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f000 faaa 	bl	8007252 <__hi0bits>
 8006cfe:	f8d9 6000 	ldr.w	r6, [r9]
 8006d02:	1a38      	subs	r0, r7, r0
 8006d04:	42b0      	cmp	r0, r6
 8006d06:	dd26      	ble.n	8006d56 <__gethex+0x250>
 8006d08:	1b87      	subs	r7, r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 fdab 	bl	8007868 <__any_on>
 8006d12:	b1c8      	cbz	r0, 8006d48 <__gethex+0x242>
 8006d14:	1e7b      	subs	r3, r7, #1
 8006d16:	115a      	asrs	r2, r3, #5
 8006d18:	f003 011f 	and.w	r1, r3, #31
 8006d1c:	f04f 0801 	mov.w	r8, #1
 8006d20:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8006d24:	fa08 f101 	lsl.w	r1, r8, r1
 8006d28:	4211      	tst	r1, r2
 8006d2a:	d00e      	beq.n	8006d4a <__gethex+0x244>
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	dc02      	bgt.n	8006d36 <__gethex+0x230>
 8006d30:	f04f 0802 	mov.w	r8, #2
 8006d34:	e009      	b.n	8006d4a <__gethex+0x244>
 8006d36:	4628      	mov	r0, r5
 8006d38:	1eb9      	subs	r1, r7, #2
 8006d3a:	f000 fd95 	bl	8007868 <__any_on>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0f6      	beq.n	8006d30 <__gethex+0x22a>
 8006d42:	f04f 0803 	mov.w	r8, #3
 8006d46:	e000      	b.n	8006d4a <__gethex+0x244>
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7ff fe8f 	bl	8006a70 <rshift>
 8006d52:	443c      	add	r4, r7
 8006d54:	e00c      	b.n	8006d70 <__gethex+0x26a>
 8006d56:	da09      	bge.n	8006d6c <__gethex+0x266>
 8006d58:	1a37      	subs	r7, r6, r0
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	463a      	mov	r2, r7
 8006d60:	f000 fbac 	bl	80074bc <__lshift>
 8006d64:	1be4      	subs	r4, r4, r7
 8006d66:	4605      	mov	r5, r0
 8006d68:	f100 0b14 	add.w	fp, r0, #20
 8006d6c:	f04f 0800 	mov.w	r8, #0
 8006d70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006d74:	429c      	cmp	r4, r3
 8006d76:	dd08      	ble.n	8006d8a <__gethex+0x284>
 8006d78:	9801      	ldr	r0, [sp, #4]
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	f000 f9d4 	bl	8007128 <_Bfree>
 8006d80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d82:	2300      	movs	r3, #0
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	20a3      	movs	r0, #163	; 0xa3
 8006d88:	e0df      	b.n	8006f4a <__gethex+0x444>
 8006d8a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8006d8e:	4284      	cmp	r4, r0
 8006d90:	da53      	bge.n	8006e3a <__gethex+0x334>
 8006d92:	1b04      	subs	r4, r0, r4
 8006d94:	42b4      	cmp	r4, r6
 8006d96:	db2e      	blt.n	8006df6 <__gethex+0x2f0>
 8006d98:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d01a      	beq.n	8006dd6 <__gethex+0x2d0>
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d01c      	beq.n	8006dde <__gethex+0x2d8>
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d11d      	bne.n	8006de4 <__gethex+0x2de>
 8006da8:	42b4      	cmp	r4, r6
 8006daa:	d11b      	bne.n	8006de4 <__gethex+0x2de>
 8006dac:	2e01      	cmp	r6, #1
 8006dae:	dc0b      	bgt.n	8006dc8 <__gethex+0x2c2>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	2301      	movs	r3, #1
 8006dba:	612b      	str	r3, [r5, #16]
 8006dbc:	f8cb 3000 	str.w	r3, [fp]
 8006dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dc2:	2062      	movs	r0, #98	; 0x62
 8006dc4:	601d      	str	r5, [r3, #0]
 8006dc6:	e0c0      	b.n	8006f4a <__gethex+0x444>
 8006dc8:	4628      	mov	r0, r5
 8006dca:	1e71      	subs	r1, r6, #1
 8006dcc:	f000 fd4c 	bl	8007868 <__any_on>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1ed      	bne.n	8006db0 <__gethex+0x2aa>
 8006dd4:	e006      	b.n	8006de4 <__gethex+0x2de>
 8006dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0e9      	beq.n	8006db0 <__gethex+0x2aa>
 8006ddc:	e002      	b.n	8006de4 <__gethex+0x2de>
 8006dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e5      	bne.n	8006db0 <__gethex+0x2aa>
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	4629      	mov	r1, r5
 8006de8:	f000 f99e 	bl	8007128 <_Bfree>
 8006dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dee:	2300      	movs	r3, #0
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	2050      	movs	r0, #80	; 0x50
 8006df4:	e0a9      	b.n	8006f4a <__gethex+0x444>
 8006df6:	1e67      	subs	r7, r4, #1
 8006df8:	f1b8 0f00 	cmp.w	r8, #0
 8006dfc:	d107      	bne.n	8006e0e <__gethex+0x308>
 8006dfe:	2f00      	cmp	r7, #0
 8006e00:	dd07      	ble.n	8006e12 <__gethex+0x30c>
 8006e02:	4628      	mov	r0, r5
 8006e04:	4639      	mov	r1, r7
 8006e06:	f000 fd2f 	bl	8007868 <__any_on>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	e001      	b.n	8006e12 <__gethex+0x30c>
 8006e0e:	f04f 0801 	mov.w	r8, #1
 8006e12:	117a      	asrs	r2, r7, #5
 8006e14:	2301      	movs	r3, #1
 8006e16:	f007 071f 	and.w	r7, r7, #31
 8006e1a:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8006e1e:	40bb      	lsls	r3, r7
 8006e20:	4213      	tst	r3, r2
 8006e22:	4621      	mov	r1, r4
 8006e24:	4628      	mov	r0, r5
 8006e26:	bf18      	it	ne
 8006e28:	f048 0802 	orrne.w	r8, r8, #2
 8006e2c:	1b36      	subs	r6, r6, r4
 8006e2e:	f7ff fe1f 	bl	8006a70 <rshift>
 8006e32:	2702      	movs	r7, #2
 8006e34:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8006e38:	e000      	b.n	8006e3c <__gethex+0x336>
 8006e3a:	2701      	movs	r7, #1
 8006e3c:	f1b8 0f00 	cmp.w	r8, #0
 8006e40:	d07e      	beq.n	8006f40 <__gethex+0x43a>
 8006e42:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d00e      	beq.n	8006e68 <__gethex+0x362>
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d010      	beq.n	8006e70 <__gethex+0x36a>
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d174      	bne.n	8006f3c <__gethex+0x436>
 8006e52:	f018 0f02 	tst.w	r8, #2
 8006e56:	d071      	beq.n	8006f3c <__gethex+0x436>
 8006e58:	f8db 0000 	ldr.w	r0, [fp]
 8006e5c:	ea48 0800 	orr.w	r8, r8, r0
 8006e60:	f018 0f01 	tst.w	r8, #1
 8006e64:	d107      	bne.n	8006e76 <__gethex+0x370>
 8006e66:	e069      	b.n	8006f3c <__gethex+0x436>
 8006e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e6a:	f1c3 0301 	rsb	r3, r3, #1
 8006e6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d062      	beq.n	8006f3c <__gethex+0x436>
 8006e76:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e7a:	f105 0314 	add.w	r3, r5, #20
 8006e7e:	ea4f 088a 	mov.w	r8, sl, lsl #2
 8006e82:	eb03 0108 	add.w	r1, r3, r8
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	1c50      	adds	r0, r2, #1
 8006e8a:	d002      	beq.n	8006e92 <__gethex+0x38c>
 8006e8c:	3201      	adds	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e021      	b.n	8006ed6 <__gethex+0x3d0>
 8006e92:	2200      	movs	r2, #0
 8006e94:	f843 2b04 	str.w	r2, [r3], #4
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	d3f4      	bcc.n	8006e86 <__gethex+0x380>
 8006e9c:	68ab      	ldr	r3, [r5, #8]
 8006e9e:	459a      	cmp	sl, r3
 8006ea0:	db12      	blt.n	8006ec8 <__gethex+0x3c2>
 8006ea2:	6869      	ldr	r1, [r5, #4]
 8006ea4:	9801      	ldr	r0, [sp, #4]
 8006ea6:	3101      	adds	r1, #1
 8006ea8:	f000 f909 	bl	80070be <_Balloc>
 8006eac:	692a      	ldr	r2, [r5, #16]
 8006eae:	3202      	adds	r2, #2
 8006eb0:	f105 010c 	add.w	r1, r5, #12
 8006eb4:	4683      	mov	fp, r0
 8006eb6:	0092      	lsls	r2, r2, #2
 8006eb8:	300c      	adds	r0, #12
 8006eba:	f7fd f9ff 	bl	80042bc <memcpy>
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	9801      	ldr	r0, [sp, #4]
 8006ec2:	f000 f931 	bl	8007128 <_Bfree>
 8006ec6:	465d      	mov	r5, fp
 8006ec8:	692b      	ldr	r3, [r5, #16]
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ed0:	612a      	str	r2, [r5, #16]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	615a      	str	r2, [r3, #20]
 8006ed6:	2f02      	cmp	r7, #2
 8006ed8:	f105 0214 	add.w	r2, r5, #20
 8006edc:	d110      	bne.n	8006f00 <__gethex+0x3fa>
 8006ede:	f8d9 3000 	ldr.w	r3, [r9]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	429e      	cmp	r6, r3
 8006ee6:	d126      	bne.n	8006f36 <__gethex+0x430>
 8006ee8:	1171      	asrs	r1, r6, #5
 8006eea:	2301      	movs	r3, #1
 8006eec:	f006 061f 	and.w	r6, r6, #31
 8006ef0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006ef4:	40b3      	lsls	r3, r6
 8006ef6:	4213      	tst	r3, r2
 8006ef8:	bf0c      	ite	eq
 8006efa:	2702      	moveq	r7, #2
 8006efc:	2701      	movne	r7, #1
 8006efe:	e01a      	b.n	8006f36 <__gethex+0x430>
 8006f00:	692b      	ldr	r3, [r5, #16]
 8006f02:	4553      	cmp	r3, sl
 8006f04:	dd0a      	ble.n	8006f1c <__gethex+0x416>
 8006f06:	4628      	mov	r0, r5
 8006f08:	2101      	movs	r1, #1
 8006f0a:	f7ff fdb1 	bl	8006a70 <rshift>
 8006f0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f12:	3401      	adds	r4, #1
 8006f14:	429c      	cmp	r4, r3
 8006f16:	f73f af2f 	bgt.w	8006d78 <__gethex+0x272>
 8006f1a:	e00b      	b.n	8006f34 <__gethex+0x42e>
 8006f1c:	f016 061f 	ands.w	r6, r6, #31
 8006f20:	d008      	beq.n	8006f34 <__gethex+0x42e>
 8006f22:	4490      	add	r8, r2
 8006f24:	f1c6 0620 	rsb	r6, r6, #32
 8006f28:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8006f2c:	f000 f991 	bl	8007252 <__hi0bits>
 8006f30:	42b0      	cmp	r0, r6
 8006f32:	dbe8      	blt.n	8006f06 <__gethex+0x400>
 8006f34:	2701      	movs	r7, #1
 8006f36:	f047 0720 	orr.w	r7, r7, #32
 8006f3a:	e001      	b.n	8006f40 <__gethex+0x43a>
 8006f3c:	f047 0710 	orr.w	r7, r7, #16
 8006f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f42:	601d      	str	r5, [r3, #0]
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	4638      	mov	r0, r7
 8006f48:	601c      	str	r4, [r3, #0]
 8006f4a:	b009      	add	sp, #36	; 0x24
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f50 <L_shift>:
 8006f50:	f1c2 0208 	rsb	r2, r2, #8
 8006f54:	0092      	lsls	r2, r2, #2
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	f1c2 0620 	rsb	r6, r2, #32
 8006f5c:	6843      	ldr	r3, [r0, #4]
 8006f5e:	6805      	ldr	r5, [r0, #0]
 8006f60:	fa03 f406 	lsl.w	r4, r3, r6
 8006f64:	432c      	orrs	r4, r5
 8006f66:	40d3      	lsrs	r3, r2
 8006f68:	6004      	str	r4, [r0, #0]
 8006f6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f6e:	4288      	cmp	r0, r1
 8006f70:	d3f4      	bcc.n	8006f5c <L_shift+0xc>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}

08006f74 <__hexnan>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	680e      	ldr	r6, [r1, #0]
 8006f7a:	f8d0 a000 	ldr.w	sl, [r0]
 8006f7e:	1175      	asrs	r5, r6, #5
 8006f80:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8006f84:	f016 031f 	ands.w	r3, r6, #31
 8006f88:	b085      	sub	sp, #20
 8006f8a:	bf18      	it	ne
 8006f8c:	3504      	addne	r5, #4
 8006f8e:	f1a5 0904 	sub.w	r9, r5, #4
 8006f92:	4617      	mov	r7, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	4683      	mov	fp, r0
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	f845 2c04 	str.w	r2, [r5, #-4]
 8006f9e:	46c8      	mov	r8, r9
 8006fa0:	464c      	mov	r4, r9
 8006fa2:	9200      	str	r2, [sp, #0]
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8006faa:	2900      	cmp	r1, #0
 8006fac:	d03a      	beq.n	8007024 <__hexnan+0xb0>
 8006fae:	4608      	mov	r0, r1
 8006fb0:	9203      	str	r2, [sp, #12]
 8006fb2:	9102      	str	r1, [sp, #8]
 8006fb4:	f7ff fd92 	bl	8006adc <__hexdig_fun>
 8006fb8:	9902      	ldr	r1, [sp, #8]
 8006fba:	9a03      	ldr	r2, [sp, #12]
 8006fbc:	b9e8      	cbnz	r0, 8006ffa <__hexnan+0x86>
 8006fbe:	2920      	cmp	r1, #32
 8006fc0:	d814      	bhi.n	8006fec <__hexnan+0x78>
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	42b3      	cmp	r3, r6
 8006fc6:	daee      	bge.n	8006fa6 <__hexnan+0x32>
 8006fc8:	4544      	cmp	r4, r8
 8006fca:	d205      	bcs.n	8006fd8 <__hexnan+0x64>
 8006fcc:	2a07      	cmp	r2, #7
 8006fce:	dc03      	bgt.n	8006fd8 <__hexnan+0x64>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	f7ff ffbc 	bl	8006f50 <L_shift>
 8006fd8:	42bc      	cmp	r4, r7
 8006fda:	d921      	bls.n	8007020 <__hexnan+0xac>
 8006fdc:	f1a4 0804 	sub.w	r8, r4, #4
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f844 2c04 	str.w	r2, [r4, #-4]
 8006fe6:	9600      	str	r6, [sp, #0]
 8006fe8:	4644      	mov	r4, r8
 8006fea:	e7dc      	b.n	8006fa6 <__hexnan+0x32>
 8006fec:	2929      	cmp	r1, #41	; 0x29
 8006fee:	d145      	bne.n	800707c <__hexnan+0x108>
 8006ff0:	f10a 0301 	add.w	r3, sl, #1
 8006ff4:	f8cb 3000 	str.w	r3, [fp]
 8006ff8:	e014      	b.n	8007024 <__hexnan+0xb0>
 8006ffa:	3201      	adds	r2, #1
 8006ffc:	2a08      	cmp	r2, #8
 8006ffe:	f106 0601 	add.w	r6, r6, #1
 8007002:	dd06      	ble.n	8007012 <__hexnan+0x9e>
 8007004:	42bc      	cmp	r4, r7
 8007006:	d9ce      	bls.n	8006fa6 <__hexnan+0x32>
 8007008:	2200      	movs	r2, #0
 800700a:	f844 2c04 	str.w	r2, [r4, #-4]
 800700e:	3c04      	subs	r4, #4
 8007010:	2201      	movs	r2, #1
 8007012:	6821      	ldr	r1, [r4, #0]
 8007014:	f000 000f 	and.w	r0, r0, #15
 8007018:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800701c:	6020      	str	r0, [r4, #0]
 800701e:	e7c2      	b.n	8006fa6 <__hexnan+0x32>
 8007020:	2208      	movs	r2, #8
 8007022:	e7c0      	b.n	8006fa6 <__hexnan+0x32>
 8007024:	b356      	cbz	r6, 800707c <__hexnan+0x108>
 8007026:	4544      	cmp	r4, r8
 8007028:	d205      	bcs.n	8007036 <__hexnan+0xc2>
 800702a:	2a07      	cmp	r2, #7
 800702c:	dc03      	bgt.n	8007036 <__hexnan+0xc2>
 800702e:	4620      	mov	r0, r4
 8007030:	4641      	mov	r1, r8
 8007032:	f7ff ff8d 	bl	8006f50 <L_shift>
 8007036:	42bc      	cmp	r4, r7
 8007038:	d90c      	bls.n	8007054 <__hexnan+0xe0>
 800703a:	463b      	mov	r3, r7
 800703c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007040:	f843 2b04 	str.w	r2, [r3], #4
 8007044:	454c      	cmp	r4, r9
 8007046:	d9f9      	bls.n	800703c <__hexnan+0xc8>
 8007048:	2200      	movs	r2, #0
 800704a:	f843 2b04 	str.w	r2, [r3], #4
 800704e:	454b      	cmp	r3, r9
 8007050:	d9fa      	bls.n	8007048 <__hexnan+0xd4>
 8007052:	e00b      	b.n	800706c <__hexnan+0xf8>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	b14b      	cbz	r3, 800706c <__hexnan+0xf8>
 8007058:	f1c3 0620 	rsb	r6, r3, #32
 800705c:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	40f3      	lsrs	r3, r6
 8007066:	4013      	ands	r3, r2
 8007068:	f845 3c04 	str.w	r3, [r5, #-4]
 800706c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007070:	b933      	cbnz	r3, 8007080 <__hexnan+0x10c>
 8007072:	42bd      	cmp	r5, r7
 8007074:	d1fa      	bne.n	800706c <__hexnan+0xf8>
 8007076:	2301      	movs	r3, #1
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e001      	b.n	8007080 <__hexnan+0x10c>
 800707c:	2004      	movs	r0, #4
 800707e:	e000      	b.n	8007082 <__hexnan+0x10e>
 8007080:	2005      	movs	r0, #5
 8007082:	b005      	add	sp, #20
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007088 <_localeconv_r>:
 8007088:	4800      	ldr	r0, [pc, #0]	; (800708c <_localeconv_r+0x4>)
 800708a:	4770      	bx	lr
 800708c:	20000130 	.word	0x20000130

08007090 <malloc>:
 8007090:	4b02      	ldr	r3, [pc, #8]	; (800709c <malloc+0xc>)
 8007092:	4601      	mov	r1, r0
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	f000 bc5b 	b.w	8007950 <_malloc_r>
 800709a:	bf00      	nop
 800709c:	20000128 	.word	0x20000128

080070a0 <memchr>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	b2c9      	uxtb	r1, r1
 80070a4:	4402      	add	r2, r0
 80070a6:	4290      	cmp	r0, r2
 80070a8:	4603      	mov	r3, r0
 80070aa:	d006      	beq.n	80070ba <memchr+0x1a>
 80070ac:	781c      	ldrb	r4, [r3, #0]
 80070ae:	428c      	cmp	r4, r1
 80070b0:	f100 0001 	add.w	r0, r0, #1
 80070b4:	d1f7      	bne.n	80070a6 <memchr+0x6>
 80070b6:	4618      	mov	r0, r3
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	2000      	movs	r0, #0
 80070bc:	bd10      	pop	{r4, pc}

080070be <_Balloc>:
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070c2:	4604      	mov	r4, r0
 80070c4:	460e      	mov	r6, r1
 80070c6:	b93d      	cbnz	r5, 80070d8 <_Balloc+0x1a>
 80070c8:	2010      	movs	r0, #16
 80070ca:	f7ff ffe1 	bl	8007090 <malloc>
 80070ce:	6260      	str	r0, [r4, #36]	; 0x24
 80070d0:	6045      	str	r5, [r0, #4]
 80070d2:	6085      	str	r5, [r0, #8]
 80070d4:	6005      	str	r5, [r0, #0]
 80070d6:	60c5      	str	r5, [r0, #12]
 80070d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070da:	68eb      	ldr	r3, [r5, #12]
 80070dc:	b143      	cbz	r3, 80070f0 <_Balloc+0x32>
 80070de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070e6:	b178      	cbz	r0, 8007108 <_Balloc+0x4a>
 80070e8:	6802      	ldr	r2, [r0, #0]
 80070ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80070ee:	e017      	b.n	8007120 <_Balloc+0x62>
 80070f0:	4620      	mov	r0, r4
 80070f2:	2104      	movs	r1, #4
 80070f4:	2221      	movs	r2, #33	; 0x21
 80070f6:	f000 fbd9 	bl	80078ac <_calloc_r>
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	60e8      	str	r0, [r5, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ec      	bne.n	80070de <_Balloc+0x20>
 8007104:	2000      	movs	r0, #0
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f506 	lsl.w	r5, r1, r6
 800710e:	1d6a      	adds	r2, r5, #5
 8007110:	4620      	mov	r0, r4
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	f000 fbca 	bl	80078ac <_calloc_r>
 8007118:	2800      	cmp	r0, #0
 800711a:	d0f3      	beq.n	8007104 <_Balloc+0x46>
 800711c:	6046      	str	r6, [r0, #4]
 800711e:	6085      	str	r5, [r0, #8]
 8007120:	2300      	movs	r3, #0
 8007122:	6103      	str	r3, [r0, #16]
 8007124:	60c3      	str	r3, [r0, #12]
 8007126:	bd70      	pop	{r4, r5, r6, pc}

08007128 <_Bfree>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800712c:	4606      	mov	r6, r0
 800712e:	460d      	mov	r5, r1
 8007130:	b93c      	cbnz	r4, 8007142 <_Bfree+0x1a>
 8007132:	2010      	movs	r0, #16
 8007134:	f7ff ffac 	bl	8007090 <malloc>
 8007138:	6270      	str	r0, [r6, #36]	; 0x24
 800713a:	6044      	str	r4, [r0, #4]
 800713c:	6084      	str	r4, [r0, #8]
 800713e:	6004      	str	r4, [r0, #0]
 8007140:	60c4      	str	r4, [r0, #12]
 8007142:	b13d      	cbz	r5, 8007154 <_Bfree+0x2c>
 8007144:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007146:	686a      	ldr	r2, [r5, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800714e:	6029      	str	r1, [r5, #0]
 8007150:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007154:	bd70      	pop	{r4, r5, r6, pc}

08007156 <__multadd>:
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	690f      	ldr	r7, [r1, #16]
 800715c:	4698      	mov	r8, r3
 800715e:	4606      	mov	r6, r0
 8007160:	460c      	mov	r4, r1
 8007162:	f101 0e14 	add.w	lr, r1, #20
 8007166:	2300      	movs	r3, #0
 8007168:	f8de 0000 	ldr.w	r0, [lr]
 800716c:	b285      	uxth	r5, r0
 800716e:	0c01      	lsrs	r1, r0, #16
 8007170:	fb02 8505 	mla	r5, r2, r5, r8
 8007174:	4351      	muls	r1, r2
 8007176:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800717a:	3301      	adds	r3, #1
 800717c:	b2ad      	uxth	r5, r5
 800717e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8007182:	42bb      	cmp	r3, r7
 8007184:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8007188:	f84e 1b04 	str.w	r1, [lr], #4
 800718c:	dbec      	blt.n	8007168 <__multadd+0x12>
 800718e:	f1b8 0f00 	cmp.w	r8, #0
 8007192:	d01b      	beq.n	80071cc <__multadd+0x76>
 8007194:	68a3      	ldr	r3, [r4, #8]
 8007196:	429f      	cmp	r7, r3
 8007198:	db12      	blt.n	80071c0 <__multadd+0x6a>
 800719a:	6861      	ldr	r1, [r4, #4]
 800719c:	4630      	mov	r0, r6
 800719e:	3101      	adds	r1, #1
 80071a0:	f7ff ff8d 	bl	80070be <_Balloc>
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	3202      	adds	r2, #2
 80071a8:	f104 010c 	add.w	r1, r4, #12
 80071ac:	4605      	mov	r5, r0
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	300c      	adds	r0, #12
 80071b2:	f7fd f883 	bl	80042bc <memcpy>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4630      	mov	r0, r6
 80071ba:	f7ff ffb5 	bl	8007128 <_Bfree>
 80071be:	462c      	mov	r4, r5
 80071c0:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80071c4:	3701      	adds	r7, #1
 80071c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80071ca:	6127      	str	r7, [r4, #16]
 80071cc:	4620      	mov	r0, r4
 80071ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071d2 <__s2b>:
 80071d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d6:	460c      	mov	r4, r1
 80071d8:	4615      	mov	r5, r2
 80071da:	4698      	mov	r8, r3
 80071dc:	2209      	movs	r2, #9
 80071de:	3308      	adds	r3, #8
 80071e0:	4607      	mov	r7, r0
 80071e2:	fb93 f2f2 	sdiv	r2, r3, r2
 80071e6:	2100      	movs	r1, #0
 80071e8:	2301      	movs	r3, #1
 80071ea:	429a      	cmp	r2, r3
 80071ec:	dd02      	ble.n	80071f4 <__s2b+0x22>
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	3101      	adds	r1, #1
 80071f2:	e7fa      	b.n	80071ea <__s2b+0x18>
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff ff62 	bl	80070be <_Balloc>
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	6143      	str	r3, [r0, #20]
 80071fe:	2d09      	cmp	r5, #9
 8007200:	f04f 0301 	mov.w	r3, #1
 8007204:	4601      	mov	r1, r0
 8007206:	6103      	str	r3, [r0, #16]
 8007208:	dd10      	ble.n	800722c <__s2b+0x5a>
 800720a:	f104 0609 	add.w	r6, r4, #9
 800720e:	46b1      	mov	r9, r6
 8007210:	442c      	add	r4, r5
 8007212:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007216:	4638      	mov	r0, r7
 8007218:	220a      	movs	r2, #10
 800721a:	3b30      	subs	r3, #48	; 0x30
 800721c:	f7ff ff9b 	bl	8007156 <__multadd>
 8007220:	45a1      	cmp	r9, r4
 8007222:	4601      	mov	r1, r0
 8007224:	d1f5      	bne.n	8007212 <__s2b+0x40>
 8007226:	1974      	adds	r4, r6, r5
 8007228:	3c08      	subs	r4, #8
 800722a:	e001      	b.n	8007230 <__s2b+0x5e>
 800722c:	340a      	adds	r4, #10
 800722e:	2509      	movs	r5, #9
 8007230:	4626      	mov	r6, r4
 8007232:	1b2b      	subs	r3, r5, r4
 8007234:	4433      	add	r3, r6
 8007236:	4543      	cmp	r3, r8
 8007238:	da08      	bge.n	800724c <__s2b+0x7a>
 800723a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800723e:	4638      	mov	r0, r7
 8007240:	220a      	movs	r2, #10
 8007242:	3b30      	subs	r3, #48	; 0x30
 8007244:	f7ff ff87 	bl	8007156 <__multadd>
 8007248:	4601      	mov	r1, r0
 800724a:	e7f2      	b.n	8007232 <__s2b+0x60>
 800724c:	4608      	mov	r0, r1
 800724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007252 <__hi0bits>:
 8007252:	0c03      	lsrs	r3, r0, #16
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	b913      	cbnz	r3, 800725e <__hi0bits+0xc>
 8007258:	0400      	lsls	r0, r0, #16
 800725a:	2310      	movs	r3, #16
 800725c:	e000      	b.n	8007260 <__hi0bits+0xe>
 800725e:	2300      	movs	r3, #0
 8007260:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007264:	bf04      	itt	eq
 8007266:	0200      	lsleq	r0, r0, #8
 8007268:	3308      	addeq	r3, #8
 800726a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800726e:	bf04      	itt	eq
 8007270:	0100      	lsleq	r0, r0, #4
 8007272:	3304      	addeq	r3, #4
 8007274:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007278:	bf04      	itt	eq
 800727a:	0080      	lsleq	r0, r0, #2
 800727c:	3302      	addeq	r3, #2
 800727e:	2800      	cmp	r0, #0
 8007280:	db03      	blt.n	800728a <__hi0bits+0x38>
 8007282:	0042      	lsls	r2, r0, #1
 8007284:	d503      	bpl.n	800728e <__hi0bits+0x3c>
 8007286:	1c58      	adds	r0, r3, #1
 8007288:	4770      	bx	lr
 800728a:	4618      	mov	r0, r3
 800728c:	4770      	bx	lr
 800728e:	2020      	movs	r0, #32
 8007290:	4770      	bx	lr

08007292 <__lo0bits>:
 8007292:	6803      	ldr	r3, [r0, #0]
 8007294:	f013 0207 	ands.w	r2, r3, #7
 8007298:	d00b      	beq.n	80072b2 <__lo0bits+0x20>
 800729a:	07d9      	lsls	r1, r3, #31
 800729c:	d422      	bmi.n	80072e4 <__lo0bits+0x52>
 800729e:	079a      	lsls	r2, r3, #30
 80072a0:	bf4b      	itete	mi
 80072a2:	085b      	lsrmi	r3, r3, #1
 80072a4:	089b      	lsrpl	r3, r3, #2
 80072a6:	6003      	strmi	r3, [r0, #0]
 80072a8:	6003      	strpl	r3, [r0, #0]
 80072aa:	bf4c      	ite	mi
 80072ac:	2001      	movmi	r0, #1
 80072ae:	2002      	movpl	r0, #2
 80072b0:	4770      	bx	lr
 80072b2:	b299      	uxth	r1, r3
 80072b4:	b909      	cbnz	r1, 80072ba <__lo0bits+0x28>
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	2210      	movs	r2, #16
 80072ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072be:	bf04      	itt	eq
 80072c0:	0a1b      	lsreq	r3, r3, #8
 80072c2:	3208      	addeq	r2, #8
 80072c4:	0719      	lsls	r1, r3, #28
 80072c6:	bf04      	itt	eq
 80072c8:	091b      	lsreq	r3, r3, #4
 80072ca:	3204      	addeq	r2, #4
 80072cc:	0799      	lsls	r1, r3, #30
 80072ce:	bf04      	itt	eq
 80072d0:	089b      	lsreq	r3, r3, #2
 80072d2:	3202      	addeq	r2, #2
 80072d4:	07d9      	lsls	r1, r3, #31
 80072d6:	d402      	bmi.n	80072de <__lo0bits+0x4c>
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	d005      	beq.n	80072e8 <__lo0bits+0x56>
 80072dc:	3201      	adds	r2, #1
 80072de:	6003      	str	r3, [r0, #0]
 80072e0:	4610      	mov	r0, r2
 80072e2:	4770      	bx	lr
 80072e4:	2000      	movs	r0, #0
 80072e6:	4770      	bx	lr
 80072e8:	2020      	movs	r0, #32
 80072ea:	4770      	bx	lr

080072ec <__i2b>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	460c      	mov	r4, r1
 80072f0:	2101      	movs	r1, #1
 80072f2:	f7ff fee4 	bl	80070be <_Balloc>
 80072f6:	2201      	movs	r2, #1
 80072f8:	6144      	str	r4, [r0, #20]
 80072fa:	6102      	str	r2, [r0, #16]
 80072fc:	bd10      	pop	{r4, pc}

080072fe <__multiply>:
 80072fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007302:	4614      	mov	r4, r2
 8007304:	690a      	ldr	r2, [r1, #16]
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	429a      	cmp	r2, r3
 800730a:	bfb8      	it	lt
 800730c:	460b      	movlt	r3, r1
 800730e:	4688      	mov	r8, r1
 8007310:	bfbc      	itt	lt
 8007312:	46a0      	movlt	r8, r4
 8007314:	461c      	movlt	r4, r3
 8007316:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800731a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800731e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007322:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007326:	eb07 0609 	add.w	r6, r7, r9
 800732a:	429e      	cmp	r6, r3
 800732c:	bfc8      	it	gt
 800732e:	3101      	addgt	r1, #1
 8007330:	f7ff fec5 	bl	80070be <_Balloc>
 8007334:	f100 0514 	add.w	r5, r0, #20
 8007338:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800733c:	462b      	mov	r3, r5
 800733e:	4563      	cmp	r3, ip
 8007340:	d203      	bcs.n	800734a <__multiply+0x4c>
 8007342:	2200      	movs	r2, #0
 8007344:	f843 2b04 	str.w	r2, [r3], #4
 8007348:	e7f9      	b.n	800733e <__multiply+0x40>
 800734a:	f104 0214 	add.w	r2, r4, #20
 800734e:	f108 0114 	add.w	r1, r8, #20
 8007352:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007356:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d257      	bcs.n	8007414 <__multiply+0x116>
 8007364:	f8b2 b000 	ldrh.w	fp, [r2]
 8007368:	f1bb 0f00 	cmp.w	fp, #0
 800736c:	d023      	beq.n	80073b6 <__multiply+0xb8>
 800736e:	4689      	mov	r9, r1
 8007370:	46ae      	mov	lr, r5
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f859 4b04 	ldr.w	r4, [r9], #4
 800737a:	f8be a000 	ldrh.w	sl, [lr]
 800737e:	b2a3      	uxth	r3, r4
 8007380:	fb0b a303 	mla	r3, fp, r3, sl
 8007384:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007388:	f8de 4000 	ldr.w	r4, [lr]
 800738c:	4443      	add	r3, r8
 800738e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007392:	fb0b 840a 	mla	r4, fp, sl, r8
 8007396:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800739a:	46f2      	mov	sl, lr
 800739c:	b29b      	uxth	r3, r3
 800739e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073a2:	454f      	cmp	r7, r9
 80073a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073a8:	f84a 3b04 	str.w	r3, [sl], #4
 80073ac:	d901      	bls.n	80073b2 <__multiply+0xb4>
 80073ae:	46d6      	mov	lr, sl
 80073b0:	e7e1      	b.n	8007376 <__multiply+0x78>
 80073b2:	f8ce 8004 	str.w	r8, [lr, #4]
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073bc:	3204      	adds	r2, #4
 80073be:	f1ba 0f00 	cmp.w	sl, #0
 80073c2:	d021      	beq.n	8007408 <__multiply+0x10a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	462c      	mov	r4, r5
 80073c8:	4689      	mov	r9, r1
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	f8b9 e000 	ldrh.w	lr, [r9]
 80073d2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80073d6:	fb0a be0e 	mla	lr, sl, lr, fp
 80073da:	44f0      	add	r8, lr
 80073dc:	46a3      	mov	fp, r4
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80073e4:	f84b 3b04 	str.w	r3, [fp], #4
 80073e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073ec:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	fb0a e303 	mla	r3, sl, r3, lr
 80073f6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80073fa:	45b9      	cmp	r9, r7
 80073fc:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007400:	d201      	bcs.n	8007406 <__multiply+0x108>
 8007402:	465c      	mov	r4, fp
 8007404:	e7e3      	b.n	80073ce <__multiply+0xd0>
 8007406:	6063      	str	r3, [r4, #4]
 8007408:	3504      	adds	r5, #4
 800740a:	e7a7      	b.n	800735c <__multiply+0x5e>
 800740c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007410:	b913      	cbnz	r3, 8007418 <__multiply+0x11a>
 8007412:	3e01      	subs	r6, #1
 8007414:	2e00      	cmp	r6, #0
 8007416:	dcf9      	bgt.n	800740c <__multiply+0x10e>
 8007418:	6106      	str	r6, [r0, #16]
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007420 <__pow5mult>:
 8007420:	f012 0303 	ands.w	r3, r2, #3
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	4606      	mov	r6, r0
 800742a:	460f      	mov	r7, r1
 800742c:	4615      	mov	r5, r2
 800742e:	d007      	beq.n	8007440 <__pow5mult+0x20>
 8007430:	3b01      	subs	r3, #1
 8007432:	4a21      	ldr	r2, [pc, #132]	; (80074b8 <__pow5mult+0x98>)
 8007434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007438:	2300      	movs	r3, #0
 800743a:	f7ff fe8c 	bl	8007156 <__multadd>
 800743e:	4607      	mov	r7, r0
 8007440:	10ad      	asrs	r5, r5, #2
 8007442:	d035      	beq.n	80074b0 <__pow5mult+0x90>
 8007444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007446:	b93c      	cbnz	r4, 8007458 <__pow5mult+0x38>
 8007448:	2010      	movs	r0, #16
 800744a:	f7ff fe21 	bl	8007090 <malloc>
 800744e:	6270      	str	r0, [r6, #36]	; 0x24
 8007450:	6044      	str	r4, [r0, #4]
 8007452:	6084      	str	r4, [r0, #8]
 8007454:	6004      	str	r4, [r0, #0]
 8007456:	60c4      	str	r4, [r0, #12]
 8007458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800745c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007460:	b97c      	cbnz	r4, 8007482 <__pow5mult+0x62>
 8007462:	4630      	mov	r0, r6
 8007464:	f240 2171 	movw	r1, #625	; 0x271
 8007468:	f7ff ff40 	bl	80072ec <__i2b>
 800746c:	2300      	movs	r3, #0
 800746e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007472:	4604      	mov	r4, r0
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	e004      	b.n	8007482 <__pow5mult+0x62>
 8007478:	106d      	asrs	r5, r5, #1
 800747a:	d019      	beq.n	80074b0 <__pow5mult+0x90>
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	b170      	cbz	r0, 800749e <__pow5mult+0x7e>
 8007480:	4604      	mov	r4, r0
 8007482:	07eb      	lsls	r3, r5, #31
 8007484:	d5f8      	bpl.n	8007478 <__pow5mult+0x58>
 8007486:	4639      	mov	r1, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ff37 	bl	80072fe <__multiply>
 8007490:	4639      	mov	r1, r7
 8007492:	4680      	mov	r8, r0
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff fe47 	bl	8007128 <_Bfree>
 800749a:	4647      	mov	r7, r8
 800749c:	e7ec      	b.n	8007478 <__pow5mult+0x58>
 800749e:	4630      	mov	r0, r6
 80074a0:	4621      	mov	r1, r4
 80074a2:	4622      	mov	r2, r4
 80074a4:	f7ff ff2b 	bl	80072fe <__multiply>
 80074a8:	2300      	movs	r3, #0
 80074aa:	6020      	str	r0, [r4, #0]
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	e7e7      	b.n	8007480 <__pow5mult+0x60>
 80074b0:	4638      	mov	r0, r7
 80074b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b6:	bf00      	nop
 80074b8:	08008760 	.word	0x08008760

080074bc <__lshift>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6849      	ldr	r1, [r1, #4]
 80074ca:	eb0a 0903 	add.w	r9, sl, r3
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	4607      	mov	r7, r0
 80074d2:	4616      	mov	r6, r2
 80074d4:	f109 0501 	add.w	r5, r9, #1
 80074d8:	429d      	cmp	r5, r3
 80074da:	dd02      	ble.n	80074e2 <__lshift+0x26>
 80074dc:	3101      	adds	r1, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	e7fa      	b.n	80074d8 <__lshift+0x1c>
 80074e2:	4638      	mov	r0, r7
 80074e4:	f7ff fdeb 	bl	80070be <_Balloc>
 80074e8:	2300      	movs	r3, #0
 80074ea:	4680      	mov	r8, r0
 80074ec:	f100 0114 	add.w	r1, r0, #20
 80074f0:	4553      	cmp	r3, sl
 80074f2:	da04      	bge.n	80074fe <__lshift+0x42>
 80074f4:	2200      	movs	r2, #0
 80074f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80074fa:	3301      	adds	r3, #1
 80074fc:	e7f8      	b.n	80074f0 <__lshift+0x34>
 80074fe:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007502:	6920      	ldr	r0, [r4, #16]
 8007504:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007508:	f016 021f 	ands.w	r2, r6, #31
 800750c:	f104 0114 	add.w	r1, r4, #20
 8007510:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007514:	d014      	beq.n	8007540 <__lshift+0x84>
 8007516:	f1c2 0c20 	rsb	ip, r2, #32
 800751a:	2000      	movs	r0, #0
 800751c:	680e      	ldr	r6, [r1, #0]
 800751e:	4096      	lsls	r6, r2
 8007520:	4330      	orrs	r0, r6
 8007522:	469a      	mov	sl, r3
 8007524:	f843 0b04 	str.w	r0, [r3], #4
 8007528:	f851 0b04 	ldr.w	r0, [r1], #4
 800752c:	4571      	cmp	r1, lr
 800752e:	fa20 f00c 	lsr.w	r0, r0, ip
 8007532:	d3f3      	bcc.n	800751c <__lshift+0x60>
 8007534:	f8ca 0004 	str.w	r0, [sl, #4]
 8007538:	b148      	cbz	r0, 800754e <__lshift+0x92>
 800753a:	f109 0502 	add.w	r5, r9, #2
 800753e:	e006      	b.n	800754e <__lshift+0x92>
 8007540:	3b04      	subs	r3, #4
 8007542:	f851 2b04 	ldr.w	r2, [r1], #4
 8007546:	f843 2f04 	str.w	r2, [r3, #4]!
 800754a:	4571      	cmp	r1, lr
 800754c:	d3f9      	bcc.n	8007542 <__lshift+0x86>
 800754e:	3d01      	subs	r5, #1
 8007550:	4638      	mov	r0, r7
 8007552:	f8c8 5010 	str.w	r5, [r8, #16]
 8007556:	4621      	mov	r1, r4
 8007558:	f7ff fde6 	bl	8007128 <_Bfree>
 800755c:	4640      	mov	r0, r8
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007562 <__mcmp>:
 8007562:	6903      	ldr	r3, [r0, #16]
 8007564:	690a      	ldr	r2, [r1, #16]
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	b510      	push	{r4, lr}
 800756a:	d111      	bne.n	8007590 <__mcmp+0x2e>
 800756c:	0092      	lsls	r2, r2, #2
 800756e:	3014      	adds	r0, #20
 8007570:	3114      	adds	r1, #20
 8007572:	1883      	adds	r3, r0, r2
 8007574:	440a      	add	r2, r1
 8007576:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800757a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800757e:	428c      	cmp	r4, r1
 8007580:	d002      	beq.n	8007588 <__mcmp+0x26>
 8007582:	d307      	bcc.n	8007594 <__mcmp+0x32>
 8007584:	2001      	movs	r0, #1
 8007586:	bd10      	pop	{r4, pc}
 8007588:	4283      	cmp	r3, r0
 800758a:	d8f4      	bhi.n	8007576 <__mcmp+0x14>
 800758c:	2000      	movs	r0, #0
 800758e:	bd10      	pop	{r4, pc}
 8007590:	4618      	mov	r0, r3
 8007592:	bd10      	pop	{r4, pc}
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	bd10      	pop	{r4, pc}

0800759a <__mdiff>:
 800759a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759e:	4607      	mov	r7, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	4615      	mov	r5, r2
 80075a8:	f7ff ffdb 	bl	8007562 <__mcmp>
 80075ac:	1e06      	subs	r6, r0, #0
 80075ae:	d108      	bne.n	80075c2 <__mdiff+0x28>
 80075b0:	4638      	mov	r0, r7
 80075b2:	4631      	mov	r1, r6
 80075b4:	f7ff fd83 	bl	80070be <_Balloc>
 80075b8:	2301      	movs	r3, #1
 80075ba:	6103      	str	r3, [r0, #16]
 80075bc:	6146      	str	r6, [r0, #20]
 80075be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c2:	bfbc      	itt	lt
 80075c4:	4623      	movlt	r3, r4
 80075c6:	462c      	movlt	r4, r5
 80075c8:	4638      	mov	r0, r7
 80075ca:	6861      	ldr	r1, [r4, #4]
 80075cc:	bfba      	itte	lt
 80075ce:	461d      	movlt	r5, r3
 80075d0:	2601      	movlt	r6, #1
 80075d2:	2600      	movge	r6, #0
 80075d4:	f7ff fd73 	bl	80070be <_Balloc>
 80075d8:	692b      	ldr	r3, [r5, #16]
 80075da:	60c6      	str	r6, [r0, #12]
 80075dc:	6926      	ldr	r6, [r4, #16]
 80075de:	f105 0914 	add.w	r9, r5, #20
 80075e2:	3414      	adds	r4, #20
 80075e4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80075e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075ec:	f100 0514 	add.w	r5, r0, #20
 80075f0:	f04f 0c00 	mov.w	ip, #0
 80075f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80075f8:	f859 2b04 	ldr.w	r2, [r9], #4
 80075fc:	fa1c f183 	uxtah	r1, ip, r3
 8007600:	fa1f fe82 	uxth.w	lr, r2
 8007604:	0c12      	lsrs	r2, r2, #16
 8007606:	ebce 0101 	rsb	r1, lr, r1
 800760a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800760e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007612:	b289      	uxth	r1, r1
 8007614:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007618:	45c8      	cmp	r8, r9
 800761a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800761e:	46a6      	mov	lr, r4
 8007620:	f845 3b04 	str.w	r3, [r5], #4
 8007624:	d8e6      	bhi.n	80075f4 <__mdiff+0x5a>
 8007626:	45be      	cmp	lr, r7
 8007628:	d20e      	bcs.n	8007648 <__mdiff+0xae>
 800762a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800762e:	fa1c f482 	uxtah	r4, ip, r2
 8007632:	0c12      	lsrs	r2, r2, #16
 8007634:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8007638:	b2a4      	uxth	r4, r4
 800763a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800763e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007642:	f845 2b04 	str.w	r2, [r5], #4
 8007646:	e7ee      	b.n	8007626 <__mdiff+0x8c>
 8007648:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800764c:	b90b      	cbnz	r3, 8007652 <__mdiff+0xb8>
 800764e:	3e01      	subs	r6, #1
 8007650:	e7fa      	b.n	8007648 <__mdiff+0xae>
 8007652:	6106      	str	r6, [r0, #16]
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007658 <__ulp>:
 8007658:	4b10      	ldr	r3, [pc, #64]	; (800769c <__ulp+0x44>)
 800765a:	400b      	ands	r3, r1
 800765c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007660:	2b00      	cmp	r3, #0
 8007662:	dd02      	ble.n	800766a <__ulp+0x12>
 8007664:	2000      	movs	r0, #0
 8007666:	4619      	mov	r1, r3
 8007668:	4770      	bx	lr
 800766a:	425b      	negs	r3, r3
 800766c:	151b      	asrs	r3, r3, #20
 800766e:	2b13      	cmp	r3, #19
 8007670:	f04f 0000 	mov.w	r0, #0
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	dc04      	bgt.n	8007684 <__ulp+0x2c>
 800767a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800767e:	fa42 f103 	asr.w	r1, r2, r3
 8007682:	4770      	bx	lr
 8007684:	2b32      	cmp	r3, #50	; 0x32
 8007686:	f04f 0201 	mov.w	r2, #1
 800768a:	bfda      	itte	le
 800768c:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 8007690:	fa02 f303 	lslle.w	r3, r2, r3
 8007694:	4613      	movgt	r3, r2
 8007696:	4618      	mov	r0, r3
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	7ff00000 	.word	0x7ff00000

080076a0 <__b2d>:
 80076a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a4:	6905      	ldr	r5, [r0, #16]
 80076a6:	f100 0714 	add.w	r7, r0, #20
 80076aa:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80076ae:	4688      	mov	r8, r1
 80076b0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff fdcc 	bl	8007252 <__hi0bits>
 80076ba:	f1c0 0320 	rsb	r3, r0, #32
 80076be:	280a      	cmp	r0, #10
 80076c0:	f1a5 0604 	sub.w	r6, r5, #4
 80076c4:	f8c8 3000 	str.w	r3, [r8]
 80076c8:	dc11      	bgt.n	80076ee <__b2d+0x4e>
 80076ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80076ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80076d2:	42be      	cmp	r6, r7
 80076d4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80076d8:	bf8c      	ite	hi
 80076da:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 80076de:	2100      	movls	r1, #0
 80076e0:	3015      	adds	r0, #21
 80076e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80076ea:	4084      	lsls	r4, r0
 80076ec:	e01b      	b.n	8007726 <__b2d+0x86>
 80076ee:	42be      	cmp	r6, r7
 80076f0:	bf86      	itte	hi
 80076f2:	f1a5 0608 	subhi.w	r6, r5, #8
 80076f6:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 80076fa:	2100      	movls	r1, #0
 80076fc:	f1b0 050b 	subs.w	r5, r0, #11
 8007700:	d014      	beq.n	800772c <__b2d+0x8c>
 8007702:	40ac      	lsls	r4, r5
 8007704:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8007708:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800770c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007710:	fa21 fe00 	lsr.w	lr, r1, r0
 8007714:	42be      	cmp	r6, r7
 8007716:	ea44 030e 	orr.w	r3, r4, lr
 800771a:	bf8c      	ite	hi
 800771c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007720:	2400      	movls	r4, #0
 8007722:	40c4      	lsrs	r4, r0
 8007724:	40a9      	lsls	r1, r5
 8007726:	ea44 0201 	orr.w	r2, r4, r1
 800772a:	e004      	b.n	8007736 <__b2d+0x96>
 800772c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007730:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007734:	460a      	mov	r2, r1
 8007736:	4610      	mov	r0, r2
 8007738:	4619      	mov	r1, r3
 800773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800773e <__d2b>:
 800773e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007742:	2101      	movs	r1, #1
 8007744:	461d      	mov	r5, r3
 8007746:	9f08      	ldr	r7, [sp, #32]
 8007748:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800774a:	4614      	mov	r4, r2
 800774c:	f7ff fcb7 	bl	80070be <_Balloc>
 8007750:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007754:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007758:	4680      	mov	r8, r0
 800775a:	b10d      	cbz	r5, 8007760 <__d2b+0x22>
 800775c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	b1ec      	cbz	r4, 80077a0 <__d2b+0x62>
 8007764:	a802      	add	r0, sp, #8
 8007766:	f840 4d08 	str.w	r4, [r0, #-8]!
 800776a:	f7ff fd92 	bl	8007292 <__lo0bits>
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	b150      	cbz	r0, 8007788 <__d2b+0x4a>
 8007772:	9a01      	ldr	r2, [sp, #4]
 8007774:	f1c0 0120 	rsb	r1, r0, #32
 8007778:	fa02 f101 	lsl.w	r1, r2, r1
 800777c:	430b      	orrs	r3, r1
 800777e:	40c2      	lsrs	r2, r0
 8007780:	f8c8 3014 	str.w	r3, [r8, #20]
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	e001      	b.n	800778c <__d2b+0x4e>
 8007788:	f8c8 3014 	str.w	r3, [r8, #20]
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	f8c8 3018 	str.w	r3, [r8, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bf14      	ite	ne
 8007796:	2402      	movne	r4, #2
 8007798:	2401      	moveq	r4, #1
 800779a:	f8c8 4010 	str.w	r4, [r8, #16]
 800779e:	e009      	b.n	80077b4 <__d2b+0x76>
 80077a0:	a801      	add	r0, sp, #4
 80077a2:	f7ff fd76 	bl	8007292 <__lo0bits>
 80077a6:	2401      	movs	r4, #1
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	f8c8 3014 	str.w	r3, [r8, #20]
 80077ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80077b2:	3020      	adds	r0, #32
 80077b4:	b135      	cbz	r5, 80077c4 <__d2b+0x86>
 80077b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077ba:	4405      	add	r5, r0
 80077bc:	603d      	str	r5, [r7, #0]
 80077be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c2:	e009      	b.n	80077d8 <__d2b+0x9a>
 80077c4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80077c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077cc:	6038      	str	r0, [r7, #0]
 80077ce:	6918      	ldr	r0, [r3, #16]
 80077d0:	f7ff fd3f 	bl	8007252 <__hi0bits>
 80077d4:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80077d8:	6030      	str	r0, [r6, #0]
 80077da:	4640      	mov	r0, r8
 80077dc:	b002      	add	sp, #8
 80077de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077e2 <__ratio>:
 80077e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077e6:	4688      	mov	r8, r1
 80077e8:	4669      	mov	r1, sp
 80077ea:	4681      	mov	r9, r0
 80077ec:	f7ff ff58 	bl	80076a0 <__b2d>
 80077f0:	460f      	mov	r7, r1
 80077f2:	4606      	mov	r6, r0
 80077f4:	a901      	add	r1, sp, #4
 80077f6:	4640      	mov	r0, r8
 80077f8:	f7ff ff52 	bl	80076a0 <__b2d>
 80077fc:	9a01      	ldr	r2, [sp, #4]
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	460d      	mov	r5, r1
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007808:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800780c:	1a52      	subs	r2, r2, r1
 800780e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfc8      	it	gt
 8007816:	eb07 5703 	addgt.w	r7, r7, r3, lsl #20
 800781a:	4604      	mov	r4, r0
 800781c:	bfd8      	it	le
 800781e:	eba5 5503 	suble.w	r5, r5, r3, lsl #20
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	4622      	mov	r2, r4
 8007828:	462b      	mov	r3, r5
 800782a:	f7fc fb33 	bl	8003e94 <__aeabi_ddiv>
 800782e:	b003      	add	sp, #12
 8007830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007834 <__copybits>:
 8007834:	3901      	subs	r1, #1
 8007836:	b510      	push	{r4, lr}
 8007838:	1149      	asrs	r1, r1, #5
 800783a:	6914      	ldr	r4, [r2, #16]
 800783c:	3101      	adds	r1, #1
 800783e:	f102 0314 	add.w	r3, r2, #20
 8007842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007846:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800784a:	42a3      	cmp	r3, r4
 800784c:	4602      	mov	r2, r0
 800784e:	d204      	bcs.n	800785a <__copybits+0x26>
 8007850:	f853 2b04 	ldr.w	r2, [r3], #4
 8007854:	f840 2b04 	str.w	r2, [r0], #4
 8007858:	e7f7      	b.n	800784a <__copybits+0x16>
 800785a:	428a      	cmp	r2, r1
 800785c:	d203      	bcs.n	8007866 <__copybits+0x32>
 800785e:	2300      	movs	r3, #0
 8007860:	f842 3b04 	str.w	r3, [r2], #4
 8007864:	e7f9      	b.n	800785a <__copybits+0x26>
 8007866:	bd10      	pop	{r4, pc}

08007868 <__any_on>:
 8007868:	f100 0214 	add.w	r2, r0, #20
 800786c:	6900      	ldr	r0, [r0, #16]
 800786e:	114b      	asrs	r3, r1, #5
 8007870:	4283      	cmp	r3, r0
 8007872:	b510      	push	{r4, lr}
 8007874:	dc0c      	bgt.n	8007890 <__any_on+0x28>
 8007876:	da0c      	bge.n	8007892 <__any_on+0x2a>
 8007878:	f011 011f 	ands.w	r1, r1, #31
 800787c:	d009      	beq.n	8007892 <__any_on+0x2a>
 800787e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007882:	fa24 f001 	lsr.w	r0, r4, r1
 8007886:	fa00 f101 	lsl.w	r1, r0, r1
 800788a:	42a1      	cmp	r1, r4
 800788c:	d10c      	bne.n	80078a8 <__any_on+0x40>
 800788e:	e000      	b.n	8007892 <__any_on+0x2a>
 8007890:	4603      	mov	r3, r0
 8007892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007896:	4293      	cmp	r3, r2
 8007898:	d904      	bls.n	80078a4 <__any_on+0x3c>
 800789a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800789e:	2900      	cmp	r1, #0
 80078a0:	d0f9      	beq.n	8007896 <__any_on+0x2e>
 80078a2:	e001      	b.n	80078a8 <__any_on+0x40>
 80078a4:	2000      	movs	r0, #0
 80078a6:	bd10      	pop	{r4, pc}
 80078a8:	2001      	movs	r0, #1
 80078aa:	bd10      	pop	{r4, pc}

080078ac <_calloc_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	fb02 f401 	mul.w	r4, r2, r1
 80078b2:	4621      	mov	r1, r4
 80078b4:	f000 f84c 	bl	8007950 <_malloc_r>
 80078b8:	4605      	mov	r5, r0
 80078ba:	b118      	cbz	r0, 80078c4 <_calloc_r+0x18>
 80078bc:	2100      	movs	r1, #0
 80078be:	4622      	mov	r2, r4
 80078c0:	f7fc fd07 	bl	80042d2 <memset>
 80078c4:	4628      	mov	r0, r5
 80078c6:	bd38      	pop	{r3, r4, r5, pc}

080078c8 <_free_r>:
 80078c8:	b530      	push	{r4, r5, lr}
 80078ca:	2900      	cmp	r1, #0
 80078cc:	d03d      	beq.n	800794a <_free_r+0x82>
 80078ce:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80078d2:	1f0b      	subs	r3, r1, #4
 80078d4:	491d      	ldr	r1, [pc, #116]	; (800794c <_free_r+0x84>)
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	bfb8      	it	lt
 80078da:	189b      	addlt	r3, r3, r2
 80078dc:	680a      	ldr	r2, [r1, #0]
 80078de:	460c      	mov	r4, r1
 80078e0:	b912      	cbnz	r2, 80078e8 <_free_r+0x20>
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	600b      	str	r3, [r1, #0]
 80078e6:	bd30      	pop	{r4, r5, pc}
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d20d      	bcs.n	8007908 <_free_r+0x40>
 80078ec:	6819      	ldr	r1, [r3, #0]
 80078ee:	1858      	adds	r0, r3, r1
 80078f0:	4290      	cmp	r0, r2
 80078f2:	bf01      	itttt	eq
 80078f4:	585a      	ldreq	r2, [r3, r1]
 80078f6:	1852      	addeq	r2, r2, r1
 80078f8:	601a      	streq	r2, [r3, #0]
 80078fa:	6842      	ldreq	r2, [r0, #4]
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	bd30      	pop	{r4, r5, pc}
 8007902:	4299      	cmp	r1, r3
 8007904:	d803      	bhi.n	800790e <_free_r+0x46>
 8007906:	460a      	mov	r2, r1
 8007908:	6851      	ldr	r1, [r2, #4]
 800790a:	2900      	cmp	r1, #0
 800790c:	d1f9      	bne.n	8007902 <_free_r+0x3a>
 800790e:	6814      	ldr	r4, [r2, #0]
 8007910:	1915      	adds	r5, r2, r4
 8007912:	429d      	cmp	r5, r3
 8007914:	d10a      	bne.n	800792c <_free_r+0x64>
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4423      	add	r3, r4
 800791a:	18d0      	adds	r0, r2, r3
 800791c:	4288      	cmp	r0, r1
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	d113      	bne.n	800794a <_free_r+0x82>
 8007922:	6808      	ldr	r0, [r1, #0]
 8007924:	4403      	add	r3, r0
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	684b      	ldr	r3, [r1, #4]
 800792a:	e00d      	b.n	8007948 <_free_r+0x80>
 800792c:	d902      	bls.n	8007934 <_free_r+0x6c>
 800792e:	230c      	movs	r3, #12
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	bd30      	pop	{r4, r5, pc}
 8007934:	681c      	ldr	r4, [r3, #0]
 8007936:	1918      	adds	r0, r3, r4
 8007938:	4288      	cmp	r0, r1
 800793a:	bf04      	itt	eq
 800793c:	6808      	ldreq	r0, [r1, #0]
 800793e:	6849      	ldreq	r1, [r1, #4]
 8007940:	6059      	str	r1, [r3, #4]
 8007942:	bf04      	itt	eq
 8007944:	1900      	addeq	r0, r0, r4
 8007946:	6018      	streq	r0, [r3, #0]
 8007948:	6053      	str	r3, [r2, #4]
 800794a:	bd30      	pop	{r4, r5, pc}
 800794c:	20000384 	.word	0x20000384

08007950 <_malloc_r>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	1ccc      	adds	r4, r1, #3
 8007954:	f024 0403 	bic.w	r4, r4, #3
 8007958:	3408      	adds	r4, #8
 800795a:	2c0c      	cmp	r4, #12
 800795c:	bf38      	it	cc
 800795e:	240c      	movcc	r4, #12
 8007960:	2c00      	cmp	r4, #0
 8007962:	4606      	mov	r6, r0
 8007964:	da03      	bge.n	800796e <_malloc_r+0x1e>
 8007966:	230c      	movs	r3, #12
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	2000      	movs	r0, #0
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	428c      	cmp	r4, r1
 8007970:	d3f9      	bcc.n	8007966 <_malloc_r+0x16>
 8007972:	4a20      	ldr	r2, [pc, #128]	; (80079f4 <_malloc_r+0xa4>)
 8007974:	6813      	ldr	r3, [r2, #0]
 8007976:	4610      	mov	r0, r2
 8007978:	4619      	mov	r1, r3
 800797a:	b1a1      	cbz	r1, 80079a6 <_malloc_r+0x56>
 800797c:	680a      	ldr	r2, [r1, #0]
 800797e:	1b12      	subs	r2, r2, r4
 8007980:	d40e      	bmi.n	80079a0 <_malloc_r+0x50>
 8007982:	2a0b      	cmp	r2, #11
 8007984:	d903      	bls.n	800798e <_malloc_r+0x3e>
 8007986:	600a      	str	r2, [r1, #0]
 8007988:	188b      	adds	r3, r1, r2
 800798a:	508c      	str	r4, [r1, r2]
 800798c:	e01f      	b.n	80079ce <_malloc_r+0x7e>
 800798e:	428b      	cmp	r3, r1
 8007990:	bf0d      	iteet	eq
 8007992:	685a      	ldreq	r2, [r3, #4]
 8007994:	684a      	ldrne	r2, [r1, #4]
 8007996:	605a      	strne	r2, [r3, #4]
 8007998:	6002      	streq	r2, [r0, #0]
 800799a:	bf18      	it	ne
 800799c:	460b      	movne	r3, r1
 800799e:	e016      	b.n	80079ce <_malloc_r+0x7e>
 80079a0:	460b      	mov	r3, r1
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	e7e9      	b.n	800797a <_malloc_r+0x2a>
 80079a6:	4d14      	ldr	r5, [pc, #80]	; (80079f8 <_malloc_r+0xa8>)
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b91b      	cbnz	r3, 80079b4 <_malloc_r+0x64>
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f971 	bl	8007c94 <_sbrk_r>
 80079b2:	6028      	str	r0, [r5, #0]
 80079b4:	4630      	mov	r0, r6
 80079b6:	4621      	mov	r1, r4
 80079b8:	f000 f96c 	bl	8007c94 <_sbrk_r>
 80079bc:	1c42      	adds	r2, r0, #1
 80079be:	4603      	mov	r3, r0
 80079c0:	d0d1      	beq.n	8007966 <_malloc_r+0x16>
 80079c2:	1cc5      	adds	r5, r0, #3
 80079c4:	f025 0503 	bic.w	r5, r5, #3
 80079c8:	4285      	cmp	r5, r0
 80079ca:	d10a      	bne.n	80079e2 <_malloc_r+0x92>
 80079cc:	601c      	str	r4, [r3, #0]
 80079ce:	f103 000b 	add.w	r0, r3, #11
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	f020 0007 	bic.w	r0, r0, #7
 80079d8:	1a82      	subs	r2, r0, r2
 80079da:	d00a      	beq.n	80079f2 <_malloc_r+0xa2>
 80079dc:	4251      	negs	r1, r2
 80079de:	5099      	str	r1, [r3, r2]
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	4630      	mov	r0, r6
 80079e4:	1ae9      	subs	r1, r5, r3
 80079e6:	f000 f955 	bl	8007c94 <_sbrk_r>
 80079ea:	3001      	adds	r0, #1
 80079ec:	d0bb      	beq.n	8007966 <_malloc_r+0x16>
 80079ee:	462b      	mov	r3, r5
 80079f0:	e7ec      	b.n	80079cc <_malloc_r+0x7c>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	20000384 	.word	0x20000384
 80079f8:	20000380 	.word	0x20000380

080079fc <__ssputs_r>:
 80079fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	688e      	ldr	r6, [r1, #8]
 8007a02:	42b3      	cmp	r3, r6
 8007a04:	4682      	mov	sl, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4690      	mov	r8, r2
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	d340      	bcc.n	8007a90 <__ssputs_r+0x94>
 8007a0e:	898a      	ldrh	r2, [r1, #12]
 8007a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a14:	d03a      	beq.n	8007a8c <__ssputs_r+0x90>
 8007a16:	6825      	ldr	r5, [r4, #0]
 8007a18:	6909      	ldr	r1, [r1, #16]
 8007a1a:	1a6f      	subs	r7, r5, r1
 8007a1c:	6965      	ldr	r5, [r4, #20]
 8007a1e:	2302      	movs	r3, #2
 8007a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a24:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a28:	1c7b      	adds	r3, r7, #1
 8007a2a:	444b      	add	r3, r9
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	bf38      	it	cc
 8007a30:	461d      	movcc	r5, r3
 8007a32:	0553      	lsls	r3, r2, #21
 8007a34:	d50f      	bpl.n	8007a56 <__ssputs_r+0x5a>
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7ff ff8a 	bl	8007950 <_malloc_r>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	b198      	cbz	r0, 8007a68 <__ssputs_r+0x6c>
 8007a40:	6921      	ldr	r1, [r4, #16]
 8007a42:	463a      	mov	r2, r7
 8007a44:	f7fc fc3a 	bl	80042bc <memcpy>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	e013      	b.n	8007a7e <__ssputs_r+0x82>
 8007a56:	462a      	mov	r2, r5
 8007a58:	f000 f961 	bl	8007d1e <_realloc_r>
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	b970      	cbnz	r0, 8007a7e <__ssputs_r+0x82>
 8007a60:	4650      	mov	r0, sl
 8007a62:	6921      	ldr	r1, [r4, #16]
 8007a64:	f7ff ff30 	bl	80078c8 <_free_r>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	f8ca 3000 	str.w	r3, [sl]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	6126      	str	r6, [r4, #16]
 8007a80:	6165      	str	r5, [r4, #20]
 8007a82:	443e      	add	r6, r7
 8007a84:	1bed      	subs	r5, r5, r7
 8007a86:	6026      	str	r6, [r4, #0]
 8007a88:	60a5      	str	r5, [r4, #8]
 8007a8a:	464e      	mov	r6, r9
 8007a8c:	45b1      	cmp	r9, r6
 8007a8e:	d200      	bcs.n	8007a92 <__ssputs_r+0x96>
 8007a90:	464e      	mov	r6, r9
 8007a92:	4632      	mov	r2, r6
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	4641      	mov	r1, r8
 8007a98:	f000 f926 	bl	8007ce8 <memmove>
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	1b9b      	subs	r3, r3, r6
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	441e      	add	r6, r3
 8007aa6:	6026      	str	r6, [r4, #0]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007ab0 <_svfiprintf_r>:
 8007ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	b09d      	sub	sp, #116	; 0x74
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	9303      	str	r3, [sp, #12]
 8007aba:	898b      	ldrh	r3, [r1, #12]
 8007abc:	061c      	lsls	r4, r3, #24
 8007abe:	460d      	mov	r5, r1
 8007ac0:	4690      	mov	r8, r2
 8007ac2:	d50c      	bpl.n	8007ade <_svfiprintf_r+0x2e>
 8007ac4:	690b      	ldr	r3, [r1, #16]
 8007ac6:	b953      	cbnz	r3, 8007ade <_svfiprintf_r+0x2e>
 8007ac8:	2140      	movs	r1, #64	; 0x40
 8007aca:	f7ff ff41 	bl	8007950 <_malloc_r>
 8007ace:	6028      	str	r0, [r5, #0]
 8007ad0:	6128      	str	r0, [r5, #16]
 8007ad2:	b910      	cbnz	r0, 8007ada <_svfiprintf_r+0x2a>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	e0cc      	b.n	8007c74 <_svfiprintf_r+0x1c4>
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	616b      	str	r3, [r5, #20]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae2:	2320      	movs	r3, #32
 8007ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae8:	2330      	movs	r3, #48	; 0x30
 8007aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aee:	4643      	mov	r3, r8
 8007af0:	461c      	mov	r4, r3
 8007af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af6:	b91a      	cbnz	r2, 8007b00 <_svfiprintf_r+0x50>
 8007af8:	ebb4 0908 	subs.w	r9, r4, r8
 8007afc:	d00f      	beq.n	8007b1e <_svfiprintf_r+0x6e>
 8007afe:	e002      	b.n	8007b06 <_svfiprintf_r+0x56>
 8007b00:	2a25      	cmp	r2, #37	; 0x25
 8007b02:	d1f5      	bne.n	8007af0 <_svfiprintf_r+0x40>
 8007b04:	e7f8      	b.n	8007af8 <_svfiprintf_r+0x48>
 8007b06:	4630      	mov	r0, r6
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	f7ff ff75 	bl	80079fc <__ssputs_r>
 8007b12:	3001      	adds	r0, #1
 8007b14:	f000 80a9 	beq.w	8007c6a <_svfiprintf_r+0x1ba>
 8007b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1a:	444b      	add	r3, r9
 8007b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1e:	7823      	ldrb	r3, [r4, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80a2 	beq.w	8007c6a <_svfiprintf_r+0x1ba>
 8007b26:	2300      	movs	r3, #0
 8007b28:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	9205      	str	r2, [sp, #20]
 8007b32:	9306      	str	r3, [sp, #24]
 8007b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b38:	931a      	str	r3, [sp, #104]	; 0x68
 8007b3a:	f104 0801 	add.w	r8, r4, #1
 8007b3e:	4644      	mov	r4, r8
 8007b40:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8007c8c <_svfiprintf_r+0x1dc>
 8007b44:	7821      	ldrb	r1, [r4, #0]
 8007b46:	4648      	mov	r0, r9
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f7ff faa9 	bl	80070a0 <memchr>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	b130      	cbz	r0, 8007b64 <_svfiprintf_r+0xb4>
 8007b56:	ebc9 0000 	rsb	r0, r9, r0
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4082      	lsls	r2, r0
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	e7ec      	b.n	8007b3e <_svfiprintf_r+0x8e>
 8007b64:	06d8      	lsls	r0, r3, #27
 8007b66:	bf44      	itt	mi
 8007b68:	2220      	movmi	r2, #32
 8007b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b6e:	0719      	lsls	r1, r3, #28
 8007b70:	bf44      	itt	mi
 8007b72:	222b      	movmi	r2, #43	; 0x2b
 8007b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b78:	7822      	ldrb	r2, [r4, #0]
 8007b7a:	2a2a      	cmp	r2, #42	; 0x2a
 8007b7c:	d002      	beq.n	8007b84 <_svfiprintf_r+0xd4>
 8007b7e:	9907      	ldr	r1, [sp, #28]
 8007b80:	4623      	mov	r3, r4
 8007b82:	e00e      	b.n	8007ba2 <_svfiprintf_r+0xf2>
 8007b84:	9a03      	ldr	r2, [sp, #12]
 8007b86:	1d11      	adds	r1, r2, #4
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	9103      	str	r1, [sp, #12]
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	bfbb      	ittet	lt
 8007b90:	4252      	neglt	r2, r2
 8007b92:	f043 0302 	orrlt.w	r3, r3, #2
 8007b96:	9207      	strge	r2, [sp, #28]
 8007b98:	9207      	strlt	r2, [sp, #28]
 8007b9a:	bfb8      	it	lt
 8007b9c:	9304      	strlt	r3, [sp, #16]
 8007b9e:	3401      	adds	r4, #1
 8007ba0:	e00a      	b.n	8007bb8 <_svfiprintf_r+0x108>
 8007ba2:	461c      	mov	r4, r3
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	7822      	ldrb	r2, [r4, #0]
 8007ba8:	3a30      	subs	r2, #48	; 0x30
 8007baa:	2a09      	cmp	r2, #9
 8007bac:	d803      	bhi.n	8007bb6 <_svfiprintf_r+0x106>
 8007bae:	200a      	movs	r0, #10
 8007bb0:	fb00 2101 	mla	r1, r0, r1, r2
 8007bb4:	e7f5      	b.n	8007ba2 <_svfiprintf_r+0xf2>
 8007bb6:	9107      	str	r1, [sp, #28]
 8007bb8:	7823      	ldrb	r3, [r4, #0]
 8007bba:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbc:	d11a      	bne.n	8007bf4 <_svfiprintf_r+0x144>
 8007bbe:	7863      	ldrb	r3, [r4, #1]
 8007bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc2:	d10a      	bne.n	8007bda <_svfiprintf_r+0x12a>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd4:	3402      	adds	r4, #2
 8007bd6:	9305      	str	r3, [sp, #20]
 8007bd8:	e00c      	b.n	8007bf4 <_svfiprintf_r+0x144>
 8007bda:	1c61      	adds	r1, r4, #1
 8007bdc:	2200      	movs	r2, #0
 8007bde:	460c      	mov	r4, r1
 8007be0:	3101      	adds	r1, #1
 8007be2:	7823      	ldrb	r3, [r4, #0]
 8007be4:	3b30      	subs	r3, #48	; 0x30
 8007be6:	2b09      	cmp	r3, #9
 8007be8:	d803      	bhi.n	8007bf2 <_svfiprintf_r+0x142>
 8007bea:	200a      	movs	r0, #10
 8007bec:	fb00 3202 	mla	r2, r0, r2, r3
 8007bf0:	e7f5      	b.n	8007bde <_svfiprintf_r+0x12e>
 8007bf2:	9205      	str	r2, [sp, #20]
 8007bf4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007c90 <_svfiprintf_r+0x1e0>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	f7ff fa4f 	bl	80070a0 <memchr>
 8007c02:	b138      	cbz	r0, 8007c14 <_svfiprintf_r+0x164>
 8007c04:	9a04      	ldr	r2, [sp, #16]
 8007c06:	ebc8 0000 	rsb	r0, r8, r0
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	4083      	lsls	r3, r0
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	3401      	adds	r4, #1
 8007c14:	7821      	ldrb	r1, [r4, #0]
 8007c16:	481a      	ldr	r0, [pc, #104]	; (8007c80 <_svfiprintf_r+0x1d0>)
 8007c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1c:	2206      	movs	r2, #6
 8007c1e:	f104 0801 	add.w	r8, r4, #1
 8007c22:	f7ff fa3d 	bl	80070a0 <memchr>
 8007c26:	b188      	cbz	r0, 8007c4c <_svfiprintf_r+0x19c>
 8007c28:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <_svfiprintf_r+0x1d4>)
 8007c2a:	b933      	cbnz	r3, 8007c3a <_svfiprintf_r+0x18a>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	e013      	b.n	8007c62 <_svfiprintf_r+0x1b2>
 8007c3a:	ab03      	add	r3, sp, #12
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	462a      	mov	r2, r5
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <_svfiprintf_r+0x1d8>)
 8007c46:	f7fc fbdd 	bl	8004404 <_printf_float>
 8007c4a:	e007      	b.n	8007c5c <_svfiprintf_r+0x1ac>
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4630      	mov	r0, r6
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	462a      	mov	r2, r5
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <_svfiprintf_r+0x1d8>)
 8007c58:	f7fc fe8e 	bl	8004978 <_printf_i>
 8007c5c:	1c42      	adds	r2, r0, #1
 8007c5e:	4607      	mov	r7, r0
 8007c60:	d003      	beq.n	8007c6a <_svfiprintf_r+0x1ba>
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	443b      	add	r3, r7
 8007c66:	9309      	str	r3, [sp, #36]	; 0x24
 8007c68:	e741      	b.n	8007aee <_svfiprintf_r+0x3e>
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	065b      	lsls	r3, r3, #25
 8007c6e:	d401      	bmi.n	8007c74 <_svfiprintf_r+0x1c4>
 8007c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c72:	e001      	b.n	8007c78 <_svfiprintf_r+0x1c8>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b01d      	add	sp, #116	; 0x74
 8007c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c7e:	bf00      	nop
 8007c80:	08008776 	.word	0x08008776
 8007c84:	08004405 	.word	0x08004405
 8007c88:	080079fd 	.word	0x080079fd
 8007c8c:	0800876c 	.word	0x0800876c
 8007c90:	08008772 	.word	0x08008772

08007c94 <_sbrk_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4c06      	ldr	r4, [pc, #24]	; (8007cb0 <_sbrk_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	f7fa fac4 	bl	800222c <_sbrk>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_sbrk_r+0x1a>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_sbrk_r+0x1a>
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	2000039c 	.word	0x2000039c

08007cb4 <strncmp>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	b1aa      	cbz	r2, 8007ce4 <strncmp+0x30>
 8007cb8:	1e45      	subs	r5, r0, #1
 8007cba:	3901      	subs	r1, #1
 8007cbc:	786b      	ldrb	r3, [r5, #1]
 8007cbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	f105 0601 	add.w	r6, r5, #1
 8007cc8:	d106      	bne.n	8007cd8 <strncmp+0x24>
 8007cca:	f06f 0401 	mvn.w	r4, #1
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	4414      	add	r4, r2
 8007cd2:	42e0      	cmn	r0, r4
 8007cd4:	d102      	bne.n	8007cdc <strncmp+0x28>
 8007cd6:	461c      	mov	r4, r3
 8007cd8:	1b18      	subs	r0, r3, r4
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	4635      	mov	r5, r6
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1ec      	bne.n	8007cbc <strncmp+0x8>
 8007ce2:	e7f8      	b.n	8007cd6 <strncmp+0x22>
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}

08007ce8 <memmove>:
 8007ce8:	4281      	cmp	r1, r0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	eb01 0302 	add.w	r3, r1, r2
 8007cf0:	d301      	bcc.n	8007cf6 <memmove+0xe>
 8007cf2:	1e42      	subs	r2, r0, #1
 8007cf4:	e00b      	b.n	8007d0e <memmove+0x26>
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	d2fb      	bcs.n	8007cf2 <memmove+0xa>
 8007cfa:	1881      	adds	r1, r0, r2
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	42d3      	cmn	r3, r2
 8007d00:	d004      	beq.n	8007d0c <memmove+0x24>
 8007d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d0a:	e7f8      	b.n	8007cfe <memmove+0x16>
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	d004      	beq.n	8007d1c <memmove+0x34>
 8007d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d1a:	e7f8      	b.n	8007d0e <memmove+0x26>
 8007d1c:	bd10      	pop	{r4, pc}

08007d1e <_realloc_r>:
 8007d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d20:	4607      	mov	r7, r0
 8007d22:	4615      	mov	r5, r2
 8007d24:	460e      	mov	r6, r1
 8007d26:	b921      	cbnz	r1, 8007d32 <_realloc_r+0x14>
 8007d28:	4611      	mov	r1, r2
 8007d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d2e:	f7ff be0f 	b.w	8007950 <_malloc_r>
 8007d32:	b91a      	cbnz	r2, 8007d3c <_realloc_r+0x1e>
 8007d34:	f7ff fdc8 	bl	80078c8 <_free_r>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	f000 f815 	bl	8007d6a <_malloc_usable_size_r>
 8007d40:	42a8      	cmp	r0, r5
 8007d42:	d20e      	bcs.n	8007d62 <_realloc_r+0x44>
 8007d44:	4638      	mov	r0, r7
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7ff fe02 	bl	8007950 <_malloc_r>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	b150      	cbz	r0, 8007d66 <_realloc_r+0x48>
 8007d50:	4631      	mov	r1, r6
 8007d52:	462a      	mov	r2, r5
 8007d54:	f7fc fab2 	bl	80042bc <memcpy>
 8007d58:	4638      	mov	r0, r7
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	f7ff fdb4 	bl	80078c8 <_free_r>
 8007d60:	e001      	b.n	8007d66 <_realloc_r+0x48>
 8007d62:	4630      	mov	r0, r6
 8007d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d66:	4620      	mov	r0, r4
 8007d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d6a <_malloc_usable_size_r>:
 8007d6a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	bfbe      	ittt	lt
 8007d72:	1809      	addlt	r1, r1, r0
 8007d74:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007d78:	18c0      	addlt	r0, r0, r3
 8007d7a:	3804      	subs	r0, #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <__aeabi_d2uiz>:
 8007d80:	004a      	lsls	r2, r1, #1
 8007d82:	d211      	bcs.n	8007da8 <__aeabi_d2uiz+0x28>
 8007d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007d88:	d211      	bcs.n	8007dae <__aeabi_d2uiz+0x2e>
 8007d8a:	d50d      	bpl.n	8007da8 <__aeabi_d2uiz+0x28>
 8007d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007d94:	d40e      	bmi.n	8007db4 <__aeabi_d2uiz+0x34>
 8007d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007da2:	fa23 f002 	lsr.w	r0, r3, r2
 8007da6:	4770      	bx	lr
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	4770      	bx	lr
 8007dae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007db2:	d102      	bne.n	8007dba <__aeabi_d2uiz+0x3a>
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	4770      	bx	lr
 8007dba:	f04f 0000 	mov.w	r0, #0
 8007dbe:	4770      	bx	lr

08007dc0 <Font6x8>:
	...
 8007dd0:	2000 2000 2000 2000 2000 0000 2000 0000     . . . . . ... ..
 8007de0:	5000 5000 5000 0000 0000 0000 0000 0000     .P.P.P..........
 8007df0:	5000 5000 f800 5000 f800 5000 5000 0000     .P.P...P...P.P..
 8007e00:	2000 7800 a000 7000 2800 f000 2000 0000     . .x...p.(... ..
 8007e10:	c000 c800 1000 2000 4000 9800 1800 0000     ....... .@......
 8007e20:	4000 a000 a000 4000 a800 9000 6800 0000     .@.....@.....h..
 8007e30:	3000 3000 2000 4000 0000 0000 0000 0000     .0.0. .@........
 8007e40:	1000 2000 4000 4000 4000 2000 1000 0000     ... .@.@.@. ....
 8007e50:	4000 2000 1000 1000 1000 2000 4000 0000     .@. ....... .@..
 8007e60:	2000 a800 7000 f800 7000 a800 2000 0000     . ...p...p... ..
 8007e70:	0000 2000 2000 f800 2000 2000 0000 0000     ... . ... . ....
	...
 8007e88:	3000 3000 2000 0000 0000 0000 0000 f800     .0.0. ..........
	...
 8007ea8:	0000 3000 3000 0000 0000 0800 1000 2000     ...0.0......... 
 8007eb8:	4000 8000 0000 0000 7000 8800 9800 a800     .@.......p......
 8007ec8:	c800 8800 7000 0000 2000 6000 2000 2000     .....p... .`. . 
 8007ed8:	2000 2000 7000 0000 7000 8800 0800 7000     . . .p...p.....p
 8007ee8:	8000 8000 f800 0000 f800 0800 1000 3000     ...............0
 8007ef8:	0800 8800 7000 0000 1000 3000 5000 9000     .....p.....0.P..
 8007f08:	f800 1000 1000 0000 f800 8000 f000 0800     ................
 8007f18:	0800 8800 7000 0000 3800 4000 8000 f000     .....p...8.@....
 8007f28:	8800 8800 7000 0000 f800 0800 0800 1000     .....p..........
 8007f38:	2000 4000 8000 0000 7000 8800 8800 7000     . .@.....p.....p
 8007f48:	8800 8800 7000 0000 7000 8800 8800 7800     .....p...p.....x
 8007f58:	0800 1000 e000 0000 0000 0000 2000 0000     ............. ..
 8007f68:	2000 0000 0000 0000 0000 0000 2000 0000     . ........... ..
 8007f78:	2000 2000 4000 0000 0800 1000 2000 4000     . . .@....... .@
 8007f88:	2000 1000 0800 0000 0000 0000 f800 0000     . ..............
 8007f98:	f800 0000 0000 0000 4000 2000 1000 0800     .........@. ....
 8007fa8:	1000 2000 4000 0000 7000 8800 0800 3000     ... .@...p.....0
 8007fb8:	2000 0000 2000 0000 7000 8800 a800 b800     . ... ...p......
 8007fc8:	b000 8000 7800 0000 2000 5000 8800 8800     .....x... .P....
 8007fd8:	f800 8800 8800 0000 f000 8800 8800 f000     ................
 8007fe8:	8800 8800 f000 0000 7000 8800 8000 8000     .........p......
 8007ff8:	8000 8800 7000 0000 f000 8800 8800 8800     .....p..........
 8008008:	8800 8800 f000 0000 f800 8000 8000 f000     ................
 8008018:	8000 8000 f800 0000 f800 8000 8000 f000     ................
 8008028:	8000 8000 8000 0000 7800 8800 8000 8000     .........x......
 8008038:	9800 8800 7800 0000 8800 8800 8800 f800     .....x..........
 8008048:	8800 8800 8800 0000 7000 2000 2000 2000     .........p. . . 
 8008058:	2000 2000 7000 0000 3800 1000 1000 1000     . . .p...8......
 8008068:	1000 9000 6000 0000 8800 9000 a000 c000     .....`..........
 8008078:	a000 9000 8800 0000 8000 8000 8000 8000     ................
 8008088:	8000 8000 f800 0000 8800 d800 a800 a800     ................
 8008098:	a800 8800 8800 0000 8800 8800 c800 a800     ................
 80080a8:	9800 8800 8800 0000 7000 8800 8800 8800     .........p......
 80080b8:	8800 8800 7000 0000 f000 8800 8800 f000     .....p..........
 80080c8:	8000 8000 8000 0000 7000 8800 8800 8800     .........p......
 80080d8:	a800 9000 6800 0000 f000 8800 8800 f000     .....h..........
 80080e8:	a000 9000 8800 0000 7000 8800 8000 7000     .........p.....p
 80080f8:	0800 8800 7000 0000 f800 a800 2000 2000     .....p....... . 
 8008108:	2000 2000 2000 0000 8800 8800 8800 8800     . . . ..........
 8008118:	8800 8800 7000 0000 8800 8800 8800 8800     .....p..........
 8008128:	8800 5000 2000 0000 8800 8800 8800 a800     ...P. ..........
 8008138:	a800 a800 5000 0000 8800 8800 5000 2000     .....P.......P. 
 8008148:	5000 8800 8800 0000 8800 8800 5000 2000     .P...........P. 
 8008158:	2000 2000 2000 0000 f800 0800 1000 7000     . . . .........p
 8008168:	4000 8000 f800 0000 7800 4000 4000 4000     .@.......x.@.@.@
 8008178:	4000 4000 7800 0000 0000 8000 4000 2000     .@.@.x.......@. 
 8008188:	1000 0800 0000 0000 7800 0800 0800 0800     .........x......
 8008198:	0800 0800 7800 0000 2000 5000 8800 0000     .....x... .P....
	...
 80081bc:	f800 0000 6000 6000 2000 1000 0000 0000     .....`.`. ......
	...
 80081d4:	6000 1000 7000 9000 7800 0000 8000 8000     .`...p...x......
 80081e4:	b000 c800 8800 c800 b000 0000 0000 0000     ................
 80081f4:	7000 8800 8000 8800 7000 0000 0800 0800     .p.......p......
 8008204:	6800 9800 8800 9800 6800 0000 0000 0000     .h.......h......
 8008214:	7000 8800 f800 8000 7000 0000 1000 2800     .p.......p.....(
 8008224:	2000 7000 2000 2000 2000 0000 0000 0000     . .p. . . ......
 8008234:	7000 9800 9800 6800 0800 0000 8000 8000     .p.....h........
 8008244:	b000 c800 8800 8800 8800 0000 2000 0000     ............. ..
 8008254:	6000 2000 2000 2000 7000 0000 1000 0000     .`. . . .p......
 8008264:	1000 1000 1000 9000 6000 0000 8000 8000     .........`......
 8008274:	9000 a000 c000 a000 9000 0000 6000 2000     .............`. 
 8008284:	2000 2000 2000 2000 7000 0000 0000 0000     . . . . .p......
 8008294:	d000 a800 a800 a800 a800 0000 0000 0000     ................
 80082a4:	b000 c800 8800 8800 8800 0000 0000 0000     ................
 80082b4:	7000 8800 8800 8800 7000 0000 0000 0000     .p.......p......
 80082c4:	b000 c800 c800 b000 8000 0000 0000 0000     ................
 80082d4:	6800 9800 9800 6800 0800 0000 0000 0000     .h.....h........
 80082e4:	b000 c800 8000 8000 8000 0000 0000 0000     ................
 80082f4:	7800 8000 7000 0800 f000 0000 2000 2000     .x...p....... . 
 8008304:	f800 2000 2000 2800 1000 0000 0000 0000     ... . .(........
 8008314:	8800 8800 8800 9800 6800 0000 0000 0000     .........h......
 8008324:	8800 8800 8800 5000 2000 0000 0000 0000     .......P. ......
 8008334:	8800 8800 a800 a800 5000 0000 0000 0000     .........P......
 8008344:	8800 5000 2000 5000 8800 0000 0000 0000     ...P. .P........
 8008354:	8800 8800 7800 0800 8800 0000 0000 0000     .....x..........
 8008364:	f800 1000 2000 4000 f800 0000 1000 2000     ..... .@....... 
 8008374:	2000 4000 2000 2000 1000 0000 2000 2000     . .@. . ..... . 
 8008384:	2000 0000 2000 2000 2000 0000 4000 2000     . ... . . ...@. 
 8008394:	2000 1000 2000 2000 4000 0000 4000 a800     . ... . .@...@..
 80083a4:	1000 0000 0000 0000 0000 0000               ............

080083b0 <g_xmc_vadc_group_array>:
 80083b0:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

080083c0 <I2C_MASTER_0_sda_pin_config>:
 80083c0:	00d0 0000 0001 0000 0000 0000               ............

080083cc <I2C_MASTER_0_scl_pin_config>:
 80083cc:	00d0 0000 0001 0000 0000 0000               ............

080083d8 <I2C_MASTER_0_channel_config>:
 80083d8:	86a0 0001 0000 0000                         ........

080083e0 <I2C_MASTER_0_config>:
 80083e0:	83d8 0800 2e81 0800 2e5d 0800 2e3d 0800     ........]...=...
	...
 8008404:	0000 0404 5a5b 0000                         ....[Z..

0800840c <group_init_handle0>:
	...

08008420 <group_init_handle1>:
	...

08008434 <group_init_handle2>:
	...

08008448 <group_init_handle3>:
	...

0800845c <global_config>:
 800845c:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...
 8008474:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8008484:	0101 0101                                   ....

08008488 <global_iclass_config>:
 8008488:	0000 0000                                   ....

0800848c <backgnd_rs_intr_handle>:
 800848c:	0010 0000 003f 0000 0000 0000               ....?.......

08008498 <backgnd_config>:
 8008498:	0005 0000 0000 0000 0008 0000 002d 0000     ............-...
 80084a8:	0000 0000 7325 2520 2573 2e64 3025 6431     ....%s %s%d.%01d
 80084b8:	2520 0073 6f50 6577 3a72 0000 0057 0000      %s.Power:..W...
 80084c8:	0043 4e49 0046 6e69 0066 414e 004e 616e     C.INF.inf.NAN.na
 80084d8:	006e 0030 3130 3332 3534 3736 3938 4241     n.0.0123456789AB
 80084e8:	4443 4645 3000 3231 3433 3635 3837 6139     CDEF.0123456789a
 80084f8:	6362 6564 0066 2565 646c 0000               bcdef.e%ld..

08008504 <fpi.5242>:
 8008504:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8008514:	0000 0000                                   ....

08008518 <tinytens>:
 8008518:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008528:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008538:	6f43 64ac 0628 1168                         Co.d(.h.

08008540 <fpinan.5278>:
 8008540:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8008550:	0000 0000                                   ....

08008554 <_ctype_>:
 8008554:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8008564:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8008574:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8008584:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8008594:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80085a4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80085b4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80085c4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80085d4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 8008654:	4900 666e 6e69 7469 0079 614e 004e 4f50     .Infinity.NaN.PO
 8008664:	4953 0058 002e 0000 0000 0000               SIX.........

08008670 <__mprec_tens>:
 8008670:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008680:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008690:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80086a0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80086b0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80086c0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80086d0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80086e0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80086f0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008700:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008710:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008720:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008730:	9db4 79d9 7843 44ea                         ...yCx.D

08008738 <__mprec_bigtens>:
 8008738:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008748:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008758:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008760 <p05.5277>:
 8008760:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 8008770:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
